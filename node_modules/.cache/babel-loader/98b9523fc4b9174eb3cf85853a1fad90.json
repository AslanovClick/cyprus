{"ast":null,"code":"/* eslint-disable */\n\n/*!\n * @pixi-spine/loader-uni - v3.0.5\n * Compiled Wed, 14 Jul 2021 08:35:24 UTC\n *\n * @pixi-spine/loader-uni is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n * \n * Copyright 2019-2020, Mat Groves, All Rights Reserved\n */\nimport { AbstractSpineParser } from '@pixi-spine/loader-base';\nimport { BinaryInput, SpineBase } from '@pixi-spine/base';\nimport { Loader } from '@pixi/loaders';\nimport * as spine38 from '@pixi-spine/runtime-3.8';\nimport { SkeletonBinary, AtlasAttachmentLoader, SkeletonJson as SkeletonJson$1 } from '@pixi-spine/runtime-3.8';\nimport * as spine37 from '@pixi-spine/runtime-3.7';\nimport { SkeletonJson, AtlasAttachmentLoader as AtlasAttachmentLoader$2 } from '@pixi-spine/runtime-3.7';\nimport * as spine40 from '@pixi-spine/runtime-4.0';\nimport { SkeletonBinary as SkeletonBinary$1, AtlasAttachmentLoader as AtlasAttachmentLoader$1, SkeletonJson as SkeletonJson$2 } from '@pixi-spine/runtime-4.0';\n/**\r\n * @public\r\n */\n\nvar SPINE_VERSION;\n\n(function (SPINE_VERSION) {\n  const UNKNOWN = 0;\n  SPINE_VERSION[SPINE_VERSION[\"UNKNOWN\"] = UNKNOWN] = \"UNKNOWN\";\n  const VER37 = 37;\n  SPINE_VERSION[SPINE_VERSION[\"VER37\"] = VER37] = \"VER37\";\n  const VER38 = 38;\n  SPINE_VERSION[SPINE_VERSION[\"VER38\"] = VER38] = \"VER38\";\n  const VER40 = 40;\n  SPINE_VERSION[SPINE_VERSION[\"VER40\"] = VER40] = \"VER40\";\n})(SPINE_VERSION || (SPINE_VERSION = {}));\n/**\r\n * @public\r\n */\n\n\nfunction detectSpineVersion(version) {\n  const ver3 = version.substr(0, 3);\n  const verNum = Math.floor(+ver3 * 10 + 1e-3);\n\n  if (ver3 === '3.7') {\n    return SPINE_VERSION.VER37;\n  }\n\n  if (ver3 === '3.8') {\n    return SPINE_VERSION.VER38;\n  }\n\n  if (ver3 === '4.0') {\n    return SPINE_VERSION.VER40;\n  } // try parse old versions with 3.7\n\n\n  if (verNum < SPINE_VERSION.VER37) {\n    return SPINE_VERSION.VER37;\n  }\n\n  return SPINE_VERSION.UNKNOWN;\n}\n\nclass UniBinaryParser {\n  constructor() {\n    UniBinaryParser.prototype.__init.call(this);\n  }\n\n  __init() {\n    this.scale = 1;\n  }\n\n  readSkeletonData(atlas, dataToParse) {\n    let input = new BinaryInput(dataToParse);\n    input.readString();\n    let version = input.readString();\n    let ver = detectSpineVersion(version);\n    let parser = null;\n\n    if (ver === SPINE_VERSION.VER38) {\n      parser = new SkeletonBinary(new AtlasAttachmentLoader(atlas));\n    }\n\n    input = new BinaryInput(dataToParse);\n    input.readInt32();\n    input.readInt32();\n    version = input.readString();\n    ver = detectSpineVersion(version);\n\n    if (ver === SPINE_VERSION.VER40) {\n      parser = new SkeletonBinary$1(new AtlasAttachmentLoader$1(atlas));\n    }\n\n    if (!parser) {\n      let error = `Unsupported version of spine model ${version}, please update pixi-spine`;\n      console.error(error);\n    }\n\n    parser.scale = this.scale;\n    return parser.readSkeletonData(dataToParse);\n  }\n\n}\n\nclass UniJsonParser {\n  constructor() {\n    UniJsonParser.prototype.__init2.call(this);\n  }\n\n  __init2() {\n    this.scale = 1;\n  }\n\n  readSkeletonData(atlas, dataToParse) {\n    const version = dataToParse.skeleton.spine;\n    const ver = detectSpineVersion(version);\n    let parser = null;\n\n    if (ver === SPINE_VERSION.VER37) {\n      parser = new SkeletonJson(new AtlasAttachmentLoader$2(atlas));\n    }\n\n    if (ver === SPINE_VERSION.VER38) {\n      parser = new SkeletonJson$1(new AtlasAttachmentLoader(atlas));\n    }\n\n    if (ver === SPINE_VERSION.VER40) {\n      parser = new SkeletonJson$2(new AtlasAttachmentLoader$1(atlas));\n    }\n\n    if (!parser) {\n      let error = `Unsupported version of spine model ${version}, please update pixi-spine`;\n      console.error(error);\n    }\n\n    parser.scale = this.scale;\n    return parser.readSkeletonData(dataToParse);\n  }\n\n}\n/**\r\n * @public\r\n */\n\n\nclass SpineParser extends AbstractSpineParser {\n  createBinaryParser() {\n    return new UniBinaryParser();\n  }\n\n  createJsonParser() {\n    return new UniJsonParser();\n  }\n\n  parseData(resource, parser, atlas, dataToParse) {\n    const parserCast = parser;\n    resource.spineData = parserCast.readSkeletonData(atlas, dataToParse);\n    resource.spineAtlas = atlas;\n  }\n\n  static __initStatic() {\n    this.use = new SpineParser().genMiddleware().use;\n  }\n\n  static registerLoaderPlugin() {\n    Loader.registerPlugin(SpineParser);\n  }\n\n}\n\nSpineParser.__initStatic();\n/**\r\n * @public\r\n */\n\n\nclass Spine extends SpineBase {\n  createSkeleton(spineData) {\n    const ver = detectSpineVersion(spineData.version);\n    let spine = null;\n\n    if (ver === SPINE_VERSION.VER37) {\n      spine = spine37;\n    }\n\n    if (ver === SPINE_VERSION.VER38) {\n      spine = spine38;\n    }\n\n    if (ver === SPINE_VERSION.VER40) {\n      spine = spine40;\n    }\n\n    if (!spine) {\n      let error = `Cant detect version of spine model ${spineData.version}`;\n      console.error(error);\n    }\n\n    this.skeleton = new spine.Skeleton(spineData);\n    this.skeleton.updateWorldTransform();\n    this.stateData = new spine.AnimationStateData(spineData);\n    this.state = new spine.AnimationState(this.stateData);\n  }\n\n}\n\nexport { SPINE_VERSION, Spine, SpineParser, detectSpineVersion };","map":{"version":3,"sources":["../src/versions.ts","../src/SpineLoader.ts","../src/Spine.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @public\r\n */\r\nexport enum SPINE_VERSION {\r\n    UNKNOWN = 0,\r\n    VER37 = 37,\r\n    VER38 = 38,\r\n    VER40 = 40,\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport function detectSpineVersion(version: string): SPINE_VERSION {\r\n    const ver3 = version.substr(0, 3);\r\n    const verNum = Math.floor(+ver3 * 10 + 1e-3);\r\n\r\n    if (ver3 === '3.7') {\r\n        return SPINE_VERSION.VER37;\r\n    }\r\n    if (ver3 === '3.8') {\r\n        return SPINE_VERSION.VER38;\r\n    }\r\n    if (ver3 === '4.0') {\r\n        return SPINE_VERSION.VER40;\r\n    }\r\n    // try parse old versions with 3.7\r\n    if (verNum < SPINE_VERSION.VER37) {\r\n        return SPINE_VERSION.VER37;\r\n    }\r\n    return SPINE_VERSION.UNKNOWN;\r\n}\r\n","import {AbstractSpineParser} from '@pixi-spine/loader-base';\r\nimport {BinaryInput, ISkeletonData, ISkeletonParser, TextureAtlas} from \"@pixi-spine/base\";\r\nimport {ILoaderResource, Loader} from \"@pixi/loaders\";\r\nimport * as spine38 from \"@pixi-spine/runtime-3.8\";\r\nimport * as spine37 from \"@pixi-spine/runtime-3.7\";\r\nimport * as spine40 from \"@pixi-spine/runtime-4.0\";\r\nimport {detectSpineVersion, SPINE_VERSION} from \"./versions\";\r\n\r\nclass UniBinaryParser implements ISkeletonParser {\r\n    scale = 1;\r\n\r\n    readSkeletonData(atlas: TextureAtlas, dataToParse: Uint8Array): ISkeletonData {\r\n        let input = new BinaryInput(dataToParse);\r\n        input.readString();\r\n        let version = input.readString();\r\n        let ver = detectSpineVersion(version);\r\n        let parser: any = null;\r\n\r\n        if (ver === SPINE_VERSION.VER38) {\r\n            parser = new spine38.SkeletonBinary(new spine38.AtlasAttachmentLoader(atlas));\r\n        }\r\n\r\n        input = new BinaryInput(dataToParse);\r\n        input.readInt32();\r\n        input.readInt32();\r\n        version = input.readString();\r\n        ver = detectSpineVersion(version);\r\n        if (ver === SPINE_VERSION.VER40) {\r\n            parser = new spine40.SkeletonBinary(new spine40.AtlasAttachmentLoader(atlas));\r\n        }\r\n        if (!parser) {\r\n            let error = `Unsupported version of spine model ${version}, please update pixi-spine`;\r\n            console.error(error);\r\n        }\r\n\r\n        parser.scale = this.scale;\r\n        return parser.readSkeletonData(dataToParse);\r\n    }\r\n}\r\n\r\nclass UniJsonParser implements ISkeletonParser {\r\n    scale = 1;\r\n\r\n    readSkeletonData(atlas: TextureAtlas, dataToParse: any): ISkeletonData {\r\n        const version = dataToParse.skeleton.spine;\r\n        const ver = detectSpineVersion(version);\r\n        let parser: any = null;\r\n\r\n        if (ver === SPINE_VERSION.VER37) {\r\n            parser = new spine37.SkeletonJson(new spine37.AtlasAttachmentLoader(atlas));\r\n        }\r\n        if (ver === SPINE_VERSION.VER38) {\r\n            parser = new spine38.SkeletonJson(new spine38.AtlasAttachmentLoader(atlas));\r\n        }\r\n        if (ver === SPINE_VERSION.VER40) {\r\n            parser = new spine40.SkeletonJson(new spine40.AtlasAttachmentLoader(atlas));\r\n        }\r\n        if (!parser) {\r\n            let error = `Unsupported version of spine model ${version}, please update pixi-spine`;\r\n            console.error(error);\r\n        }\r\n\r\n        parser.scale = this.scale;\r\n        return parser.readSkeletonData(dataToParse);\r\n    }\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport class SpineParser extends AbstractSpineParser {\r\n    createBinaryParser(): ISkeletonParser {\r\n        return new UniBinaryParser();\r\n    }\r\n\r\n    createJsonParser(): ISkeletonParser {\r\n        return new UniJsonParser();\r\n    }\r\n\r\n    parseData(resource: ILoaderResource, parser: ISkeletonParser, atlas: TextureAtlas, dataToParse: any): void {\r\n        const parserCast = parser as (UniBinaryParser | UniJsonParser);\r\n        resource.spineData = parserCast.readSkeletonData(atlas, dataToParse);\r\n        resource.spineAtlas = atlas;\r\n    }\r\n\r\n    static use = new SpineParser().genMiddleware().use;\r\n\r\n    static registerLoaderPlugin() {\r\n        Loader.registerPlugin(SpineParser);\r\n    }\r\n}\r\n","import {IAnimationState, IAnimationStateData, ISkeleton, ISkeletonData, SpineBase} from \"@pixi-spine/base\";\r\nimport * as spine38 from \"@pixi-spine/runtime-3.8\";\r\nimport * as spine37 from \"@pixi-spine/runtime-3.7\";\r\nimport * as spine40 from \"@pixi-spine/runtime-4.0\";\r\nimport {detectSpineVersion, SPINE_VERSION} from \"./versions\";\r\n\r\n/**\r\n * @public\r\n */\r\nexport class Spine extends SpineBase<ISkeleton,\r\n    ISkeletonData,\r\n    IAnimationState,\r\n    IAnimationStateData> {\r\n\r\n    createSkeleton(spineData: ISkeletonData) {\r\n        const ver = detectSpineVersion(spineData.version);\r\n        let spine: any = null;\r\n\r\n        if (ver === SPINE_VERSION.VER37) {\r\n            spine = spine37;\r\n        }\r\n        if (ver === SPINE_VERSION.VER38) {\r\n            spine = spine38;\r\n        }\r\n        if (ver === SPINE_VERSION.VER40) {\r\n            spine = spine40;\r\n        }\r\n        if (!spine) {\r\n            let error = `Cant detect version of spine model ${spineData.version}`;\r\n            console.error(error);\r\n        }\r\n        this.skeleton = new spine.Skeleton(spineData);\r\n        this.skeleton.updateWorldTransform();\r\n        this.stateData = new spine.AnimationStateData(spineData);\r\n        this.state = new spine.AnimationState(this.stateData);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}