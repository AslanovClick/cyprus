{"version":3,"file":"runtime-4.0.js","sources":["../src/core/attachments/Attachment.ts","../src/core/attachments/AttachmentLoader.ts","../src/core/attachments/BoundingBoxAttachment.ts","../src/core/attachments/ClippingAttachment.ts","../src/core/attachments/MeshAttachment.ts","../src/core/attachments/PathAttachment.ts","../src/core/attachments/PointAttachment.ts","../src/core/attachments/RegionAttachment.ts","../src/core/vertexeffects/JitterEffect.ts","../src/core/vertexeffects/SwirlEffect.ts","../src/core/Animation.ts","../src/core/AnimationState.ts","../src/core/AnimationStateData.ts","../src/core/AtlasAttachmentLoader.ts","../src/core/BoneData.ts","../src/core/Bone.ts","../src/core/ConstraintData.ts","../src/core/Event.ts","../src/core/EventData.ts","../src/core/IkConstraint.ts","../src/core/IkConstraintData.ts","../src/core/PathConstraintData.ts","../src/core/PathConstraint.ts","../src/core/Slot.ts","../src/core/TransformConstraint.ts","../src/core/Skeleton.ts","../src/core/SkeletonData.ts","../src/core/SlotData.ts","../src/core/TransformConstraintData.ts","../src/core/Skin.ts","../src/core/SkeletonBinary.ts","../src/core/SkeletonBounds.ts","../src/core/SkeletonJson.ts","../src/core/Updatable.ts","../src/core/VertexEffect.ts","../src/Spine.ts"],"sourcesContent":["import {AttachmentType, Utils} from '@pixi-spine/base';\r\nimport type {IAttachment, ArrayLike} from '@pixi-spine/base';\r\n\r\nimport type {Slot} from '../Slot';\r\n\r\n/**\r\n * The base class for all attachments.\r\n * @public\r\n */\r\nexport abstract class Attachment implements IAttachment {\r\n    name: string;\r\n    type: AttachmentType;\r\n\r\n    constructor (name: string) {\r\n        if (!name) throw new Error(\"name cannot be null.\");\r\n        this.name = name;\r\n    }\r\n\r\n    abstract copy (): Attachment;\r\n}\r\n\r\n/**\r\n * Base class for an attachment with vertices that are transformed by one or more bones and can be deformed by a slot's\r\n * {@link Slot#deform}.\r\n * @public\r\n */\r\nexport abstract class VertexAttachment extends Attachment {\r\n    private static nextID = 0;\r\n\r\n    /** The unique ID for this attachment. */\r\n    id = VertexAttachment.nextID++;\r\n\r\n    /** The bones which affect the {@link #getVertices()}. The array entries are, for each vertex, the number of bones affecting\r\n     * the vertex followed by that many bone indices, which is the index of the bone in {@link Skeleton#bones}. Will be null\r\n     * if this attachment has no weights. */\r\n    bones: Array<number>;\r\n\r\n    /** The vertex positions in the bone's coordinate system. For a non-weighted attachment, the values are `x,y`\r\n     * entries for each vertex. For a weighted attachment, the values are `x,y,weight` entries for each bone affecting\r\n     * each vertex. */\r\n    vertices: ArrayLike<number>;\r\n\r\n    /** The maximum number of world vertex values that can be output by\r\n     * {@link #computeWorldVertices()} using the `count` parameter. */\r\n    worldVerticesLength = 0;\r\n\r\n    /** Deform keys for the deform attachment are also applied to this attachment. May be null if no deform keys should be applied. */\r\n    deformAttachment: VertexAttachment = this;\r\n\r\n    constructor (name: string) {\r\n        super(name);\r\n    }\r\n\r\n    computeWorldVerticesOld(slot: Slot, worldVertices: ArrayLike<number>) {\r\n        this.computeWorldVertices(slot, 0, this.worldVerticesLength, worldVertices, 0, 2);\r\n    }\r\n    /** Transforms the attachment's local {@link #vertices} to world coordinates. If the slot's {@link Slot#deform} is\r\n     * not empty, it is used to deform the vertices.\r\n     *\r\n     * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\r\n     * Runtimes Guide.\r\n     * @param start The index of the first {@link #vertices} value to transform. Each vertex has 2 values, x and y.\r\n     * @param count The number of world vertex values to output. Must be <= {@link #worldVerticesLength} - `start`.\r\n     * @param worldVertices The output world vertices. Must have a length >= `offset` + `count` *\r\n     *           `stride` / 2.\r\n     * @param offset The `worldVertices` index to begin writing values.\r\n     * @param stride The number of `worldVertices` entries between the value pairs written. */\r\n    computeWorldVertices (slot: Slot, start: number, count: number, worldVertices: ArrayLike<number>, offset: number, stride: number) {\r\n        count = offset + (count >> 1) * stride;\r\n        let skeleton = slot.bone.skeleton;\r\n        let deformArray = slot.deform;\r\n        let vertices = this.vertices;\r\n        let bones = this.bones;\r\n        if (!bones) {\r\n            if (deformArray.length > 0) vertices = deformArray;\r\n            let mat = slot.bone.matrix;\r\n            let x = mat.tx;\r\n            let y = mat.ty;\r\n            let a = mat.a, b = mat.c, c = mat.b, d = mat.d;\r\n            for (let v = start, w = offset; w < count; v += 2, w += stride) {\r\n                let vx = vertices[v], vy = vertices[v + 1];\r\n                worldVertices[w] = vx * a + vy * b + x;\r\n                worldVertices[w + 1] = vx * c + vy * d + y;\r\n            }\r\n            return;\r\n        }\r\n        let v = 0, skip = 0;\r\n        for (let i = 0; i < start; i += 2) {\r\n            let n = bones[v];\r\n            v += n + 1;\r\n            skip += n;\r\n        }\r\n        let skeletonBones = skeleton.bones;\r\n        if (deformArray.length == 0) {\r\n            for (let w = offset, b = skip * 3; w < count; w += stride) {\r\n                let wx = 0, wy = 0;\r\n                let n = bones[v++];\r\n                n += v;\r\n                for (; v < n; v++, b += 3) {\r\n                    let mat = skeletonBones[bones[v]].matrix;\r\n                    let vx = vertices[b], vy = vertices[b + 1], weight = vertices[b + 2];\r\n                    wx += (vx * mat.a + vy * mat.c + mat.tx) * weight;\r\n                    wy += (vx * mat.b + vy * mat.d + mat.ty) * weight;\r\n                }\r\n                worldVertices[w] = wx;\r\n                worldVertices[w + 1] = wy;\r\n            }\r\n        } else {\r\n            let deform = deformArray;\r\n            for (let w = offset, b = skip * 3, f = skip << 1; w < count; w += stride) {\r\n                let wx = 0, wy = 0;\r\n                let n = bones[v++];\r\n                n += v;\r\n                for (; v < n; v++, b += 3, f += 2) {\r\n                    let mat = skeletonBones[bones[v]].matrix;\r\n                    let vx = vertices[b] + deform[f], vy = vertices[b + 1] + deform[f + 1], weight = vertices[b + 2];\r\n                    wx += (vx * mat.a + vy * mat.c + mat.tx) * weight;\r\n                    wy += (vx * mat.b + vy * mat.d + mat.ty) * weight;\r\n                }\r\n                worldVertices[w] = wx;\r\n                worldVertices[w + 1] = wy;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Does not copy id (generated) or name (set on construction). **/\r\n    copyTo (attachment: VertexAttachment) {\r\n        if (this.bones) {\r\n            attachment.bones = new Array<number>(this.bones.length);\r\n            Utils.arrayCopy(this.bones, 0, attachment.bones, 0, this.bones.length);\r\n        } else\r\n            attachment.bones = null;\r\n\r\n        if (this.vertices) {\r\n            attachment.vertices = Utils.newFloatArray(this.vertices.length);\r\n            Utils.arrayCopy(this.vertices, 0, attachment.vertices, 0, this.vertices.length);\r\n        } else\r\n            attachment.vertices = null;\r\n\r\n        attachment.worldVerticesLength = this.worldVerticesLength;\r\n        attachment.deformAttachment = this.deformAttachment;\r\n    }\r\n}\r\n","import {Skin} from '../Skin';\r\nimport type {RegionAttachment} from './RegionAttachment';\r\nimport type {MeshAttachment} from './MeshAttachment';\r\nimport type {BoundingBoxAttachment} from './BoundingBoxAttachment';\r\nimport type {PathAttachment} from './PathAttachment';\r\nimport type {PointAttachment} from './PointAttachment';\r\nimport type {ClippingAttachment} from './ClippingAttachment';\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface AttachmentLoader {\r\n    /** @return May be null to not load an attachment. */\r\n    newRegionAttachment (skin: Skin, name: string, path: string): RegionAttachment;\r\n\r\n    /** @return May be null to not load an attachment. */\r\n    newMeshAttachment (skin: Skin, name: string, path: string): MeshAttachment;\r\n\r\n    /** @return May be null to not load an attachment. */\r\n    newBoundingBoxAttachment (skin: Skin, name: string): BoundingBoxAttachment;\r\n\r\n    /** @return May be null to not load an attachment */\r\n    newPathAttachment(skin: Skin, name: string): PathAttachment;\r\n\r\n    /** @return May be null to not load an attachment */\r\n    newPointAttachment(skin: Skin, name: string): PointAttachment;\r\n\r\n    /** @return May be null to not load an attachment */\r\n    newClippingAttachment(skin: Skin, name: string): ClippingAttachment;\r\n}\r\n","import {Attachment, VertexAttachment} from './Attachment';\r\nimport {AttachmentType, Color} from '@pixi-spine/base';\r\n\r\n/**\r\n * @public\r\n */\r\nexport class BoundingBoxAttachment extends VertexAttachment {\r\n    type = AttachmentType.BoundingBox;\r\n    color = new Color(1, 1, 1, 1);\r\n\r\n    constructor (name: string) {\r\n        super(name);\r\n    }\r\n\r\n    copy (): Attachment {\r\n        let copy = new BoundingBoxAttachment(this.name);\r\n        this.copyTo(copy);\r\n        copy.color.setFromColor(this.color);\r\n        return copy;\r\n    }\r\n}\r\n","import {Attachment, VertexAttachment} from './Attachment';\r\nimport {AttachmentType, Color, IClippingAttachment} from '@pixi-spine/base';\r\nimport type {SlotData} from '../SlotData';\r\n\r\n/**\r\n * @public\r\n */\r\nexport class ClippingAttachment extends VertexAttachment implements IClippingAttachment {\r\n    type = AttachmentType.Clipping;\r\n    endSlot: SlotData;\r\n\r\n    // Nonessential.\r\n    /** The color of the clipping polygon as it was in Spine. Available only when nonessential data was exported. Clipping polygons\r\n     * are not usually rendered at runtime. */\r\n    color = new Color(0.2275, 0.2275, 0.8078, 1); // ce3a3aff\r\n\r\n    constructor (name: string) {\r\n        super(name);\r\n    }\r\n\r\n    copy (): Attachment {\r\n        let copy = new ClippingAttachment(this.name);\r\n        this.copyTo(copy);\r\n        copy.endSlot = this.endSlot;\r\n        copy.color.setFromColor(this.color);\r\n        return copy;\r\n    }\r\n}\r\n","import {Attachment, VertexAttachment} from './Attachment';\r\nimport {AttachmentType, Color, IMeshAttachment, TextureRegion, Utils} from '@pixi-spine/base';\r\n\r\n/**\r\n * @public\r\n */\r\nexport class MeshAttachment extends VertexAttachment implements IMeshAttachment {\r\n    type = AttachmentType.Mesh;\r\n\r\n    region: TextureRegion;\r\n\r\n    /** The name of the texture region for this attachment. */\r\n    path: string;\r\n\r\n    /** The UV pair for each vertex, normalized within the texture region. */\r\n    regionUVs: Float32Array;\r\n\r\n    /** Triplets of vertex indices which describe the mesh's triangulation. */\r\n    triangles: Array<number>;\r\n\r\n    /** The color to tint the mesh. */\r\n    color = new Color(1, 1, 1, 1);\r\n\r\n    /** The width of the mesh's image. Available only when nonessential data was exported. */\r\n    width: number;\r\n\r\n    /** The height of the mesh's image. Available only when nonessential data was exported. */\r\n    height: number;\r\n\r\n    /** The number of entries at the beginning of {@link #vertices} that make up the mesh hull. */\r\n    hullLength: number;\r\n\r\n    /** Vertex index pairs describing edges for controling triangulation. Mesh triangles will never cross edges. Only available if\r\n     * nonessential data was exported. Triangulation is not performed at runtime. */\r\n    edges: Array<number>;\r\n\r\n    private parentMesh: MeshAttachment;\r\n    tempColor = new Color(0, 0, 0, 0);\r\n\r\n    constructor (name: string) {\r\n        super(name);\r\n    }\r\n\r\n    /** The parent mesh if this is a linked mesh, else null. A linked mesh shares the {@link #bones}, {@link #vertices},\r\n     * {@link #regionUVs}, {@link #triangles}, {@link #hullLength}, {@link #edges}, {@link #width}, and {@link #height} with the\r\n     * parent mesh, but may have a different {@link #name} or {@link #path} (and therefore a different texture). */\r\n    getParentMesh () {\r\n        return this.parentMesh;\r\n    }\r\n\r\n    /** @param parentMesh May be null. */\r\n    setParentMesh (parentMesh: MeshAttachment) {\r\n        this.parentMesh = parentMesh;\r\n        if (parentMesh) {\r\n            this.bones = parentMesh.bones;\r\n            this.vertices = parentMesh.vertices;\r\n            this.worldVerticesLength = parentMesh.worldVerticesLength;\r\n            this.regionUVs = parentMesh.regionUVs;\r\n            this.triangles = parentMesh.triangles;\r\n            this.hullLength = parentMesh.hullLength;\r\n            this.worldVerticesLength = parentMesh.worldVerticesLength\r\n        }\r\n    }\r\n\r\n    copy (): Attachment {\r\n        if (this.parentMesh) return this.newLinkedMesh();\r\n\r\n        let copy = new MeshAttachment(this.name);\r\n        copy.region = this.region;\r\n        copy.path = this.path;\r\n        copy.color.setFromColor(this.color);\r\n\r\n        this.copyTo(copy);\r\n        copy.regionUVs = new Float32Array(this.regionUVs.length);\r\n        Utils.arrayCopy(this.regionUVs, 0, copy.regionUVs, 0, this.regionUVs.length);\r\n        copy.triangles = new Array<number>(this.triangles.length);\r\n        Utils.arrayCopy(this.triangles, 0, copy.triangles, 0, this.triangles.length);\r\n        copy.hullLength = this.hullLength;\r\n\r\n        // Nonessential.\r\n        if (this.edges) {\r\n            copy.edges = new Array<number>(this.edges.length);\r\n            Utils.arrayCopy(this.edges, 0, copy.edges, 0, this.edges.length);\r\n        }\r\n        copy.width = this.width;\r\n        copy.height = this.height;\r\n\r\n        return copy;\r\n    }\r\n\r\n    /** Returns a new mesh with the {@link #parentMesh} set to this mesh's parent mesh, if any, else to this mesh. **/\r\n    newLinkedMesh (): MeshAttachment {\r\n        let copy = new MeshAttachment(this.name);\r\n        copy.region = this.region;\r\n        copy.path = this.path;\r\n        copy.color.setFromColor(this.color);\r\n        copy.deformAttachment = this.deformAttachment;\r\n        copy.setParentMesh(this.parentMesh ? this.parentMesh : this);\r\n        // copy.updateUVs();\r\n        return copy;\r\n    }\r\n}\r\n","import {Attachment, VertexAttachment} from \"./Attachment\";\r\nimport {AttachmentType, Color, Utils} from \"@pixi-spine/base\";\r\n\r\n/**\r\n * @public\r\n */\r\nexport class PathAttachment extends VertexAttachment {\r\n    type = AttachmentType.Path;\r\n\r\n    /** The lengths along the path in the setup pose from the start of the path to the end of each Bezier curve. */\r\n    lengths: Array<number>;\r\n\r\n    /** If true, the start and end knots are connected. */\r\n    closed = false;\r\n\r\n    /** If true, additional calculations are performed to make calculating positions along the path more accurate. If false, fewer\r\n     * calculations are performed but calculating positions along the path is less accurate. */\r\n    constantSpeed = false;\r\n\r\n    /** The color of the path as it was in Spine. Available only when nonessential data was exported. Paths are not usually\r\n     * rendered at runtime. */\r\n    color = new Color(1, 1, 1, 1);\r\n\r\n    constructor (name: string) {\r\n        super(name);\r\n    }\r\n\r\n    copy (): Attachment {\r\n        let copy = new PathAttachment(this.name);\r\n        this.copyTo(copy);\r\n        copy.lengths = new Array<number>(this.lengths.length);\r\n        Utils.arrayCopy(this.lengths, 0, copy.lengths, 0, this.lengths.length);\r\n        copy.closed = closed;\r\n        copy.constantSpeed = this.constantSpeed;\r\n        copy.color.setFromColor(this.color);\r\n        return copy;\r\n    }\r\n}\r\n","import {Attachment, VertexAttachment} from './Attachment';\r\nimport {AttachmentType, Color, MathUtils, Vector2} from \"@pixi-spine/base\";\r\nimport type {Bone} from '../Bone';\r\n\r\n/**\r\n * @public\r\n */\r\nexport class PointAttachment extends VertexAttachment {\r\n    type = AttachmentType.Point;\r\n\r\n    x: number; y: number; rotation: number;\r\n\r\n    /** The color of the point attachment as it was in Spine. Available only when nonessential data was exported. Point attachments\r\n     * are not usually rendered at runtime. */\r\n    color = new Color(0.38, 0.94, 0, 1);\r\n\r\n    constructor (name: string) {\r\n        super(name);\r\n    }\r\n\r\n    computeWorldPosition (bone: Bone, point: Vector2) {\r\n        const mat = bone.matrix;\r\n        point.x = this.x * mat.a + this.y * mat.c + bone.worldX;\r\n        point.y = this.x * mat.b + this.y * mat.d + bone.worldY;\r\n        return point;\r\n    }\r\n\r\n    computeWorldRotation (bone: Bone) {\r\n        const mat = bone.matrix;\r\n        let cos = MathUtils.cosDeg(this.rotation), sin = MathUtils.sinDeg(this.rotation);\r\n        let x = cos * mat.a + sin * mat.c;\r\n        let y = cos * mat.b + sin * mat.d;\r\n        return Math.atan2(y, x) * MathUtils.radDeg;\r\n    }\r\n\r\n    copy (): Attachment {\r\n        let copy = new PointAttachment(this.name);\r\n        copy.x = this.x;\r\n        copy.y = this.y;\r\n        copy.rotation = this.rotation;\r\n        copy.color.setFromColor(this.color);\r\n        return copy;\r\n    }\r\n}\r\n","import {Attachment} from './Attachment';\r\nimport {AttachmentType, ArrayLike, Color, TextureRegion, Utils, IRegionAttachment} from \"@pixi-spine/base\";\r\n\r\nimport type {Bone} from '../Bone';\r\n\r\n/**\r\n * @public\r\n */\r\nexport class RegionAttachment extends Attachment implements IRegionAttachment {\r\n    type = AttachmentType.Region;\r\n\r\n    static OX1 = 0;\r\n    static OY1 = 1;\r\n    static OX2 = 2;\r\n    static OY2 = 3;\r\n    static OX3 = 4;\r\n    static OY3 = 5;\r\n    static OX4 = 6;\r\n    static OY4 = 7;\r\n\r\n    static X1 = 0;\r\n    static Y1 = 1;\r\n    static C1R = 2;\r\n    static C1G = 3;\r\n    static C1B = 4;\r\n    static C1A = 5;\r\n    static U1 = 6;\r\n    static V1 = 7;\r\n\r\n    static X2 = 8;\r\n    static Y2 = 9;\r\n    static C2R = 10;\r\n    static C2G = 11;\r\n    static C2B = 12;\r\n    static C2A = 13;\r\n    static U2 = 14;\r\n    static V2 = 15;\r\n\r\n    static X3 = 16;\r\n    static Y3 = 17;\r\n    static C3R = 18;\r\n    static C3G = 19;\r\n    static C3B = 20;\r\n    static C3A = 21;\r\n    static U3 = 22;\r\n    static V3 = 23;\r\n\r\n    static X4 = 24;\r\n    static Y4 = 25;\r\n    static C4R = 26;\r\n    static C4G = 27;\r\n    static C4B = 28;\r\n    static C4A = 29;\r\n    static U4 = 30;\r\n    static V4 = 31;\r\n\r\n    /** The local x translation. */\r\n    x = 0;\r\n\r\n    /** The local y translation. */\r\n    y = 0;\r\n\r\n    /** The local scaleX. */\r\n    scaleX = 1;\r\n\r\n    /** The local scaleY. */\r\n    scaleY = 1;\r\n\r\n    /** The local rotation. */\r\n    rotation = 0;\r\n\r\n    /** The width of the region attachment in Spine. */\r\n    width = 0;\r\n\r\n    /** The height of the region attachment in Spine. */\r\n    height = 0;\r\n\r\n    /** The color to tint the region attachment. */\r\n    color = new Color(1, 1, 1, 1);\r\n\r\n    /** The name of the texture region for this attachment. */\r\n    path: string;\r\n\r\n    rendererObject: any;\r\n    region: TextureRegion;\r\n\r\n    /** For each of the 4 vertices, a pair of <code>x,y</code> values that is the local position of the vertex.\r\n     *\r\n     * See {@link #updateOffset()}. */\r\n    offset = Utils.newFloatArray(8);\r\n\r\n\r\n    uvs = Utils.newFloatArray(8);\r\n\r\n    tempColor = new Color(1, 1, 1, 1);\r\n\r\n    constructor (name:string) {\r\n        super(name);\r\n    }\r\n\r\n    /** Calculates the {@link #offset} using the region settings. Must be called after changing region settings. */\r\n    updateOffset () : void {\r\n        let regionScaleX = this.width / this.region.originalWidth * this.scaleX;\r\n        let regionScaleY = this.height / this.region.originalHeight * this.scaleY;\r\n        let localX = -this.width / 2 * this.scaleX + this.region.offsetX * regionScaleX;\r\n        let localY = -this.height / 2 * this.scaleY + this.region.offsetY * regionScaleY;\r\n        let localX2 = localX + this.region.width * regionScaleX;\r\n        let localY2 = localY + this.region.height * regionScaleY;\r\n        let radians = this.rotation * Math.PI / 180;\r\n        let cos = Math.cos(radians);\r\n        let sin = Math.sin(radians);\r\n        let localXCos = localX * cos + this.x;\r\n        let localXSin = localX * sin;\r\n        let localYCos = localY * cos + this.y;\r\n        let localYSin = localY * sin;\r\n        let localX2Cos = localX2 * cos + this.x;\r\n        let localX2Sin = localX2 * sin;\r\n        let localY2Cos = localY2 * cos + this.y;\r\n        let localY2Sin = localY2 * sin;\r\n        let offset = this.offset;\r\n        offset[RegionAttachment.OX1] = localXCos - localYSin;\r\n        offset[RegionAttachment.OY1] = localYCos + localXSin;\r\n        offset[RegionAttachment.OX2] = localXCos - localY2Sin;\r\n        offset[RegionAttachment.OY2] = localY2Cos + localXSin;\r\n        offset[RegionAttachment.OX3] = localX2Cos - localY2Sin;\r\n        offset[RegionAttachment.OY3] = localY2Cos + localX2Sin;\r\n        offset[RegionAttachment.OX4] = localX2Cos - localYSin;\r\n        offset[RegionAttachment.OY4] = localYCos + localX2Sin;\r\n    }\r\n\r\n    setRegion (region: TextureRegion) : void {\r\n        this.region = region;\r\n        let uvs = this.uvs;\r\n        if (region.degrees == 90) {\r\n            uvs[2] = region.u;\r\n            uvs[3] = region.v2;\r\n            uvs[4] = region.u;\r\n            uvs[5] = region.v;\r\n            uvs[6] = region.u2;\r\n            uvs[7] = region.v;\r\n            uvs[0] = region.u2;\r\n            uvs[1] = region.v2;\r\n        } else {\r\n            uvs[0] = region.u;\r\n            uvs[1] = region.v2;\r\n            uvs[2] = region.u;\r\n            uvs[3] = region.v;\r\n            uvs[4] = region.u2;\r\n            uvs[5] = region.v;\r\n            uvs[6] = region.u2;\r\n            uvs[7] = region.v2;\r\n        }\r\n    }\r\n\r\n    /** Transforms the attachment's four vertices to world coordinates.\r\n     *\r\n     * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\r\n     * Runtimes Guide.\r\n     * @param worldVertices The output world vertices. Must have a length >= `offset` + 8.\r\n     * @param offset The `worldVertices` index to begin writing values.\r\n     * @param stride The number of `worldVertices` entries between the value pairs written. */\r\n    computeWorldVertices (bone: Bone, worldVertices: ArrayLike<number>, offset: number, stride: number) {\r\n        let vertexOffset = this.offset;\r\n        let mat = bone.matrix;\r\n        let x = mat.tx, y = mat.ty;\r\n        let a = mat.a, b = mat.c, c = mat.b, d = mat.d;\r\n        let offsetX = 0, offsetY = 0;\r\n\r\n        offsetX = vertexOffset[RegionAttachment.OX1];\r\n        offsetY = vertexOffset[RegionAttachment.OY1];\r\n        worldVertices[offset] = offsetX * a + offsetY * b + x; // br\r\n        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\r\n        offset += stride;\r\n\r\n        offsetX = vertexOffset[RegionAttachment.OX2];\r\n        offsetY = vertexOffset[RegionAttachment.OY2];\r\n        worldVertices[offset] = offsetX * a + offsetY * b + x; // bl\r\n        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\r\n        offset += stride;\r\n\r\n        offsetX = vertexOffset[RegionAttachment.OX3];\r\n        offsetY = vertexOffset[RegionAttachment.OY3];\r\n        worldVertices[offset] = offsetX * a + offsetY * b + x; // ul\r\n        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\r\n        offset += stride;\r\n\r\n        offsetX = vertexOffset[RegionAttachment.OX4];\r\n        offsetY = vertexOffset[RegionAttachment.OY4];\r\n        worldVertices[offset] = offsetX * a + offsetY * b + x; // ur\r\n        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\r\n    }\r\n\r\n    copy (): Attachment {\r\n        let copy = new RegionAttachment(this.name);\r\n        copy.region = this.region;\r\n        copy.rendererObject = this.rendererObject;\r\n        copy.path = this.path;\r\n        copy.x = this.x;\r\n        copy.y = this.y;\r\n        copy.scaleX = this.scaleX;\r\n        copy.scaleY = this.scaleY;\r\n        copy.rotation = this.rotation;\r\n        copy.width = this.width;\r\n        copy.height = this.height;\r\n        Utils.arrayCopy(this.uvs, 0, copy.uvs, 0, 8);\r\n        Utils.arrayCopy(this.offset, 0, copy.offset, 0, 8);\r\n        copy.color.setFromColor(this.color);\r\n        return copy;\r\n    }\r\n}\r\n","import {VertexEffect} from \"../VertexEffect\";\r\nimport type {Skeleton} from \"../Skeleton\";\r\nimport {Color, MathUtils, Vector2} from \"@pixi-spine/base\";\r\n\r\n/**\r\n * @public\r\n */\r\nexport class JitterEffect implements VertexEffect {\r\n    jitterX = 0;\r\n    jitterY = 0;\r\n\r\n    constructor (jitterX: number, jitterY: number) {\r\n        this.jitterX = jitterX;\r\n        this.jitterY = jitterY;\r\n    }\r\n\r\n    //@ts-ignore\r\n    begin(skeleton: Skeleton): void {\r\n    }\r\n\r\n    //@ts-ignore\r\n    transform(position: Vector2, uv: Vector2, light: Color, dark: Color): void {\r\n        position.x += MathUtils.randomTriangular(-this.jitterX, this.jitterY);\r\n        position.y += MathUtils.randomTriangular(-this.jitterX, this.jitterY);\r\n    }\r\n\r\n    end(): void {\r\n    }\r\n}\r\n","import {VertexEffect} from \"../VertexEffect\";\r\nimport type {Skeleton} from \"../Skeleton\";\r\nimport {Color, MathUtils, PowOut, Vector2} from \"@pixi-spine/base\";\r\n\r\n/**\r\n * @public\r\n */\r\nexport class SwirlEffect implements VertexEffect {\r\n    static interpolation = new PowOut(2);\r\n    centerX = 0;\r\n    centerY = 0;\r\n    radius = 0;\r\n    angle = 0;\r\n    private worldX = 0;\r\n    private worldY = 0;\r\n\r\n    constructor (radius: number) {\r\n        this.radius = radius;\r\n    }\r\n\r\n    begin(skeleton: Skeleton): void {\r\n        this.worldX = skeleton.x + this.centerX;\r\n        this.worldY = skeleton.y + this.centerY;\r\n    }\r\n\r\n    //@ts-ignore\r\n    transform(position: Vector2, uv: Vector2, light: Color, dark: Color): void {\r\n        let radAngle = this.angle * MathUtils.degreesToRadians;\r\n        let x = position.x - this.worldX;\r\n        let y = position.y - this.worldY;\r\n        let dist = Math.sqrt(x * x + y * y);\r\n        if (dist < this.radius) {\r\n            let theta = SwirlEffect.interpolation.apply(0, radAngle, (this.radius - dist) / this.radius);\r\n            let cos = Math.cos(theta);\r\n            let sin = Math.sin(theta);\r\n            position.x = cos * x - sin * y + this.worldX;\r\n            position.y = sin * x + cos * y + this.worldY;\r\n        }\r\n    }\r\n\r\n    end(): void {\r\n    }\r\n}\r\n","import {Event} from './Event';\r\nimport type {Skeleton} from \"./Skeleton\";\r\nimport {Attachment, VertexAttachment} from \"./attachments\";\r\nimport {ArrayLike, MathUtils, StringSet, Utils} from '@pixi-spine/base';\r\nimport {Slot} from \"./Slot\";\r\nimport {IkConstraint} from \"./IkConstraint\";\r\nimport {TransformConstraint} from \"./TransformConstraint\";\r\nimport {PathConstraint} from \"./PathConstraint\";\r\n/**\r\n * A simple container for a list of timelines and a name.\r\n * @public\r\n * */\r\nexport class Animation {\r\n    /** The animation's name, which is unique across all animations in the skeleton. */\r\n    name: string;\r\n    timelines: Array<Timeline>;\r\n    timelineIds: StringSet;\r\n\r\n    /** The duration of the animation in seconds, which is the highest time of all keys in the timeline. */\r\n    duration: number;\r\n\r\n    constructor (name: string, timelines: Array<Timeline>, duration: number) {\r\n        if (!name) throw new Error(\"name cannot be null.\");\r\n        this.name = name;\r\n        this.setTimelines(timelines);\r\n        this.duration = duration;\r\n    }\r\n\r\n    setTimelines(timelines: Array<Timeline>) {\r\n        if (!timelines) throw new Error(\"timelines cannot be null.\");\r\n        this.timelines = timelines;\r\n        this.timelineIds = new StringSet();\r\n        for (var i = 0; i < timelines.length; i++)\r\n            this.timelineIds.addAll(timelines[i].getPropertyIds());\r\n    }\r\n\r\n    hasTimeline(ids: string[]) : boolean {\r\n        for (let i = 0; i < ids.length; i++)\r\n            if (this.timelineIds.contains(ids[i])) return true;\r\n        return false;\r\n    }\r\n\r\n    /** Applies all the animation's timelines to the specified skeleton.\r\n     *\r\n     * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}.\r\n     * @param loop If true, the animation repeats after {@link #getDuration()}.\r\n     * @param events May be null to ignore fired events. */\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, loop: boolean, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        if (!skeleton) throw new Error(\"skeleton cannot be null.\");\r\n\r\n        if (loop && this.duration != 0) {\r\n            time %= this.duration;\r\n            if (lastTime > 0) lastTime %= this.duration;\r\n        }\r\n\r\n        let timelines = this.timelines;\r\n        for (let i = 0, n = timelines.length; i < n; i++)\r\n            timelines[i].apply(skeleton, lastTime, time, events, alpha, blend, direction);\r\n    }\r\n}\r\n\r\n/** Controls how a timeline value is mixed with the setup pose value or current pose value when a timeline's `alpha`\r\n * < 1.\r\n *\r\n * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}.\r\n * @public\r\n * */\r\nexport enum MixBlend {\r\n    /** Transitions from the setup value to the timeline value (the current value is not used). Before the first key, the setup\r\n     * value is set. */\r\n    setup,\r\n    /** Transitions from the current value to the timeline value. Before the first key, transitions from the current value to\r\n     * the setup value. Timelines which perform instant transitions, such as {@link DrawOrderTimeline} or\r\n     * {@link AttachmentTimeline}, use the setup value before the first key.\r\n     *\r\n     * `first` is intended for the first animations applied, not for animations layered on top of those. */\r\n    first,\r\n    /** Transitions from the current value to the timeline value. No change is made before the first key (the current value is\r\n     * kept until the first key).\r\n     *\r\n     * `replace` is intended for animations layered on top of others, not for the first animations applied. */\r\n    replace,\r\n    /** Transitions from the current value to the current value plus the timeline value. No change is made before the first key\r\n     * (the current value is kept until the first key).\r\n     *\r\n     * `add` is intended for animations layered on top of others, not for the first animations applied. Properties\r\n     * keyed by additive animations must be set manually or by another animation before applying the additive animations, else\r\n     * the property values will increase continually. */\r\n    add\r\n}\r\n\r\n/** Indicates whether a timeline's `alpha` is mixing out over time toward 0 (the setup or current pose value) or\r\n * mixing in toward 1 (the timeline's value).\r\n *\r\n * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}.\r\n * @public\r\n * */\r\nexport enum MixDirection {\r\n    mixIn, mixOut\r\n}\r\n\r\nconst Property = {\r\n    rotate: 0,\r\n    x: 1,\r\n    y: 2,\r\n    scaleX: 3,\r\n    scaleY: 4,\r\n    shearX: 5,\r\n    shearY: 6,\r\n\r\n    rgb: 7,\r\n    alpha: 8,\r\n    rgb2: 9,\r\n\r\n    attachment: 10,\r\n    deform: 11,\r\n\r\n    event: 12,\r\n    drawOrder: 13,\r\n\r\n    ikConstraint: 14,\r\n    transformConstraint: 15,\r\n\r\n    pathConstraintPosition: 16,\r\n    pathConstraintSpacing: 17,\r\n    pathConstraintMix: 18\r\n}\r\n\r\n/** The interface for all timelines.\r\n * @public\r\n * */\r\nexport abstract class Timeline {\r\n    propertyIds: string[];\r\n    frames: ArrayLike<number>;\r\n\r\n    constructor(frameCount: number, propertyIds: string[]) {\r\n        this.propertyIds = propertyIds;\r\n        this.frames = Utils.newFloatArray(frameCount * this.getFrameEntries());\r\n    }\r\n\r\n    getPropertyIds () {\r\n        return this.propertyIds;\r\n    }\r\n\r\n    getFrameEntries (): number {\r\n        return 1;\r\n    }\r\n\r\n    getFrameCount () {\r\n        return this.frames.length / this.getFrameEntries();\r\n    }\r\n\r\n    getDuration (): number {\r\n        return this.frames[this.frames.length - this.getFrameEntries()];\r\n    }\r\n\r\n    abstract apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection): void;\r\n\r\n    static search1 (frames: ArrayLike<number>, time: number) {\r\n        let n = frames.length;\r\n        for (let i = 1; i < n; i++)\r\n            if (frames[i] > time) return i - 1;\r\n        return n - 1;\r\n    }\r\n\r\n    static search (frames: ArrayLike<number>, time: number, step: number) {\r\n        let n = frames.length;\r\n        for (let i = step; i < n; i += step)\r\n            if (frames[i] > time) return i - step;\r\n        return n - step;\r\n    }\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface BoneTimeline {\r\n    /** The index of the bone in {@link Skeleton#bones} that will be changed. */\r\n    boneIndex: number;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface SlotTimeline {\r\n    /** The index of the slot in {@link Skeleton#slots} that will be changed. */\r\n    slotIndex: number;\r\n}\r\n\r\n/** The base class for timelines that use interpolation between key frame values.\r\n * @public\r\n * */\r\nexport abstract class CurveTimeline extends Timeline {\r\n    protected curves: ArrayLike<number>; // type, x, y, ...\r\n\r\n    constructor (frameCount: number, bezierCount: number, propertyIds: string[]) {\r\n        super(frameCount, propertyIds);\r\n        this.curves = Utils.newFloatArray(frameCount + bezierCount * 18/*BEZIER_SIZE*/);\r\n        this.curves[frameCount - 1] = 1/*STEPPED*/;\r\n    }\r\n\r\n    /** Sets the specified key frame to linear interpolation. */\r\n    setLinear (frame: number) {\r\n        this.curves[frame] = 0/*LINEAR*/;\r\n    }\r\n\r\n    /** Sets the specified key frame to stepped interpolation. */\r\n    setStepped (frame: number) {\r\n        this.curves[frame] = 1/*STEPPED*/;\r\n    }\r\n\r\n    /** Shrinks the storage for Bezier curves, for use when <code>bezierCount</code> (specified in the constructor) was larger\r\n     * than the actual number of Bezier curves. */\r\n    shrink (bezierCount: number) {\r\n        let size = this.getFrameCount() + bezierCount * 18/*BEZIER_SIZE*/;\r\n        if (this.curves.length > size) {\r\n            let newCurves = Utils.newFloatArray(size);\r\n            Utils.arrayCopy(this.curves, 0, newCurves, 0, size);\r\n            this.curves = newCurves;\r\n        }\r\n    }\r\n\r\n    /** Stores the segments for the specified Bezier curve. For timelines that modify multiple values, there may be more than\r\n     * one curve per frame.\r\n     * @param bezier The ordinal of this Bezier curve for this timeline, between 0 and <code>bezierCount - 1</code> (specified\r\n     *           in the constructor), inclusive.\r\n     * @param frame Between 0 and <code>frameCount - 1</code>, inclusive.\r\n     * @param value The index of the value for this frame that this curve is used for.\r\n     * @param time1 The time for the first key.\r\n     * @param value1 The value for the first key.\r\n     * @param cx1 The time for the first Bezier handle.\r\n     * @param cy1 The value for the first Bezier handle.\r\n     * @param cx2 The time of the second Bezier handle.\r\n     * @param cy2 The value for the second Bezier handle.\r\n     * @param time2 The time for the second key.\r\n     * @param value2 The value for the second key. */\r\n    setBezier (bezier: number, frame: number, value: number, time1: number, value1: number, cx1: number, cy1: number, cx2: number,\r\n               cy2: number, time2: number, value2: number) {\r\n        let curves = this.curves;\r\n        let i = this.getFrameCount() + bezier * 18/*BEZIER_SIZE*/;\r\n        if (value == 0) curves[frame] = 2/*BEZIER*/ + i;\r\n        let tmpx = (time1 - cx1 * 2 + cx2) * 0.03, tmpy = (value1 - cy1 * 2 + cy2) * 0.03;\r\n        let dddx = ((cx1 - cx2) * 3 - time1 + time2) * 0.006, dddy = ((cy1 - cy2) * 3 - value1 + value2) * 0.006;\r\n        let ddx = tmpx * 2 + dddx, ddy = tmpy * 2 + dddy;\r\n        let dx = (cx1 - time1) * 0.3 + tmpx + dddx * 0.16666667, dy = (cy1 - value1) * 0.3 + tmpy + dddy * 0.16666667;\r\n        let x = time1 + dx, y = value1 + dy;\r\n        for (let n = i + 18/*BEZIER_SIZE*/; i < n; i += 2) {\r\n            curves[i] = x;\r\n            curves[i + 1] = y;\r\n            dx += ddx;\r\n            dy += ddy;\r\n            ddx += dddx;\r\n            ddy += dddy;\r\n            x += dx;\r\n            y += dy;\r\n        }\r\n    }\r\n\r\n    /** Returns the Bezier interpolated value for the specified time.\r\n     * @param frameIndex The index into {@link #getFrames()} for the values of the frame before <code>time</code>.\r\n     * @param valueOffset The offset from <code>frameIndex</code> to the value this curve is used for.\r\n     * @param i The index of the Bezier segments. See {@link #getCurveType(int)}. */\r\n    getBezierValue (time: number, frameIndex: number, valueOffset: number, i: number) {\r\n        let curves = this.curves;\r\n        if (curves[i] > time) {\r\n            let x = this.frames[frameIndex], y = this.frames[frameIndex + valueOffset];\r\n            return y + (time - x) / (curves[i] - x) * (curves[i + 1] - y);\r\n        }\r\n        let n = i + 18/*BEZIER_SIZE*/;\r\n        for (i += 2; i < n; i += 2) {\r\n            if (curves[i] >= time) {\r\n                let x = curves[i - 2], y = curves[i - 1];\r\n                return y + (time - x) / (curves[i] - x) * (curves[i + 1] - y);\r\n            }\r\n        }\r\n        frameIndex += this.getFrameEntries();\r\n        let x = curves[n - 2], y = curves[n - 1];\r\n        return y + (time - x) / (this.frames[frameIndex] - x) * (this.frames[frameIndex + valueOffset] - y);\r\n    }\r\n}\r\n/**\r\n * @public\r\n */\r\nexport abstract class CurveTimeline1 extends CurveTimeline {\r\n    constructor(frameCount: number, bezierCount: number, propertyId: string) {\r\n        super(frameCount, bezierCount, [ propertyId ]);\r\n    }\r\n\r\n    getFrameEntries () {\r\n        return 2/*ENTRIES*/;\r\n    }\r\n\r\n    /** Sets the time and value for the specified frame.\r\n     * @param frame Between 0 and <code>frameCount</code>, inclusive.\r\n     * @param time The frame time in seconds. */\r\n    setFrame (frame: number, time: number, value: number) {\r\n        frame <<= 1;\r\n        this.frames[frame] = time;\r\n        this.frames[frame + 1/*VALUE*/] = value;\r\n    }\r\n\r\n    /** Returns the interpolated value for the specified time. */\r\n    getCurveValue (time: number) {\r\n        let frames = this.frames;\r\n        let i = frames.length - 2;\r\n        for (let ii = 2; ii <= i; ii += 2) {\r\n            if (frames[ii] > time) {\r\n                i = ii - 2;\r\n                break;\r\n            }\r\n        }\r\n\r\n        let curveType = this.curves[i >> 1];\r\n        switch (curveType) {\r\n            case 0/*LINEAR*/:\r\n                let before = frames[i], value = frames[i + 1/*VALUE*/];\r\n                return value + (time - before) / (frames[i + 2/*ENTRIES*/] - before) * (frames[i + 2/*ENTRIES*/ + 1/*VALUE*/] - value);\r\n            case 1/*STEPPED*/:\r\n                return frames[i + 1/*VALUE*/];\r\n        }\r\n        return this.getBezierValue(time, i, 1/*VALUE*/, curveType - 2/*BEZIER*/);\r\n    }\r\n}\r\n\r\n/** The base class for a {@link CurveTimeline} which sets two properties.\r\n * @public\r\n * */\r\nexport abstract class CurveTimeline2 extends CurveTimeline {\r\n    /** @param bezierCount The maximum number of Bezier curves. See {@link #shrink(int)}.\r\n     * @param propertyIds Unique identifiers for the properties the timeline modifies. */\r\n    constructor (frameCount: number, bezierCount: number, propertyId1: string, propertyId2: string) {\r\n        super(frameCount, bezierCount, [ propertyId1, propertyId2 ]);\r\n    }\r\n\r\n    getFrameEntries () {\r\n        return 3/*ENTRIES*/;\r\n    }\r\n\r\n    /** Sets the time and values for the specified frame.\r\n     * @param frame Between 0 and <code>frameCount</code>, inclusive.\r\n     * @param time The frame time in seconds. */\r\n    setFrame (frame: number, time: number, value1: number, value2: number) {\r\n        frame *= 3/*ENTRIES*/;\r\n        this.frames[frame] = time;\r\n        this.frames[frame + 1/*VALUE1*/] = value1;\r\n        this.frames[frame + 2/*VALUE2*/] = value2;\r\n    }\r\n}\r\n\r\n/** Changes a bone's local {@link Bone#rotation}.\r\n * @public\r\n * */\r\nexport class RotateTimeline extends CurveTimeline1 implements BoneTimeline {\r\n    boneIndex = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, boneIndex: number) {\r\n        super(frameCount, bezierCount, Property.rotate + \"|\" + boneIndex);\r\n        this.boneIndex = boneIndex;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let bone = skeleton.bones[this.boneIndex];\r\n        if (!bone.active) return;\r\n\r\n        let frames = this.frames;\r\n        if (time < frames[0]) {\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    bone.rotation = bone.data.rotation;\r\n                    return;\r\n                case MixBlend.first:\r\n                    bone.rotation += (bone.data.rotation - bone.rotation) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let r = this.getCurveValue(time);\r\n        switch (blend) {\r\n            case MixBlend.setup:\r\n                bone.rotation = bone.data.rotation + r * alpha;\r\n                break;\r\n            case MixBlend.first:\r\n            case MixBlend.replace:\r\n                r += bone.data.rotation - bone.rotation;\r\n            case MixBlend.add:\r\n                bone.rotation += r * alpha;\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes a bone's local {@link Bone#x} and {@link Bone#y}.\r\n * @public\r\n * */\r\nexport class TranslateTimeline extends CurveTimeline2 implements BoneTimeline {\r\n    boneIndex = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, boneIndex: number) {\r\n        super(frameCount, bezierCount,\r\n            Property.x + \"|\" + boneIndex,\r\n            Property.y + \"|\" + boneIndex,\r\n        );\r\n        this.boneIndex = boneIndex;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let bone = skeleton.bones[this.boneIndex];\r\n        if (!bone.active) return;\r\n\r\n        let frames = this.frames;\r\n        if (time < frames[0]) {\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    bone.x = bone.data.x;\r\n                    bone.y = bone.data.y;\r\n                    return;\r\n                case MixBlend.first:\r\n                    bone.x += (bone.data.x - bone.x) * alpha;\r\n                    bone.y += (bone.data.y - bone.y) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let x = 0, y = 0;\r\n        let i = Timeline.search(frames, time, 3/*ENTRIES*/);\r\n        let curveType = this.curves[i / 3/*ENTRIES*/];\r\n        switch (curveType) {\r\n            case 0/*LINEAR*/:\r\n                let before = frames[i];\r\n                x = frames[i + 1/*VALUE1*/];\r\n                y = frames[i + 2/*VALUE2*/];\r\n                let t = (time - before) / (frames[i + 3/*ENTRIES*/] - before);\r\n                x += (frames[i + 3/*ENTRIES*/ + 1/*VALUE1*/] - x) * t;\r\n                y += (frames[i + 3/*ENTRIES*/ + 2/*VALUE2*/] - y) * t;\r\n                break;\r\n            case 1/*STEPPED*/:\r\n                x = frames[i + 1/*VALUE1*/];\r\n                y = frames[i + 2/*VALUE2*/];\r\n                break;\r\n            default:\r\n                x = this.getBezierValue(time, i, 1/*VALUE1*/, curveType - 2/*BEZIER*/);\r\n                y = this.getBezierValue(time, i, 2/*VALUE2*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\r\n        }\r\n\r\n        switch (blend) {\r\n            case MixBlend.setup:\r\n                bone.x = bone.data.x + x * alpha;\r\n                bone.y = bone.data.y + y * alpha;\r\n                break;\r\n            case MixBlend.first:\r\n            case MixBlend.replace:\r\n                bone.x += (bone.data.x + x - bone.x) * alpha;\r\n                bone.y += (bone.data.y + y - bone.y) * alpha;\r\n                break;\r\n            case MixBlend.add:\r\n                bone.x += x * alpha;\r\n                bone.y += y * alpha;\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes a bone's local {@link Bone#x}.\r\n * @public\r\n * */\r\nexport class TranslateXTimeline extends CurveTimeline1 implements BoneTimeline {\r\n    boneIndex = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, boneIndex: number) {\r\n        super(frameCount, bezierCount, Property.x + \"|\" + boneIndex);\r\n        this.boneIndex = boneIndex;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let bone = skeleton.bones[this.boneIndex];\r\n        if (!bone.active) return;\r\n\r\n        let frames = this.frames;\r\n        if (time < frames[0]) {\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    bone.x = bone.data.x;\r\n                    return;\r\n                case MixBlend.first:\r\n                    bone.x += (bone.data.x - bone.x) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let x = this.getCurveValue(time);\r\n        switch (blend) {\r\n            case MixBlend.setup:\r\n                bone.x = bone.data.x + x * alpha;\r\n                break;\r\n            case MixBlend.first:\r\n            case MixBlend.replace:\r\n                bone.x += (bone.data.x + x - bone.x) * alpha;\r\n                break;\r\n            case MixBlend.add:\r\n                bone.x += x * alpha;\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes a bone's local {@link Bone#x}.\r\n * @public\r\n * */\r\nexport class TranslateYTimeline extends CurveTimeline1 implements BoneTimeline {\r\n    boneIndex = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, boneIndex: number) {\r\n        super(frameCount, bezierCount, Property.y + \"|\" + boneIndex);\r\n        this.boneIndex = boneIndex;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let bone = skeleton.bones[this.boneIndex];\r\n        if (!bone.active) return;\r\n\r\n        let frames = this.frames;\r\n        if (time < frames[0]) {\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    bone.y = bone.data.y;\r\n                    return;\r\n                case MixBlend.first:\r\n                    bone.y += (bone.data.y - bone.y) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let y = this.getCurveValue(time);\r\n        switch (blend) {\r\n            case MixBlend.setup:\r\n                bone.y = bone.data.y + y * alpha;\r\n                break;\r\n            case MixBlend.first:\r\n            case MixBlend.replace:\r\n                bone.y += (bone.data.y + y - bone.y) * alpha;\r\n                break;\r\n            case MixBlend.add:\r\n                bone.y += y * alpha;\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes a bone's local {@link Bone#scaleX)} and {@link Bone#scaleY}.\r\n * @public\r\n * */\r\nexport class ScaleTimeline extends CurveTimeline2 implements BoneTimeline {\r\n    boneIndex = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, boneIndex: number) {\r\n        super(frameCount, bezierCount,\r\n            Property.scaleX + \"|\" + boneIndex,\r\n            Property.scaleY + \"|\" + boneIndex\r\n        );\r\n        this.boneIndex = boneIndex;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let bone = skeleton.bones[this.boneIndex];\r\n        if (!bone.active) return;\r\n\r\n        let frames = this.frames;\r\n        if (time < frames[0]) {\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    bone.scaleX = bone.data.scaleX;\r\n                    bone.scaleY = bone.data.scaleY;\r\n                    return;\r\n                case MixBlend.first:\r\n                    bone.scaleX += (bone.data.scaleX - bone.scaleX) * alpha;\r\n                    bone.scaleY += (bone.data.scaleY - bone.scaleY) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let x, y;\r\n        let i = Timeline.search(frames, time, 3/*ENTRIES*/);\r\n        let curveType = this.curves[i / 3/*ENTRIES*/];\r\n        switch (curveType) {\r\n            case 0/*LINEAR*/:\r\n                let before = frames[i];\r\n                x = frames[i + 1/*VALUE1*/];\r\n                y = frames[i + 2/*VALUE2*/];\r\n                let t = (time - before) / (frames[i + 3/*ENTRIES*/] - before);\r\n                x += (frames[i + 3/*ENTRIES*/ + 1/*VALUE1*/] - x) * t;\r\n                y += (frames[i + 3/*ENTRIES*/ + 2/*VALUE2*/] - y) * t;\r\n                break;\r\n            case 1/*STEPPED*/:\r\n                x = frames[i + 1/*VALUE1*/];\r\n                y = frames[i + 2/*VALUE2*/];\r\n                break;\r\n            default:\r\n                x = this.getBezierValue(time, i, 1/*VALUE1*/, curveType - 2/*BEZIER*/);\r\n                y = this.getBezierValue(time, i, 2/*VALUE2*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\r\n        }\r\n        x *= bone.data.scaleX;\r\n        y *= bone.data.scaleY;\r\n\r\n        if (alpha == 1) {\r\n            if (blend == MixBlend.add) {\r\n                bone.scaleX += x - bone.data.scaleX;\r\n                bone.scaleY += y - bone.data.scaleY;\r\n            } else {\r\n                bone.scaleX = x;\r\n                bone.scaleY = y;\r\n            }\r\n        } else {\r\n            let bx = 0, by = 0;\r\n            if (direction == MixDirection.mixOut) {\r\n                switch (blend) {\r\n                    case MixBlend.setup:\r\n                        bx = bone.data.scaleX;\r\n                        by = bone.data.scaleY;\r\n                        bone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;\r\n                        bone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;\r\n                        break;\r\n                    case MixBlend.first:\r\n                    case MixBlend.replace:\r\n                        bx = bone.scaleX;\r\n                        by = bone.scaleY;\r\n                        bone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;\r\n                        bone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;\r\n                        break;\r\n                    case MixBlend.add:\r\n                        bx = bone.scaleX;\r\n                        by = bone.scaleY;\r\n                        bone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bone.data.scaleX) * alpha;\r\n                        bone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - bone.data.scaleY) * alpha;\r\n                }\r\n            } else {\r\n                switch (blend) {\r\n                    case MixBlend.setup:\r\n                        bx = Math.abs(bone.data.scaleX) * MathUtils.signum(x);\r\n                        by = Math.abs(bone.data.scaleY) * MathUtils.signum(y);\r\n                        bone.scaleX = bx + (x - bx) * alpha;\r\n                        bone.scaleY = by + (y - by) * alpha;\r\n                        break;\r\n                    case MixBlend.first:\r\n                    case MixBlend.replace:\r\n                        bx = Math.abs(bone.scaleX) * MathUtils.signum(x);\r\n                        by = Math.abs(bone.scaleY) * MathUtils.signum(y);\r\n                        bone.scaleX = bx + (x - bx) * alpha;\r\n                        bone.scaleY = by + (y - by) * alpha;\r\n                        break;\r\n                    case MixBlend.add:\r\n                        bx = MathUtils.signum(x);\r\n                        by = MathUtils.signum(y);\r\n                        bone.scaleX = Math.abs(bone.scaleX) * bx + (x - Math.abs(bone.data.scaleX) * bx) * alpha;\r\n                        bone.scaleY = Math.abs(bone.scaleY) * by + (y - Math.abs(bone.data.scaleY) * by) * alpha;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes a bone's local {@link Bone#scaleX)} and {@link Bone#scaleY}.\r\n * @public\r\n * */\r\nexport class ScaleXTimeline extends CurveTimeline1 implements BoneTimeline {\r\n    boneIndex = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, boneIndex: number) {\r\n        super(frameCount, bezierCount, Property.scaleX + \"|\" + boneIndex);\r\n        this.boneIndex = boneIndex;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let bone = skeleton.bones[this.boneIndex];\r\n        if (!bone.active) return;\r\n\r\n        let frames = this.frames;\r\n        if (time < frames[0]) {\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    bone.scaleX = bone.data.scaleX;\r\n                    return;\r\n                case MixBlend.first:\r\n                    bone.scaleX += (bone.data.scaleX - bone.scaleX) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let x = this.getCurveValue(time) * bone.data.scaleX;\r\n        if (alpha == 1) {\r\n            if (blend == MixBlend.add)\r\n                bone.scaleX += x - bone.data.scaleX;\r\n            else\r\n                bone.scaleX = x;\r\n        } else {\r\n            // Mixing out uses sign of setup or current pose, else use sign of key.\r\n            let bx = 0;\r\n            if (direction == MixDirection.mixOut) {\r\n                switch (blend) {\r\n                    case MixBlend.setup:\r\n                        bx = bone.data.scaleX;\r\n                        bone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;\r\n                        break;\r\n                    case MixBlend.first:\r\n                    case MixBlend.replace:\r\n                        bx = bone.scaleX;\r\n                        bone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;\r\n                        break;\r\n                    case MixBlend.add:\r\n                        bx = bone.scaleX;\r\n                        bone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bone.data.scaleX) * alpha;\r\n                }\r\n            } else {\r\n                switch (blend) {\r\n                    case MixBlend.setup:\r\n                        bx = Math.abs(bone.data.scaleX) * MathUtils.signum(x);\r\n                        bone.scaleX = bx + (x - bx) * alpha;\r\n                        break;\r\n                    case MixBlend.first:\r\n                    case MixBlend.replace:\r\n                        bx = Math.abs(bone.scaleX) * MathUtils.signum(x);\r\n                        bone.scaleX = bx + (x - bx) * alpha;\r\n                        break;\r\n                    case MixBlend.add:\r\n                        bx = MathUtils.signum(x);\r\n                        bone.scaleX = Math.abs(bone.scaleX) * bx + (x - Math.abs(bone.data.scaleX) * bx) * alpha;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes a bone's local {@link Bone#scaleX)} and {@link Bone#scaleY}.\r\n * @public\r\n * */\r\nexport class ScaleYTimeline extends CurveTimeline1 implements BoneTimeline {\r\n    boneIndex = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, boneIndex: number) {\r\n        super(frameCount, bezierCount, Property.scaleY + \"|\" + boneIndex);\r\n        this.boneIndex = boneIndex;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let bone = skeleton.bones[this.boneIndex];\r\n        if (!bone.active) return;\r\n\r\n        let frames = this.frames;\r\n        if (time < frames[0]) {\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    bone.scaleY = bone.data.scaleY;\r\n                    return;\r\n                case MixBlend.first:\r\n                    bone.scaleY += (bone.data.scaleY - bone.scaleY) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let y = this.getCurveValue(time) * bone.data.scaleY;\r\n        if (alpha == 1) {\r\n            if (blend == MixBlend.add)\r\n                bone.scaleY += y - bone.data.scaleY;\r\n            else\r\n                bone.scaleY = y;\r\n        } else {\r\n            // Mixing out uses sign of setup or current pose, else use sign of key.\r\n            let by = 0;\r\n            if (direction == MixDirection.mixOut) {\r\n                switch (blend) {\r\n                    case MixBlend.setup:\r\n                        by = bone.data.scaleY;\r\n                        bone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;\r\n                        break;\r\n                    case MixBlend.first:\r\n                    case MixBlend.replace:\r\n                        by = bone.scaleY;\r\n                        bone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;\r\n                        break;\r\n                    case MixBlend.add:\r\n                        by = bone.scaleY;\r\n                        bone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - bone.data.scaleY) * alpha;\r\n                }\r\n            } else {\r\n                switch (blend) {\r\n                    case MixBlend.setup:\r\n                        by = Math.abs(bone.data.scaleY) * MathUtils.signum(y);\r\n                        bone.scaleY = by + (y - by) * alpha;\r\n                        break;\r\n                    case MixBlend.first:\r\n                    case MixBlend.replace:\r\n                        by = Math.abs(bone.scaleY) * MathUtils.signum(y);\r\n                        bone.scaleY = by + (y - by) * alpha;\r\n                        break;\r\n                    case MixBlend.add:\r\n                        by = MathUtils.signum(y);\r\n                        bone.scaleY = Math.abs(bone.scaleY) * by + (y - Math.abs(bone.data.scaleY) * by) * alpha;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}.\r\n * @public\r\n * */\r\nexport class ShearTimeline extends CurveTimeline2 implements BoneTimeline {\r\n    boneIndex = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, boneIndex: number) {\r\n        super(frameCount, bezierCount,\r\n            Property.shearX + \"|\" + boneIndex,\r\n            Property.shearY + \"|\" + boneIndex\r\n        );\r\n        this.boneIndex = boneIndex;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let bone = skeleton.bones[this.boneIndex];\r\n        if (!bone.active) return;\r\n\r\n        let frames = this.frames;\r\n        if (time < frames[0]) {\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    bone.shearX = bone.data.shearX;\r\n                    bone.shearY = bone.data.shearY;\r\n                    return;\r\n                case MixBlend.first:\r\n                    bone.shearX += (bone.data.shearX - bone.shearX) * alpha;\r\n                    bone.shearY += (bone.data.shearY - bone.shearY) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let x = 0, y = 0;\r\n        let i = Timeline.search(frames, time, 3/*ENTRIES*/);\r\n        let curveType = this.curves[i / 3/*ENTRIES*/];\r\n        switch (curveType) {\r\n            case 0/*LINEAR*/:\r\n                let before = frames[i];\r\n                x = frames[i + 1/*VALUE1*/];\r\n                y = frames[i + 2/*VALUE2*/];\r\n                let t = (time - before) / (frames[i + 3/*ENTRIES*/] - before);\r\n                x += (frames[i + 3/*ENTRIES*/ + 1/*VALUE1*/] - x) * t;\r\n                y += (frames[i + 3/*ENTRIES*/ + 2/*VALUE2*/] - y) * t;\r\n                break;\r\n            case 1/*STEPPED*/:\r\n                x = frames[i + 1/*VALUE1*/];\r\n                y = frames[i + 2/*VALUE2*/];\r\n                break;\r\n            default:\r\n                x = this.getBezierValue(time, i, 1/*VALUE1*/, curveType - 2/*BEZIER*/);\r\n                y = this.getBezierValue(time, i, 2/*VALUE2*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\r\n        }\r\n\r\n        switch (blend) {\r\n            case MixBlend.setup:\r\n                bone.shearX = bone.data.shearX + x * alpha;\r\n                bone.shearY = bone.data.shearY + y * alpha;\r\n                break;\r\n            case MixBlend.first:\r\n            case MixBlend.replace:\r\n                bone.shearX += (bone.data.shearX + x - bone.shearX) * alpha;\r\n                bone.shearY += (bone.data.shearY + y - bone.shearY) * alpha;\r\n                break;\r\n            case MixBlend.add:\r\n                bone.shearX += x * alpha;\r\n                bone.shearY += y * alpha;\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}.\r\n * @public\r\n * */\r\nexport class ShearXTimeline extends CurveTimeline1 implements BoneTimeline {\r\n    boneIndex = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, boneIndex: number) {\r\n        super(frameCount, bezierCount, Property.shearX + \"|\" + boneIndex);\r\n        this.boneIndex = boneIndex;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let bone = skeleton.bones[this.boneIndex];\r\n        if (!bone.active) return;\r\n\r\n        let frames = this.frames;\r\n        if (time < frames[0]) {\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    bone.shearX = bone.data.shearX;\r\n                    return;\r\n                case MixBlend.first:\r\n                    bone.shearX += (bone.data.shearX - bone.shearX) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let x = this.getCurveValue(time);\r\n        switch (blend) {\r\n            case MixBlend.setup:\r\n                bone.shearX = bone.data.shearX + x * alpha;\r\n                break;\r\n            case MixBlend.first:\r\n            case MixBlend.replace:\r\n                bone.shearX += (bone.data.shearX + x - bone.shearX) * alpha;\r\n                break;\r\n            case MixBlend.add:\r\n                bone.shearX += x * alpha;\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}.\r\n * @public\r\n * */\r\nexport class ShearYTimeline extends CurveTimeline1 implements BoneTimeline {\r\n    boneIndex = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, boneIndex: number) {\r\n        super(frameCount, bezierCount, Property.shearY + \"|\" + boneIndex);\r\n        this.boneIndex = boneIndex;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let bone = skeleton.bones[this.boneIndex];\r\n        if (!bone.active) return;\r\n\r\n        let frames = this.frames;\r\n        if (time < frames[0]) {\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    bone.shearY = bone.data.shearY;\r\n                    return;\r\n                case MixBlend.first:\r\n                    bone.shearY += (bone.data.shearY - bone.shearY) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let y = this.getCurveValue(time);\r\n        switch (blend) {\r\n            case MixBlend.setup:\r\n                bone.shearY = bone.data.shearY + y * alpha;\r\n                break;\r\n            case MixBlend.first:\r\n            case MixBlend.replace:\r\n                bone.shearY += (bone.data.shearY + y - bone.shearY) * alpha;\r\n                break;\r\n            case MixBlend.add:\r\n                bone.shearY += y * alpha;\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes a slot's {@link Slot#color}.\r\n * @public\r\n * */\r\nexport class RGBATimeline extends CurveTimeline implements SlotTimeline {\r\n    slotIndex = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, slotIndex: number) {\r\n        super(frameCount, bezierCount, [\r\n            Property.rgb + \"|\" + slotIndex,\r\n            Property.alpha + \"|\" + slotIndex\r\n        ]);\r\n        this.slotIndex = slotIndex;\r\n    }\r\n\r\n    getFrameEntries () {\r\n        return 5/*ENTRIES*/;\r\n    }\r\n\r\n    /** Sets the time in seconds, red, green, blue, and alpha for the specified key frame. */\r\n    setFrame (frame: number, time: number, r: number, g: number, b: number, a: number) {\r\n        frame *= 5/*ENTRIES*/;\r\n        this.frames[frame] = time;\r\n        this.frames[frame + 1/*R*/] = r;\r\n        this.frames[frame + 2/*G*/] = g;\r\n        this.frames[frame + 3/*B*/] = b;\r\n        this.frames[frame + 4/*A*/] = a;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let slot = skeleton.slots[this.slotIndex];\r\n        if (!slot.bone.active) return;\r\n\r\n        let frames = this.frames;\r\n        let color = slot.color;\r\n        if (time < frames[0]) {\r\n            let setup = slot.data.color;\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    color.setFromColor(setup);\r\n                    return;\r\n                case MixBlend.first:\r\n                    color.add((setup.r - color.r) * alpha, (setup.g - color.g) * alpha, (setup.b - color.b) * alpha,\r\n                        (setup.a - color.a) * alpha);\r\n            }\r\n            return;\r\n        }\r\n\r\n        let r = 0, g = 0, b = 0, a = 0;\r\n        let i = Timeline.search(frames, time, 5/*ENTRIES*/);\r\n        let curveType = this.curves[i / 5/*ENTRIES*/];\r\n        switch (curveType) {\r\n            case 0/*LINEAR*/:\r\n                let before = frames[i];\r\n                r = frames[i + 1/*R*/];\r\n                g = frames[i + 2/*G*/];\r\n                b = frames[i + 3/*B*/];\r\n                a = frames[i + 4/*A*/];\r\n                let t = (time - before) / (frames[i + 5/*ENTRIES*/] - before);\r\n                r += (frames[i + 5/*ENTRIES*/ + 1/*R*/] - r) * t;\r\n                g += (frames[i + 5/*ENTRIES*/ + 2/*G*/] - g) * t;\r\n                b += (frames[i + 5/*ENTRIES*/ + 3/*B*/] - b) * t;\r\n                a += (frames[i + 5/*ENTRIES*/ + 4/*A*/] - a) * t;\r\n                break;\r\n            case 1/*STEPPED*/:\r\n                r = frames[i + 1/*R*/];\r\n                g = frames[i + 2/*G*/];\r\n                b = frames[i + 3/*B*/];\r\n                a = frames[i + 4/*A*/];\r\n                break;\r\n            default:\r\n                r = this.getBezierValue(time, i, 1/*R*/, curveType - 2/*BEZIER*/);\r\n                g = this.getBezierValue(time, i, 2/*G*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\r\n                b = this.getBezierValue(time, i, 3/*B*/, curveType + 18/*BEZIER_SIZE*/ * 2 - 2/*BEZIER*/);\r\n                a = this.getBezierValue(time, i, 4/*A*/, curveType + 18/*BEZIER_SIZE*/ * 3 - 2/*BEZIER*/);\r\n        }\r\n        if (alpha == 1)\r\n            color.set(r, g, b, a);\r\n        else {\r\n            if (blend == MixBlend.setup) color.setFromColor(slot.data.color);\r\n            color.add((r - color.r) * alpha, (g - color.g) * alpha, (b - color.b) * alpha, (a - color.a) * alpha);\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes a slot's {@link Slot#color}.\r\n * @public\r\n * */\r\nexport class RGBTimeline extends CurveTimeline implements SlotTimeline {\r\n    slotIndex = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, slotIndex: number) {\r\n        super(frameCount, bezierCount, [\r\n            Property.rgb + \"|\" + slotIndex\r\n        ]);\r\n        this.slotIndex = slotIndex;\r\n    }\r\n\r\n    getFrameEntries () {\r\n        return 4/*ENTRIES*/;\r\n    }\r\n\r\n    /** Sets the time in seconds, red, green, blue, and alpha for the specified key frame. */\r\n    setFrame (frame: number, time: number, r: number, g: number, b: number) {\r\n        frame <<= 2;\r\n        this.frames[frame] = time;\r\n        this.frames[frame + 1/*R*/] = r;\r\n        this.frames[frame + 2/*G*/] = g;\r\n        this.frames[frame + 3/*B*/] = b;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let slot = skeleton.slots[this.slotIndex];\r\n        if (!slot.bone.active) return;\r\n\r\n        let frames = this.frames;\r\n        let color = slot.color;\r\n        if (time < frames[0]) {\r\n            let setup = slot.data.color;\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    color.r = setup.r;\r\n                    color.g = setup.g;\r\n                    color.b = setup.b;\r\n                    return;\r\n                case MixBlend.first:\r\n                    color.r += (setup.r - color.r) * alpha;\r\n                    color.g += (setup.g - color.g) * alpha;\r\n                    color.b += (setup.b - color.b) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let r = 0, g = 0, b = 0;\r\n        let i = Timeline.search(frames, time, 4/*ENTRIES*/);\r\n        let curveType = this.curves[i >> 2];\r\n        switch (curveType) {\r\n            case 0/*LINEAR*/:\r\n                let before = frames[i];\r\n                r = frames[i + 1/*R*/];\r\n                g = frames[i + 2/*G*/];\r\n                b = frames[i + 3/*B*/];\r\n                let t = (time - before) / (frames[i + 4/*ENTRIES*/] - before);\r\n                r += (frames[i + 4/*ENTRIES*/ + 1/*R*/] - r) * t;\r\n                g += (frames[i + 4/*ENTRIES*/ + 2/*G*/] - g) * t;\r\n                b += (frames[i + 4/*ENTRIES*/ + 3/*B*/] - b) * t;\r\n                break;\r\n            case 1/*STEPPED*/:\r\n                r = frames[i + 1/*R*/];\r\n                g = frames[i + 2/*G*/];\r\n                b = frames[i + 3/*B*/];\r\n                break;\r\n            default:\r\n                r = this.getBezierValue(time, i, 1/*R*/, curveType - 2/*BEZIER*/);\r\n                g = this.getBezierValue(time, i, 2/*G*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\r\n                b = this.getBezierValue(time, i, 3/*B*/, curveType + 18/*BEZIER_SIZE*/ * 2 - 2/*BEZIER*/);\r\n        }\r\n        if (alpha == 1) {\r\n            color.r = r;\r\n            color.g = g;\r\n            color.b = b;\r\n        } else {\r\n            if (blend == MixBlend.setup) {\r\n                let setup = slot.data.color;\r\n                color.r = setup.r;\r\n                color.g = setup.g;\r\n                color.b = setup.b;\r\n            }\r\n            color.r += (r - color.r) * alpha;\r\n            color.g += (g - color.g) * alpha;\r\n            color.b += (b - color.b) * alpha;\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}.\r\n * @public\r\n * */\r\nexport class AlphaTimeline extends CurveTimeline1 implements SlotTimeline {\r\n    slotIndex = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, slotIndex: number) {\r\n        super(frameCount, bezierCount, Property.alpha + \"|\" + slotIndex);\r\n        this.slotIndex = slotIndex;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let slot = skeleton.slots[this.slotIndex];\r\n        if (!slot.bone.active) return;\r\n\r\n        let color = slot.color;\r\n        if (time < this.frames[0]) { // Time is before first frame.\r\n            let setup = slot.data.color;\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    color.a = setup.a;\r\n                    return;\r\n                case MixBlend.first:\r\n                    color.a += (setup.a - color.a) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let a = this.getCurveValue(time);\r\n        if (alpha == 1)\r\n            color.a = a;\r\n        else {\r\n            if (blend == MixBlend.setup) color.a = slot.data.color.a;\r\n            color.a += (a - color.a) * alpha;\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes a slot's {@link Slot#color} and {@link Slot#darkColor} for two color tinting.\r\n * @public\r\n * */\r\nexport class RGBA2Timeline extends CurveTimeline implements SlotTimeline{\r\n    slotIndex = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, slotIndex: number) {\r\n        super(frameCount, bezierCount, [\r\n            Property.rgb + \"|\" + slotIndex,\r\n            Property.alpha + \"|\" + slotIndex,\r\n            Property.rgb2 + \"|\" + slotIndex\r\n        ]);\r\n        this.slotIndex = slotIndex;\r\n    }\r\n\r\n    getFrameEntries () {\r\n        return 8/*ENTRIES*/;\r\n    }\r\n\r\n    /** Sets the time in seconds, light, and dark colors for the specified key frame. */\r\n    setFrame (frame: number, time: number, r: number, g: number, b: number, a: number, r2: number, g2: number, b2: number) {\r\n        frame <<= 3;\r\n        this.frames[frame] = time;\r\n        this.frames[frame + 1/*R*/] = r;\r\n        this.frames[frame + 2/*G*/] = g;\r\n        this.frames[frame + 3/*B*/] = b;\r\n        this.frames[frame + 4/*A*/] = a;\r\n        this.frames[frame + 5/*R2*/] = r2;\r\n        this.frames[frame + 6/*G2*/] = g2;\r\n        this.frames[frame + 7/*B2*/] = b2;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let slot = skeleton.slots[this.slotIndex];\r\n        if (!slot.bone.active) return;\r\n\r\n        let frames = this.frames;\r\n        let light = slot.color, dark = slot.darkColor;\r\n        if (time < frames[0]) {\r\n            let setupLight = slot.data.color, setupDark = slot.data.darkColor;\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    light.setFromColor(setupLight);\r\n                    dark.r = setupDark.r;\r\n                    dark.g = setupDark.g;\r\n                    dark.b = setupDark.b;\r\n                    return;\r\n                case MixBlend.first:\r\n                    light.add((setupLight.r - light.r) * alpha, (setupLight.g - light.g) * alpha, (setupLight.b - light.b) * alpha,\r\n                        (setupLight.a - light.a) * alpha);\r\n                    dark.r += (setupDark.r - dark.r) * alpha;\r\n                    dark.g += (setupDark.g - dark.g) * alpha;\r\n                    dark.b += (setupDark.b - dark.b) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let r = 0, g = 0, b = 0, a = 0, r2 = 0, g2 = 0, b2 = 0;\r\n        let i = Timeline.search(frames, time, 8/*ENTRIES*/);\r\n        let curveType = this.curves[i >> 3];\r\n        switch (curveType) {\r\n            case 0/*LINEAR*/:\r\n                let before = frames[i];\r\n                r = frames[i + 1/*R*/];\r\n                g = frames[i + 2/*G*/];\r\n                b = frames[i + 3/*B*/];\r\n                a = frames[i + 4/*A*/];\r\n                r2 = frames[i + 5/*R2*/];\r\n                g2 = frames[i + 6/*G2*/];\r\n                b2 = frames[i + 7/*B2*/];\r\n                let t = (time - before) / (frames[i + 8/*ENTRIES*/] - before);\r\n                r += (frames[i + 8/*ENTRIES*/ + 1/*R*/] - r) * t;\r\n                g += (frames[i + 8/*ENTRIES*/ + 2/*G*/] - g) * t;\r\n                b += (frames[i + 8/*ENTRIES*/ + 3/*B*/] - b) * t;\r\n                a += (frames[i + 8/*ENTRIES*/ + 4/*A*/] - a) * t;\r\n                r2 += (frames[i + 8/*ENTRIES*/ + 5/*R2*/] - r2) * t;\r\n                g2 += (frames[i + 8/*ENTRIES*/ + 6/*G2*/] - g2) * t;\r\n                b2 += (frames[i + 8/*ENTRIES*/ + 7/*B2*/] - b2) * t;\r\n                break;\r\n            case 1/*STEPPED*/:\r\n                r = frames[i + 1/*R*/];\r\n                g = frames[i + 2/*G*/];\r\n                b = frames[i + 3/*B*/];\r\n                a = frames[i + 4/*A*/];\r\n                r2 = frames[i + 5/*R2*/];\r\n                g2 = frames[i + 6/*G2*/];\r\n                b2 = frames[i + 7/*B2*/];\r\n                break;\r\n            default:\r\n                r = this.getBezierValue(time, i, 1/*R*/, curveType - 2/*BEZIER*/);\r\n                g = this.getBezierValue(time, i, 2/*G*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\r\n                b = this.getBezierValue(time, i, 3/*B*/, curveType + 18/*BEZIER_SIZE*/ * 2 - 2/*BEZIER*/);\r\n                a = this.getBezierValue(time, i, 4/*A*/, curveType + 18/*BEZIER_SIZE*/ * 3 - 2/*BEZIER*/);\r\n                r2 = this.getBezierValue(time, i, 5/*R2*/, curveType + 18/*BEZIER_SIZE*/ * 4 - 2/*BEZIER*/);\r\n                g2 = this.getBezierValue(time, i, 6/*G2*/, curveType + 18/*BEZIER_SIZE*/ * 5 - 2/*BEZIER*/);\r\n                b2 = this.getBezierValue(time, i, 7/*B2*/, curveType + 18/*BEZIER_SIZE*/ * 6 - 2/*BEZIER*/);\r\n        }\r\n\r\n        if (alpha == 1) {\r\n            light.set(r, g, b, a);\r\n            dark.r = r2;\r\n            dark.g = g2;\r\n            dark.b = b2;\r\n        } else {\r\n            if (blend == MixBlend.setup) {\r\n                light.setFromColor(slot.data.color);\r\n                let setupDark = slot.data.darkColor;\r\n                dark.r = setupDark.r;\r\n                dark.g = setupDark.g;\r\n                dark.b = setupDark.b;\r\n            }\r\n            light.add((r - light.r) * alpha, (g - light.g) * alpha, (b - light.b) * alpha, (a - light.a) * alpha);\r\n            dark.r += (r2 - dark.r) * alpha;\r\n            dark.g += (g2 - dark.g) * alpha;\r\n            dark.b += (b2 - dark.b) * alpha;\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes a slot's {@link Slot#color} and {@link Slot#darkColor} for two color tinting.\r\n * @public\r\n * */\r\nexport class RGB2Timeline extends CurveTimeline implements SlotTimeline{\r\n    slotIndex = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, slotIndex: number) {\r\n        super(frameCount, bezierCount, [\r\n            Property.rgb + \"|\" + slotIndex,\r\n            Property.rgb2 + \"|\" + slotIndex\r\n        ]);\r\n        this.slotIndex = slotIndex;\r\n    }\r\n\r\n    getFrameEntries () {\r\n        return 7/*ENTRIES*/;\r\n    }\r\n\r\n    /** Sets the time in seconds, light, and dark colors for the specified key frame. */\r\n    setFrame (frame: number, time: number, r: number, g: number, b: number, r2: number, g2: number, b2: number) {\r\n        frame *= 7/*ENTRIES*/;\r\n        this.frames[frame] = time;\r\n        this.frames[frame + 1/*R*/] = r;\r\n        this.frames[frame + 2/*G*/] = g;\r\n        this.frames[frame + 3/*B*/] = b;\r\n        this.frames[frame + 4/*R2*/] = r2;\r\n        this.frames[frame + 5/*G2*/] = g2;\r\n        this.frames[frame + 6/*B2*/] = b2;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let slot = skeleton.slots[this.slotIndex];\r\n        if (!slot.bone.active) return;\r\n\r\n        let frames = this.frames;\r\n        let light = slot.color, dark = slot.darkColor;\r\n        if (time < frames[0]) {\r\n            let setupLight = slot.data.color, setupDark = slot.data.darkColor;\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    light.r = setupLight.r;\r\n                    light.g = setupLight.g;\r\n                    light.b = setupLight.b;\r\n                    dark.r = setupDark.r;\r\n                    dark.g = setupDark.g;\r\n                    dark.b = setupDark.b;\r\n                    return;\r\n                case MixBlend.first:\r\n                    light.r += (setupLight.r - light.r) * alpha;\r\n                    light.g += (setupLight.g - light.g) * alpha;\r\n                    light.b += (setupLight.b - light.b) * alpha;\r\n                    dark.r += (setupDark.r - dark.r) * alpha;\r\n                    dark.g += (setupDark.g - dark.g) * alpha;\r\n                    dark.b += (setupDark.b - dark.b) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let r = 0, g = 0, b = 0, r2 = 0, g2 = 0, b2 = 0;\r\n        let i = Timeline.search(frames, time, 7/*ENTRIES*/);\r\n        let curveType = this.curves[i / 7/*ENTRIES*/];\r\n        switch (curveType) {\r\n            case 0/*LINEAR*/:\r\n                let before = frames[i];\r\n                r = frames[i + 1/*R*/];\r\n                g = frames[i + 2/*G*/];\r\n                b = frames[i + 3/*B*/];\r\n                r2 = frames[i + 4/*R2*/];\r\n                g2 = frames[i + 5/*G2*/];\r\n                b2 = frames[i + 6/*B2*/];\r\n                let t = (time - before) / (frames[i + 7/*ENTRIES*/] - before);\r\n                r += (frames[i + 7/*ENTRIES*/ + 1/*R*/] - r) * t;\r\n                g += (frames[i + 7/*ENTRIES*/ + 2/*G*/] - g) * t;\r\n                b += (frames[i + 7/*ENTRIES*/ + 3/*B*/] - b) * t;\r\n                r2 += (frames[i + 7/*ENTRIES*/ + 4/*R2*/] - r2) * t;\r\n                g2 += (frames[i + 7/*ENTRIES*/ + 5/*G2*/] - g2) * t;\r\n                b2 += (frames[i + 7/*ENTRIES*/ + 6/*B2*/] - b2) * t;\r\n                break;\r\n            case 1/*STEPPED*/:\r\n                r = frames[i + 1/*R*/];\r\n                g = frames[i + 2/*G*/];\r\n                b = frames[i + 3/*B*/];\r\n                r2 = frames[i + 4/*R2*/];\r\n                g2 = frames[i + 5/*G2*/];\r\n                b2 = frames[i + 6/*B2*/];\r\n                break;\r\n            default:\r\n                r = this.getBezierValue(time, i, 1/*R*/, curveType - 2/*BEZIER*/);\r\n                g = this.getBezierValue(time, i, 2/*G*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\r\n                b = this.getBezierValue(time, i, 3/*B*/, curveType + 18/*BEZIER_SIZE*/ * 2 - 2/*BEZIER*/);\r\n                r2 = this.getBezierValue(time, i, 4/*R2*/, curveType + 18/*BEZIER_SIZE*/ * 3 - 2/*BEZIER*/);\r\n                g2 = this.getBezierValue(time, i, 5/*G2*/, curveType + 18/*BEZIER_SIZE*/ * 4 - 2/*BEZIER*/);\r\n                b2 = this.getBezierValue(time, i, 6/*B2*/, curveType + 18/*BEZIER_SIZE*/ * 5 - 2/*BEZIER*/);\r\n        }\r\n\r\n        if (alpha == 1) {\r\n            light.r = r;\r\n            light.g = g;\r\n            light.b = b;\r\n            dark.r = r2;\r\n            dark.g = g2;\r\n            dark.b = b2;\r\n        } else {\r\n            if (blend == MixBlend.setup) {\r\n                let setupLight = slot.data.color, setupDark = slot.data.darkColor;\r\n                light.r = setupLight.r;\r\n                light.g = setupLight.g;\r\n                light.b = setupLight.b;\r\n                dark.r = setupDark.r;\r\n                dark.g = setupDark.g;\r\n                dark.b = setupDark.b;\r\n            }\r\n            light.r += (r - light.r) * alpha;\r\n            light.g += (g - light.g) * alpha;\r\n            light.b += (b - light.b) * alpha;\r\n            dark.r += (r2 - dark.r) * alpha;\r\n            dark.g += (g2 - dark.g) * alpha;\r\n            dark.b += (b2 - dark.b) * alpha;\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes a slot's {@link Slot#attachment}.\r\n * @public\r\n * */\r\nexport class AttachmentTimeline extends Timeline implements SlotTimeline {\r\n    slotIndex = 0;\r\n\r\n    /** The attachment name for each key frame. May contain null values to clear the attachment. */\r\n    attachmentNames: Array<string>;\r\n\r\n    constructor (frameCount: number, slotIndex: number) {\r\n        super(frameCount, [\r\n            Property.attachment + \"|\" + slotIndex\r\n        ]);\r\n        this.slotIndex = slotIndex;\r\n        this.attachmentNames = new Array<string>(frameCount);\r\n    }\r\n\r\n    getFrameCount () {\r\n        return this.frames.length;\r\n    }\r\n\r\n    /** Sets the time in seconds and the attachment name for the specified key frame. */\r\n    setFrame (frame: number, time: number, attachmentName: string) {\r\n        this.frames[frame] = time;\r\n        this.attachmentNames[frame] = attachmentName;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let slot = skeleton.slots[this.slotIndex];\r\n        if (!slot.bone.active) return;\r\n\r\n        if (direction == MixDirection.mixOut) {\r\n            if (blend == MixBlend.setup) this.setAttachment(skeleton, slot, slot.data.attachmentName);\r\n            return;\r\n        }\r\n\r\n        if (time < this.frames[0]) {\r\n            if (blend == MixBlend.setup || blend == MixBlend.first) this.setAttachment(skeleton, slot, slot.data.attachmentName);\r\n            return;\r\n        }\r\n\r\n        this.setAttachment(skeleton, slot, this.attachmentNames[Timeline.search1(this.frames, time)]);\r\n    }\r\n\r\n    setAttachment(skeleton: Skeleton, slot: Slot, attachmentName: string) {\r\n        slot.setAttachment(!attachmentName ? null : skeleton.getAttachment(this.slotIndex, attachmentName));\r\n    }\r\n}\r\n\r\n/** Changes a slot's {@link Slot#deform} to deform a {@link VertexAttachment}.\r\n * @public\r\n * */\r\nexport class DeformTimeline extends CurveTimeline implements SlotTimeline {\r\n    slotIndex = 0;\r\n\r\n    /** The attachment that will be deformed. */\r\n    attachment: VertexAttachment;\r\n\r\n    /** The vertices for each key frame. */\r\n    vertices: Array<ArrayLike<number>>;\r\n\r\n    constructor (frameCount: number, bezierCount: number, slotIndex: number, attachment: VertexAttachment) {\r\n        super(frameCount, bezierCount, [\r\n            Property.deform + \"|\" + slotIndex + \"|\" + attachment.id\r\n        ]);\r\n        this.slotIndex = slotIndex;\r\n        this.attachment = attachment;\r\n        this.vertices = new Array<ArrayLike<number>>(frameCount);\r\n    }\r\n\r\n    getFrameCount () {\r\n        return this.frames.length;\r\n    }\r\n\r\n    /** Sets the time in seconds and the vertices for the specified key frame.\r\n     * @param vertices Vertex positions for an unweighted VertexAttachment, or deform offsets if it has weights. */\r\n    setFrame (frame: number, time: number, vertices: ArrayLike<number>) {\r\n        this.frames[frame] = time;\r\n        this.vertices[frame] = vertices;\r\n    }\r\n\r\n    /** @param value1 Ignored (0 is used for a deform timeline).\r\n     * @param value2 Ignored (1 is used for a deform timeline). */\r\n    setBezier (bezier: number, frame: number, value: number, time1: number, value1: number, cx1: number, cy1: number, cx2: number,\r\n               cy2: number, time2: number, value2: number) {\r\n        let curves = this.curves;\r\n        let i = this.getFrameCount() + bezier * 18/*BEZIER_SIZE*/;\r\n        if (value == 0) curves[frame] = 2/*BEZIER*/ + i;\r\n        let tmpx = (time1 - cx1 * 2 + cx2) * 0.03, tmpy = cy2 * 0.03 - cy1 * 0.06;\r\n        let dddx = ((cx1 - cx2) * 3 - time1 + time2) * 0.006, dddy = (cy1 - cy2 + 0.33333333) * 0.018;\r\n        let ddx = tmpx * 2 + dddx, ddy = tmpy * 2 + dddy;\r\n        let dx = (cx1 - time1) * 0.3 + tmpx + dddx * 0.16666667, dy = cy1 * 0.3 + tmpy + dddy * 0.16666667;\r\n        let x = time1 + dx, y = dy;\r\n        for (let n = i + 18/*BEZIER_SIZE*/; i < n; i += 2) {\r\n            curves[i] = x;\r\n            curves[i + 1] = y;\r\n            dx += ddx;\r\n            dy += ddy;\r\n            ddx += dddx;\r\n            ddy += dddy;\r\n            x += dx;\r\n            y += dy;\r\n        }\r\n    }\r\n\r\n    getCurvePercent (time: number, frame: number) {\r\n        let curves = this.curves;\r\n        let i = curves[frame];\r\n        switch (i) {\r\n            case 0/*LINEAR*/:\r\n                let x = this.frames[frame];\r\n                return (time - x) / (this.frames[frame + this.getFrameEntries()] - x);\r\n            case 1/*STEPPED*/:\r\n                return 0;\r\n        }\r\n        i -= 2/*BEZIER*/;\r\n        if (curves[i] > time) {\r\n            let x = this.frames[frame];\r\n            return curves[i + 1] * (time - x) / (curves[i] - x);\r\n        }\r\n        let n = i + 18/*BEZIER_SIZE*/;\r\n        for (i += 2; i < n; i += 2) {\r\n            if (curves[i] >= time) {\r\n                let x = curves[i - 2], y = curves[i - 1];\r\n                return y + (time - x) / (curves[i] - x) * (curves[i + 1] - y);\r\n            }\r\n        }\r\n        let x = curves[n - 2], y = curves[n - 1];\r\n        return y + (1 - y) * (time - x) / (this.frames[frame + this.getFrameEntries()] - x);\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let slot: Slot = skeleton.slots[this.slotIndex];\r\n        if (!slot.bone.active) return;\r\n        let slotAttachment: Attachment = slot.getAttachment();\r\n        if (!(slotAttachment instanceof VertexAttachment) || (<VertexAttachment>slotAttachment).deformAttachment != this.attachment) return;\r\n\r\n        let deform: Array<number> = slot.deform;\r\n        if (deform.length == 0) blend = MixBlend.setup;\r\n\r\n        let vertices = this.vertices;\r\n        let vertexCount = vertices[0].length;\r\n\r\n        let frames = this.frames;\r\n        if (time < frames[0]) {\r\n            let vertexAttachment = <VertexAttachment>slotAttachment;\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    deform.length = 0;\r\n                    return;\r\n                case MixBlend.first:\r\n                    if (alpha == 1) {\r\n                        deform.length = 0;\r\n                        return;\r\n                    }\r\n                    deform.length = vertexCount;\r\n                    if (!vertexAttachment.bones) {\r\n                        // Unweighted vertex positions.\r\n                        let setupVertices = vertexAttachment.vertices;\r\n                        for (var i = 0; i < vertexCount; i++)\r\n                            deform[i] += (setupVertices[i] - deform[i]) * alpha;\r\n                    } else {\r\n                        // Weighted deform offsets.\r\n                        alpha = 1 - alpha;\r\n                        for (var i = 0; i < vertexCount; i++)\r\n                            deform[i] *= alpha;\r\n                    }\r\n            }\r\n            return;\r\n        }\r\n\r\n        deform.length = vertexCount;\r\n        if (time >= frames[frames.length - 1]) { // Time is after last frame.\r\n            let lastVertices = vertices[frames.length - 1];\r\n            if (alpha == 1) {\r\n                if (blend == MixBlend.add) {\r\n                    let vertexAttachment = slotAttachment as VertexAttachment;\r\n                    if (!vertexAttachment.bones) {\r\n                        // Unweighted vertex positions, with alpha.\r\n                        let setupVertices = vertexAttachment.vertices;\r\n                        for (let i = 0; i < vertexCount; i++)\r\n                            deform[i] += lastVertices[i] - setupVertices[i];\r\n                    } else {\r\n                        // Weighted deform offsets, with alpha.\r\n                        for (let i = 0; i < vertexCount; i++)\r\n                            deform[i] += lastVertices[i];\r\n                    }\r\n                } else\r\n                    Utils.arrayCopy(lastVertices, 0, deform, 0, vertexCount);\r\n            } else {\r\n                switch (blend) {\r\n                    case MixBlend.setup: {\r\n                        let vertexAttachment = slotAttachment as VertexAttachment;\r\n                        if (!vertexAttachment.bones) {\r\n                            // Unweighted vertex positions, with alpha.\r\n                            let setupVertices = vertexAttachment.vertices;\r\n                            for (let i = 0; i < vertexCount; i++) {\r\n                                let setup = setupVertices[i];\r\n                                deform[i] = setup + (lastVertices[i] - setup) * alpha;\r\n                            }\r\n                        } else {\r\n                            // Weighted deform offsets, with alpha.\r\n                            for (let i = 0; i < vertexCount; i++)\r\n                                deform[i] = lastVertices[i] * alpha;\r\n                        }\r\n                        break;\r\n                    }\r\n                    case MixBlend.first:\r\n                    case MixBlend.replace:\r\n                        for (let i = 0; i < vertexCount; i++)\r\n                            deform[i] += (lastVertices[i] - deform[i]) * alpha;\r\n                        break;\r\n                    case MixBlend.add:\r\n                        let vertexAttachment = slotAttachment as VertexAttachment;\r\n                        if (!vertexAttachment.bones) {\r\n                            // Unweighted vertex positions, with alpha.\r\n                            let setupVertices = vertexAttachment.vertices;\r\n                            for (let i = 0; i < vertexCount; i++)\r\n                                deform[i] += (lastVertices[i] - setupVertices[i]) * alpha;\r\n                        } else {\r\n                            // Weighted deform offsets, with alpha.\r\n                            for (let i = 0; i < vertexCount; i++)\r\n                                deform[i] += lastVertices[i] * alpha;\r\n                        }\r\n                }\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Interpolate between the previous frame and the current frame.\r\n        let frame = Timeline.search1(frames, time);\r\n        let percent = this.getCurvePercent(time, frame);\r\n        let prevVertices = vertices[frame];\r\n        let nextVertices = vertices[frame + 1];\r\n\r\n        if (alpha == 1) {\r\n            if (blend == MixBlend.add) {\r\n                let vertexAttachment = slotAttachment as VertexAttachment;\r\n                if (!vertexAttachment.bones) {\r\n                    // Unweighted vertex positions, with alpha.\r\n                    let setupVertices = vertexAttachment.vertices;\r\n                    for (let i = 0; i < vertexCount; i++) {\r\n                        let prev = prevVertices[i];\r\n                        deform[i] += prev + (nextVertices[i] - prev) * percent - setupVertices[i];\r\n                    }\r\n                } else {\r\n                    // Weighted deform offsets, with alpha.\r\n                    for (let i = 0; i < vertexCount; i++) {\r\n                        let prev = prevVertices[i];\r\n                        deform[i] += prev + (nextVertices[i] - prev) * percent;\r\n                    }\r\n                }\r\n            } else {\r\n                for (let i = 0; i < vertexCount; i++) {\r\n                    let prev = prevVertices[i];\r\n                    deform[i] = prev + (nextVertices[i] - prev) * percent;\r\n                }\r\n            }\r\n        } else {\r\n            switch (blend) {\r\n                case MixBlend.setup: {\r\n                    let vertexAttachment = slotAttachment as VertexAttachment;\r\n                    if (!vertexAttachment.bones) {\r\n                        // Unweighted vertex positions, with alpha.\r\n                        let setupVertices = vertexAttachment.vertices;\r\n                        for (let i = 0; i < vertexCount; i++) {\r\n                            let prev = prevVertices[i], setup = setupVertices[i];\r\n                            deform[i] = setup + (prev + (nextVertices[i] - prev) * percent - setup) * alpha;\r\n                        }\r\n                    } else {\r\n                        // Weighted deform offsets, with alpha.\r\n                        for (let i = 0; i < vertexCount; i++) {\r\n                            let prev = prevVertices[i];\r\n                            deform[i] = (prev + (nextVertices[i] - prev) * percent) * alpha;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case MixBlend.first:\r\n                case MixBlend.replace:\r\n                    for (let i = 0; i < vertexCount; i++) {\r\n                        let prev = prevVertices[i];\r\n                        deform[i] += (prev + (nextVertices[i] - prev) * percent - deform[i]) * alpha;\r\n                    }\r\n                    break;\r\n                case MixBlend.add:\r\n                    let vertexAttachment = slotAttachment as VertexAttachment;\r\n                    if (!vertexAttachment.bones) {\r\n                        // Unweighted vertex positions, with alpha.\r\n                        let setupVertices = vertexAttachment.vertices;\r\n                        for (let i = 0; i < vertexCount; i++) {\r\n                            let prev = prevVertices[i];\r\n                            deform[i] += (prev + (nextVertices[i] - prev) * percent - setupVertices[i]) * alpha;\r\n                        }\r\n                    } else {\r\n                        // Weighted deform offsets, with alpha.\r\n                        for (let i = 0; i < vertexCount; i++) {\r\n                            let prev = prevVertices[i];\r\n                            deform[i] += (prev + (nextVertices[i] - prev) * percent) * alpha;\r\n                        }\r\n                    }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** Fires an {@link Event} when specific animation times are reached.\r\n * @public\r\n * */\r\nexport class EventTimeline extends Timeline {\r\n    static propertyIds = [ \"\" + Property.event ];\r\n\r\n    /** The event for each key frame. */\r\n    events: Array<Event>;\r\n\r\n    constructor (frameCount: number) {\r\n        super(frameCount, EventTimeline.propertyIds);\r\n\r\n        this.events = new Array<Event>(frameCount);\r\n    }\r\n\r\n    getFrameCount () {\r\n        return this.frames.length;\r\n    }\r\n\r\n    /** Sets the time in seconds and the event for the specified key frame. */\r\n    setFrame (frame: number, event: Event) {\r\n        this.frames[frame] = event.time;\r\n        this.events[frame] = event;\r\n    }\r\n\r\n    /** Fires events for frames > `lastTime` and <= `time`. */\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        if (!firedEvents) return;\r\n\r\n        let frames = this.frames;\r\n        let frameCount = this.frames.length;\r\n\r\n        if (lastTime > time) { // Fire events after last time for looped animations.\r\n            this.apply(skeleton, lastTime, Number.MAX_VALUE, firedEvents, alpha, blend, direction);\r\n            lastTime = -1;\r\n        } else if (lastTime >= frames[frameCount - 1]) // Last time is after last frame.\r\n            return;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        let i = 0;\r\n        if (lastTime < frames[0])\r\n            i = 0;\r\n        else {\r\n            i = Timeline.search1(frames, lastTime) + 1;\r\n            let frameTime = frames[i];\r\n            while (i > 0) { // Fire multiple events with the same frame.\r\n                if (frames[i - 1] != frameTime) break;\r\n                i--;\r\n            }\r\n        }\r\n        for (; i < frameCount && time >= frames[i]; i++)\r\n            firedEvents.push(this.events[i]);\r\n    }\r\n}\r\n\r\n/** Changes a skeleton's {@link Skeleton#drawOrder}.\r\n * @public\r\n * */\r\nexport class DrawOrderTimeline extends Timeline {\r\n    static propertyIds = [ \"\" + Property.drawOrder ];\r\n\r\n    /** The draw order for each key frame. See {@link #setFrame(int, float, int[])}. */\r\n    drawOrders: Array<Array<number>>;\r\n\r\n    constructor (frameCount: number) {\r\n        super(frameCount, DrawOrderTimeline.propertyIds);\r\n        this.drawOrders = new Array<Array<number>>(frameCount);\r\n    }\r\n\r\n    getFrameCount () {\r\n        return this.frames.length;\r\n    }\r\n\r\n    /** Sets the time in seconds and the draw order for the specified key frame.\r\n     * @param drawOrder For each slot in {@link Skeleton#slots}, the index of the new draw order. May be null to use setup pose\r\n     *           draw order. */\r\n    setFrame (frame: number, time: number, drawOrder: Array<number>) {\r\n        this.frames[frame] = time;\r\n        this.drawOrders[frame] = drawOrder;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        if (direction == MixDirection.mixOut) {\r\n            if (blend == MixBlend.setup) Utils.arrayCopy(skeleton.slots, 0, skeleton.drawOrder, 0, skeleton.slots.length);\r\n            return;\r\n        }\r\n\r\n        if (time < this.frames[0]) {\r\n            if (blend == MixBlend.setup || blend == MixBlend.first) Utils.arrayCopy(skeleton.slots, 0, skeleton.drawOrder, 0, skeleton.slots.length);\r\n            return;\r\n        }\r\n\r\n        let drawOrderToSetupIndex = this.drawOrders[Timeline.search1(this.frames, time)];\r\n        if (!drawOrderToSetupIndex)\r\n            Utils.arrayCopy(skeleton.slots, 0, skeleton.drawOrder, 0, skeleton.slots.length);\r\n        else {\r\n            let drawOrder: Array<Slot> = skeleton.drawOrder;\r\n            let slots: Array<Slot> = skeleton.slots;\r\n            for (let i = 0, n = drawOrderToSetupIndex.length; i < n; i++)\r\n                drawOrder[i] = slots[drawOrderToSetupIndex[i]];\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes an IK constraint's {@link IkConstraint#mix}, {@link IkConstraint#softness},\r\n * {@link IkConstraint#bendDirection}, {@link IkConstraint#stretch}, and {@link IkConstraint#compress}.\r\n * @public\r\n * */\r\nexport class IkConstraintTimeline extends CurveTimeline {\r\n    /** The index of the IK constraint slot in {@link Skeleton#ikConstraints} that will be changed. */\r\n    ikConstraintIndex: number;\r\n\r\n    constructor (frameCount: number, bezierCount: number, ikConstraintIndex: number) {\r\n        super(frameCount, bezierCount, [\r\n            Property.ikConstraint + \"|\" + ikConstraintIndex\r\n        ]);\r\n        this.ikConstraintIndex = ikConstraintIndex;\r\n    }\r\n\r\n    getFrameEntries () {\r\n        return 6/*ENTRIES*/;\r\n    }\r\n\r\n    /** Sets the time in seconds, mix, softness, bend direction, compress, and stretch for the specified key frame. */\r\n    setFrame (frame: number, time: number, mix: number, softness: number, bendDirection: number, compress: boolean, stretch: boolean) {\r\n        frame *= 6/*ENTRIES*/;\r\n        this.frames[frame] = time;\r\n        this.frames[frame + 1/*MIX*/] = mix;\r\n        this.frames[frame + 2/*SOFTNESS*/] = softness;\r\n        this.frames[frame + 3/*BEND_DIRECTION*/] = bendDirection;\r\n        this.frames[frame + 4/*COMPRESS*/] = compress ? 1 : 0;\r\n        this.frames[frame + 5/*STRETCH*/] = stretch ? 1 : 0;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let constraint: IkConstraint = skeleton.ikConstraints[this.ikConstraintIndex];\r\n        if (!constraint.active) return;\r\n\r\n        let frames = this.frames;\r\n        if (time < frames[0]) {\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    constraint.mix = constraint.data.mix;\r\n                    constraint.softness = constraint.data.softness;\r\n                    constraint.bendDirection = constraint.data.bendDirection;\r\n                    constraint.compress = constraint.data.compress;\r\n                    constraint.stretch = constraint.data.stretch;\r\n                    return;\r\n                case MixBlend.first:\r\n                    constraint.mix += (constraint.data.mix - constraint.mix) * alpha;\r\n                    constraint.softness += (constraint.data.softness - constraint.softness) * alpha;\r\n                    constraint.bendDirection = constraint.data.bendDirection;\r\n                    constraint.compress = constraint.data.compress;\r\n                    constraint.stretch = constraint.data.stretch;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let mix = 0, softness = 0;\r\n        let i = Timeline.search(frames, time, 6/*ENTRIES*/)\r\n        let curveType = this.curves[i / 6/*ENTRIES*/];\r\n        switch (curveType) {\r\n            case 0/*LINEAR*/:\r\n                let before = frames[i];\r\n                mix = frames[i + 1/*MIX*/];\r\n                softness = frames[i + 2/*SOFTNESS*/];\r\n                let t = (time - before) / (frames[i + 6/*ENTRIES*/] - before);\r\n                mix += (frames[i + 6/*ENTRIES*/ + 1/*MIX*/] - mix) * t;\r\n                softness += (frames[i + 6/*ENTRIES*/ + 2/*SOFTNESS*/] - softness) * t;\r\n                break;\r\n            case 1/*STEPPED*/:\r\n                mix = frames[i + 1/*MIX*/];\r\n                softness = frames[i + 2/*SOFTNESS*/];\r\n                break;\r\n            default:\r\n                mix = this.getBezierValue(time, i, 1/*MIX*/, curveType - 2/*BEZIER*/);\r\n                softness = this.getBezierValue(time, i, 2/*SOFTNESS*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\r\n        }\r\n\r\n        if (blend == MixBlend.setup) {\r\n            constraint.mix = constraint.data.mix + (mix - constraint.data.mix) * alpha;\r\n            constraint.softness = constraint.data.softness + (softness - constraint.data.softness) * alpha;\r\n\r\n            if (direction == MixDirection.mixOut) {\r\n                constraint.bendDirection = constraint.data.bendDirection;\r\n                constraint.compress = constraint.data.compress;\r\n                constraint.stretch = constraint.data.stretch;\r\n            } else {\r\n                constraint.bendDirection = frames[i + 3/*BEND_DIRECTION*/];\r\n                constraint.compress = frames[i + 4/*COMPRESS*/] != 0;\r\n                constraint.stretch = frames[i + 5/*STRETCH*/] != 0;\r\n            }\r\n        } else {\r\n            constraint.mix += (mix - constraint.mix) * alpha;\r\n            constraint.softness += (softness - constraint.softness) * alpha;\r\n            if (direction == MixDirection.mixIn) {\r\n                constraint.bendDirection = frames[i + 3/*BEND_DIRECTION*/];\r\n                constraint.compress = frames[i + 4/*COMPRESS*/] != 0;\r\n                constraint.stretch = frames[i + 5/*STRETCH*/] != 0;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes a transform constraint's {@link TransformConstraint#rotateMix}, {@link TransformConstraint#translateMix},\r\n * {@link TransformConstraint#scaleMix}, and {@link TransformConstraint#shearMix}.\r\n * @public\r\n * */\r\nexport class TransformConstraintTimeline extends CurveTimeline {\r\n    /** The index of the transform constraint slot in {@link Skeleton#transformConstraints} that will be changed. */\r\n    transformConstraintIndex: number;\r\n\r\n    constructor (frameCount: number, bezierCount: number, transformConstraintIndex: number) {\r\n        super(frameCount, bezierCount, [\r\n            Property.transformConstraint + \"|\" + transformConstraintIndex\r\n        ]);\r\n        this.transformConstraintIndex = transformConstraintIndex;\r\n    }\r\n\r\n    getFrameEntries () {\r\n        return 7/*ENTRIES*/;\r\n    }\r\n\r\n    /** The time in seconds, rotate mix, translate mix, scale mix, and shear mix for the specified key frame. */\r\n    setFrame (frame: number, time: number, mixRotate: number, mixX: number, mixY: number, mixScaleX: number, mixScaleY: number,\r\n              mixShearY: number) {\r\n        let frames = this.frames;\r\n        frame *= 7/*ENTRIES*/;\r\n        frames[frame] = time;\r\n        frames[frame + 1/*ROTATE*/] = mixRotate;\r\n        frames[frame + 2/*X*/] = mixX;\r\n        frames[frame + 3/*Y*/] = mixY;\r\n        frames[frame + 4/*SCALEX*/] = mixScaleX;\r\n        frames[frame + 5/*SCALEY*/] = mixScaleY;\r\n        frames[frame + 6/*SHEARY*/] = mixShearY;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let constraint: TransformConstraint = skeleton.transformConstraints[this.transformConstraintIndex];\r\n        if (!constraint.active) return;\r\n\r\n        let frames = this.frames;\r\n        if (time < frames[0]) {\r\n            let data = constraint.data;\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    constraint.mixRotate = data.mixRotate;\r\n                    constraint.mixX = data.mixX;\r\n                    constraint.mixY = data.mixY;\r\n                    constraint.mixScaleX = data.mixScaleX;\r\n                    constraint.mixScaleY = data.mixScaleY;\r\n                    constraint.mixShearY = data.mixShearY;\r\n                    return;\r\n                case MixBlend.first:\r\n                    constraint.mixRotate += (data.mixRotate - constraint.mixRotate) * alpha;\r\n                    constraint.mixX += (data.mixX - constraint.mixX) * alpha;\r\n                    constraint.mixY += (data.mixY - constraint.mixY) * alpha;\r\n                    constraint.mixScaleX += (data.mixScaleX - constraint.mixScaleX) * alpha;\r\n                    constraint.mixScaleY += (data.mixScaleY - constraint.mixScaleY) * alpha;\r\n                    constraint.mixShearY += (data.mixShearY - constraint.mixShearY) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let rotate, x, y, scaleX, scaleY, shearY;\r\n        let i = Timeline.search(frames, time, 7/*ENTRIES*/);\r\n        let curveType = this.curves[i / 7/*ENTRIES*/];\r\n        switch (curveType) {\r\n            case 0/*LINEAR*/:\r\n                let before = frames[i];\r\n                rotate = frames[i + 1/*ROTATE*/];\r\n                x = frames[i + 2/*X*/];\r\n                y = frames[i + 3/*Y*/];\r\n                scaleX = frames[i + 4/*SCALEX*/];\r\n                scaleY = frames[i + 5/*SCALEY*/];\r\n                shearY = frames[i + 6/*SHEARY*/];\r\n                let t = (time - before) / (frames[i + 7/*ENTRIES*/] - before);\r\n                rotate += (frames[i + 7/*ENTRIES*/ + 1/*ROTATE*/] - rotate) * t;\r\n                x += (frames[i + 7/*ENTRIES*/ + 2/*X*/] - x) * t;\r\n                y += (frames[i + 7/*ENTRIES*/ + 3/*Y*/] - y) * t;\r\n                scaleX += (frames[i + 7/*ENTRIES*/ + 4/*SCALEX*/] - scaleX) * t;\r\n                scaleY += (frames[i + 7/*ENTRIES*/ + 5/*SCALEY*/] - scaleY) * t;\r\n                shearY += (frames[i + 7/*ENTRIES*/ + 6/*SHEARY*/] - shearY) * t;\r\n                break;\r\n            case 1/*STEPPED*/:\r\n                rotate = frames[i + 1/*ROTATE*/];\r\n                x = frames[i + 2/*X*/];\r\n                y = frames[i + 3/*Y*/];\r\n                scaleX = frames[i + 4/*SCALEX*/];\r\n                scaleY = frames[i + 5/*SCALEY*/];\r\n                shearY = frames[i + 6/*SHEARY*/];\r\n                break;\r\n            default:\r\n                rotate = this.getBezierValue(time, i, 1/*ROTATE*/, curveType - 2/*BEZIER*/);\r\n                x = this.getBezierValue(time, i, 2/*X*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\r\n                y = this.getBezierValue(time, i, 3/*Y*/, curveType + 18/*BEZIER_SIZE*/ * 2 - 2/*BEZIER*/);\r\n                scaleX = this.getBezierValue(time, i, 4/*SCALEX*/, curveType + 18/*BEZIER_SIZE*/ * 3 - 2/*BEZIER*/);\r\n                scaleY = this.getBezierValue(time, i, 5/*SCALEY*/, curveType + 18/*BEZIER_SIZE*/ * 4 - 2/*BEZIER*/);\r\n                shearY = this.getBezierValue(time, i, 6/*SHEARY*/, curveType + 18/*BEZIER_SIZE*/ * 5 - 2/*BEZIER*/);\r\n        }\r\n\r\n        if (blend == MixBlend.setup) {\r\n            let data = constraint.data;\r\n            constraint.mixRotate = data.mixRotate + (rotate - data.mixRotate) * alpha;\r\n            constraint.mixX = data.mixX + (x - data.mixX) * alpha;\r\n            constraint.mixY = data.mixY + (y - data.mixY) * alpha;\r\n            constraint.mixScaleX = data.mixScaleX + (scaleX - data.mixScaleX) * alpha;\r\n            constraint.mixScaleY = data.mixScaleY + (scaleY - data.mixScaleY) * alpha;\r\n            constraint.mixShearY = data.mixShearY + (shearY - data.mixShearY) * alpha;\r\n        } else {\r\n            constraint.mixRotate += (rotate - constraint.mixRotate) * alpha;\r\n            constraint.mixX += (x - constraint.mixX) * alpha;\r\n            constraint.mixY += (y - constraint.mixY) * alpha;\r\n            constraint.mixScaleX += (scaleX - constraint.mixScaleX) * alpha;\r\n            constraint.mixScaleY += (scaleY - constraint.mixScaleY) * alpha;\r\n            constraint.mixShearY += (shearY - constraint.mixShearY) * alpha;\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes a path constraint's {@link PathConstraint#position}.\r\n * @public\r\n * */\r\nexport class PathConstraintPositionTimeline extends CurveTimeline1 {\r\n    /** The index of the path constraint slot in {@link Skeleton#pathConstraints} that will be changed. */\r\n    pathConstraintIndex: number;\r\n\r\n    constructor (frameCount: number, bezierCount: number, pathConstraintIndex: number) {\r\n        super(frameCount, bezierCount, Property.pathConstraintPosition + \"|\" + pathConstraintIndex);\r\n        this.pathConstraintIndex = pathConstraintIndex;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let constraint: PathConstraint = skeleton.pathConstraints[this.pathConstraintIndex];\r\n        if (!constraint.active) return;\r\n\r\n        let frames = this.frames;\r\n        if (time < frames[0]) {\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    constraint.position = constraint.data.position;\r\n                    return;\r\n                case MixBlend.first:\r\n                    constraint.position += (constraint.data.position - constraint.position) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let position = this.getCurveValue(time);\r\n\r\n        if (blend == MixBlend.setup)\r\n            constraint.position = constraint.data.position + (position - constraint.data.position) * alpha;\r\n        else\r\n            constraint.position += (position - constraint.position) * alpha;\r\n    }\r\n}\r\n\r\n/** Changes a path constraint's {@link PathConstraint#spacing}.\r\n * @public\r\n * */\r\nexport class PathConstraintSpacingTimeline extends CurveTimeline1 {\r\n    /** The index of the path constraint slot in {@link Skeleton#getPathConstraints()} that will be changed. */\r\n    pathConstraintIndex = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, pathConstraintIndex: number) {\r\n        super(frameCount, bezierCount, Property.pathConstraintSpacing + \"|\" + pathConstraintIndex);\r\n        this.pathConstraintIndex = pathConstraintIndex;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let constraint: PathConstraint = skeleton.pathConstraints[this.pathConstraintIndex];\r\n        if (!constraint.active) return;\r\n\r\n        let frames = this.frames;\r\n        if (time < frames[0]) {\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    constraint.spacing = constraint.data.spacing;\r\n                    return;\r\n                case MixBlend.first:\r\n                    constraint.spacing += (constraint.data.spacing - constraint.spacing) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let spacing = this.getCurveValue(time);\r\n\r\n        if (blend == MixBlend.setup)\r\n            constraint.spacing = constraint.data.spacing + (spacing - constraint.data.spacing) * alpha;\r\n        else\r\n            constraint.spacing += (spacing - constraint.spacing) * alpha;\r\n    }\r\n}\r\n\r\n/** Changes a transform constraint's {@link PathConstraint#getMixRotate()}, {@link PathConstraint#getMixX()}, and\r\n * {@link PathConstraint#getMixY()}.\r\n * @public\r\n * */\r\nexport class PathConstraintMixTimeline extends CurveTimeline {\r\n    /** The index of the path constraint slot in {@link Skeleton#getPathConstraints()} that will be changed. */\r\n    pathConstraintIndex = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, pathConstraintIndex: number) {\r\n        super(frameCount, bezierCount, [\r\n            Property.pathConstraintMix + \"|\" + pathConstraintIndex\r\n        ]);\r\n        this.pathConstraintIndex = pathConstraintIndex;\r\n    }\r\n\r\n    getFrameEntries () {\r\n        return 4/*ENTRIES*/;\r\n    }\r\n\r\n    setFrame (frame: number, time: number, mixRotate: number, mixX: number, mixY: number) {\r\n        let frames = this.frames;\r\n        frame <<= 2;\r\n        frames[frame] = time;\r\n        frames[frame + 1/*ROTATE*/] = mixRotate;\r\n        frames[frame + 2/*X*/] = mixX;\r\n        frames[frame + 3/*Y*/] = mixY;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let constraint: PathConstraint = skeleton.pathConstraints[this.pathConstraintIndex];\r\n        if (!constraint.active) return;\r\n\r\n        let frames = this.frames;\r\n        if (time < frames[0]) {\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    constraint.mixRotate = constraint.data.mixRotate;\r\n                    constraint.mixX = constraint.data.mixX;\r\n                    constraint.mixY = constraint.data.mixY;\r\n                    return;\r\n                case MixBlend.first:\r\n                    constraint.mixRotate += (constraint.data.mixRotate - constraint.mixRotate) * alpha;\r\n                    constraint.mixX += (constraint.data.mixX - constraint.mixX) * alpha;\r\n                    constraint.mixY += (constraint.data.mixY - constraint.mixY) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let rotate, x, y;\r\n        let i = Timeline.search(frames, time, 4/*ENTRIES*/);\r\n        let curveType = this.curves[i >> 2];\r\n        switch (curveType) {\r\n            case 0/*LINEAR*/:\r\n                let before = frames[i];\r\n                rotate = frames[i + 1/*ROTATE*/];\r\n                x = frames[i + 2/*X*/];\r\n                y = frames[i + 3/*Y*/];\r\n                let t = (time - before) / (frames[i + 4/*ENTRIES*/] - before);\r\n                rotate += (frames[i + 4/*ENTRIES*/ + 1/*ROTATE*/] - rotate) * t;\r\n                x += (frames[i + 4/*ENTRIES*/ + 2/*X*/] - x) * t;\r\n                y += (frames[i + 4/*ENTRIES*/ + 3/*Y*/] - y) * t;\r\n                break;\r\n            case 1/*STEPPED*/:\r\n                rotate = frames[i + 1/*ROTATE*/];\r\n                x = frames[i + 2/*X*/];\r\n                y = frames[i + 3/*Y*/];\r\n                break;\r\n            default:\r\n                rotate = this.getBezierValue(time, i, 1/*ROTATE*/, curveType - 2/*BEZIER*/);\r\n                x = this.getBezierValue(time, i, 2/*X*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\r\n                y = this.getBezierValue(time, i, 3/*Y*/, curveType + 18/*BEZIER_SIZE*/ * 2 - 2/*BEZIER*/);\r\n        }\r\n\r\n        if (blend == MixBlend.setup) {\r\n            let data = constraint.data;\r\n            constraint.mixRotate = data.mixRotate + (rotate - data.mixRotate) * alpha;\r\n            constraint.mixX = data.mixX + (x - data.mixX) * alpha;\r\n            constraint.mixY = data.mixY + (y - data.mixY) * alpha;\r\n        } else {\r\n            constraint.mixRotate += (rotate - constraint.mixRotate) * alpha;\r\n            constraint.mixX += (x - constraint.mixX) * alpha;\r\n            constraint.mixY += (y - constraint.mixY) * alpha;\r\n        }\r\n    }\r\n}\r\n","import {IAnimationState, ITrackEntry, MathUtils, Pool, StringSet, Utils} from \"@pixi-spine/base\";\r\nimport {\r\n    Animation,\r\n    AttachmentTimeline,\r\n    DrawOrderTimeline,\r\n    EventTimeline,\r\n    MixBlend,\r\n    MixDirection,\r\n    RotateTimeline, Timeline\r\n} from './Animation';\r\nimport {AnimationStateData} from \"./AnimationStateData\";\r\nimport {Event} from './Event';\r\nimport type {Skeleton} from \"./Skeleton\";\r\nimport type {Slot} from \"./Slot\";\r\n\r\n/** Applies animations over time, queues animations for later playback, mixes (crossfading) between animations, and applies\r\n * multiple animations on top of each other (layering).\r\n *\r\n * See [Applying Animations](http://esotericsoftware.com/spine-applying-animations/) in the Spine Runtimes Guide.\r\n * @public\r\n * */\r\nexport class AnimationState implements IAnimationState {\r\n    private static emptyAnimation (): Animation {\r\n        if (!_emptyAnimation) _emptyAnimation = new Animation(\"<empty>\", [], 0);\r\n        return _emptyAnimation;\r\n    }\r\n\r\n    /** The AnimationStateData to look up mix durations. */\r\n    data: AnimationStateData;\r\n\r\n    /** The list of tracks that currently have animations, which may contain null entries. */\r\n    tracks = new Array<TrackEntry>();\r\n\r\n    /** Multiplier for the delta time when the animation state is updated, causing time for all animations and mixes to play slower\r\n     * or faster. Defaults to 1.\r\n     *\r\n     * See TrackEntry {@link TrackEntry#timeScale} for affecting a single animation. */\r\n    timeScale = 1;\r\n    unkeyedState = 0;\r\n\r\n    events = new Array<Event>();\r\n    listeners = new Array<AnimationStateListener>();\r\n    queue = new EventQueue(this);\r\n    propertyIDs = new StringSet();\r\n    animationsChanged = false;\r\n\r\n    trackEntryPool = new Pool<TrackEntry>(() => new TrackEntry());\r\n\r\n    constructor (data: AnimationStateData) {\r\n        this.data = data;\r\n    }\r\n\r\n    /** Increments each track entry {@link TrackEntry#trackTime()}, setting queued animations as current if needed. */\r\n    update (delta: number) {\r\n        delta *= this.timeScale;\r\n        let tracks = this.tracks;\r\n        for (let i = 0, n = tracks.length; i < n; i++) {\r\n            let current = tracks[i];\r\n            if (!current) continue;\r\n\r\n            current.animationLast = current.nextAnimationLast;\r\n            current.trackLast = current.nextTrackLast;\r\n\r\n            let currentDelta = delta * current.timeScale;\r\n\r\n            if (current.delay > 0) {\r\n                current.delay -= currentDelta;\r\n                if (current.delay > 0) continue;\r\n                currentDelta = -current.delay;\r\n                current.delay = 0;\r\n            }\r\n\r\n            let next = current.next;\r\n            if (next) {\r\n                // When the next entry's delay is passed, change to the next entry, preserving leftover time.\r\n                let nextTime = current.trackLast - next.delay;\r\n                if (nextTime >= 0) {\r\n                    next.delay = 0;\r\n                    next.trackTime += current.timeScale == 0 ? 0 : (nextTime / current.timeScale + delta) * next.timeScale;\r\n                    current.trackTime += currentDelta;\r\n                    this.setCurrent(i, next, true);\r\n                    while (next.mixingFrom) {\r\n                        next.mixTime += delta;\r\n                        next = next.mixingFrom;\r\n                    }\r\n                    continue;\r\n                }\r\n            } else if (current.trackLast >= current.trackEnd && !current.mixingFrom) {\r\n                tracks[i] = null;\r\n                this.queue.end(current);\r\n                this.clearNext(current);\r\n                continue;\r\n            }\r\n            if (current.mixingFrom && this.updateMixingFrom(current, delta)) {\r\n                // End mixing from entries once all have completed.\r\n                let from = current.mixingFrom;\r\n                current.mixingFrom = null;\r\n                if (from) from.mixingTo = null;\r\n                while (from) {\r\n                    this.queue.end(from);\r\n                    from = from.mixingFrom;\r\n                }\r\n            }\r\n\r\n            current.trackTime += currentDelta;\r\n        }\r\n\r\n        this.queue.drain();\r\n    }\r\n\r\n    /** Returns true when all mixing from entries are complete. */\r\n    updateMixingFrom (to: TrackEntry, delta: number): boolean {\r\n        let from = to.mixingFrom;\r\n        if (!from) return true;\r\n\r\n        let finished = this.updateMixingFrom(from, delta);\r\n\r\n        from.animationLast = from.nextAnimationLast;\r\n        from.trackLast = from.nextTrackLast;\r\n\r\n        // Require mixTime > 0 to ensure the mixing from entry was applied at least once.\r\n        if (to.mixTime > 0 && to.mixTime >= to.mixDuration) {\r\n            // Require totalAlpha == 0 to ensure mixing is complete, unless mixDuration == 0 (the transition is a single frame).\r\n            if (from.totalAlpha == 0 || to.mixDuration == 0) {\r\n                to.mixingFrom = from.mixingFrom;\r\n                if (from.mixingFrom) from.mixingFrom.mixingTo = to;\r\n                to.interruptAlpha = from.interruptAlpha;\r\n                this.queue.end(from);\r\n            }\r\n            return finished;\r\n        }\r\n\r\n        from.trackTime += delta * from.timeScale;\r\n        to.mixTime += delta;\r\n        return false;\r\n    }\r\n\r\n    /** Poses the skeleton using the track entry animations. There are no side effects other than invoking listeners, so the\r\n     * animation state can be applied to multiple skeletons to pose them identically.\r\n     * @returns True if any animations were applied. */\r\n    apply (skeleton: Skeleton) : boolean {\r\n        if (!skeleton) throw new Error(\"skeleton cannot be null.\");\r\n        if (this.animationsChanged) this._animationsChanged();\r\n\r\n        let events = this.events;\r\n        let tracks = this.tracks;\r\n        let applied = false;\r\n\r\n        for (let i = 0, n = tracks.length; i < n; i++) {\r\n            let current = tracks[i];\r\n            if (!current || current.delay > 0) continue;\r\n            applied = true;\r\n            let blend: MixBlend = i == 0 ? MixBlend.first : current.mixBlend;\r\n\r\n            // Apply mixing from entries first.\r\n            let mix = current.alpha;\r\n            if (current.mixingFrom)\r\n                mix *= this.applyMixingFrom(current, skeleton, blend);\r\n            else if (current.trackTime >= current.trackEnd && !current.next)\r\n                mix = 0;\r\n\r\n            // Apply current entry.\r\n            let animationLast = current.animationLast, animationTime = current.getAnimationTime(), applyTime = animationTime;\r\n            let applyEvents = events;\r\n            if (current.reverse) {\r\n                applyTime = current.animation.duration - applyTime;\r\n                applyEvents = null;\r\n            }\r\n            let timelines = current.animation.timelines;\r\n            let timelineCount = timelines.length;\r\n            if ((i == 0 && mix == 1) || blend == MixBlend.add) {\r\n                for (let ii = 0; ii < timelineCount; ii++) {\r\n                    // Fixes issue #302 on IOS9 where mix, blend sometimes became undefined and caused assets\r\n                    // to sometimes stop rendering when using color correction, as their RGBA values become NaN.\r\n                    // (https://github.com/pixijs/pixi-spine/issues/302)\r\n                    Utils.webkit602BugfixHelper(mix, blend);\r\n                    var timeline = timelines[ii];\r\n                    if (timeline instanceof AttachmentTimeline)\r\n                        this.applyAttachmentTimeline(timeline, skeleton, applyTime, blend, true);\r\n                    else\r\n                        timeline.apply(skeleton, animationLast, applyTime, applyEvents, mix, blend, MixDirection.mixIn);\r\n                }\r\n            } else {\r\n                let timelineMode = current.timelineMode;\r\n\r\n                let firstFrame = current.timelinesRotation.length != timelineCount << 1;\r\n                if (firstFrame) current.timelinesRotation.length = timelineCount << 1;\r\n\r\n                for (let ii = 0; ii < timelineCount; ii++) {\r\n                    let timeline = timelines[ii];\r\n                    let timelineBlend = timelineMode[ii] == SUBSEQUENT ? blend : MixBlend.setup;\r\n                    if (timeline instanceof RotateTimeline) {\r\n                        this.applyRotateTimeline(timeline, skeleton, applyTime, mix, timelineBlend, current.timelinesRotation, ii << 1, firstFrame);\r\n                    } else if (timeline instanceof AttachmentTimeline) {\r\n                        this.applyAttachmentTimeline(timeline, skeleton, applyTime, blend, true);\r\n                    } else {\r\n                        // This fixes the WebKit 602 specific issue described at http://esotericsoftware.com/forum/iOS-10-disappearing-graphics-10109\r\n                        Utils.webkit602BugfixHelper(mix, blend);\r\n                        timeline.apply(skeleton, animationLast, applyTime, applyEvents, mix, timelineBlend, MixDirection.mixIn);\r\n                    }\r\n                }\r\n            }\r\n            this.queueEvents(current, animationTime);\r\n            events.length = 0;\r\n            current.nextAnimationLast = animationTime;\r\n            current.nextTrackLast = current.trackTime;\r\n        }\r\n\r\n        // Set slots attachments to the setup pose, if needed. This occurs if an animation that is mixing out sets attachments so\r\n        // subsequent timelines see any deform, but the subsequent timelines don't set an attachment (eg they are also mixing out or\r\n        // the time is before the first key).\r\n        var setupState = this.unkeyedState + SETUP;\r\n        var slots = skeleton.slots;\r\n        for (var i = 0, n = skeleton.slots.length; i < n; i++) {\r\n            var slot = slots[i];\r\n            if (slot.attachmentState == setupState) {\r\n                var attachmentName = slot.data.attachmentName;\r\n                slot.setAttachment(!attachmentName ? null : skeleton.getAttachment(slot.data.index, attachmentName));\r\n            }\r\n        }\r\n        this.unkeyedState += 2; // Increasing after each use avoids the need to reset attachmentState for every slot.\r\n\r\n        this.queue.drain();\r\n        return applied;\r\n    }\r\n\r\n    applyMixingFrom (to: TrackEntry, skeleton: Skeleton, blend: MixBlend) {\r\n        let from = to.mixingFrom;\r\n        if (from.mixingFrom) this.applyMixingFrom(from, skeleton, blend);\r\n\r\n        let mix = 0;\r\n        if (to.mixDuration == 0) { // Single frame mix to undo mixingFrom changes.\r\n            mix = 1;\r\n            if (blend == MixBlend.first) blend = MixBlend.setup;\r\n        } else {\r\n            mix = to.mixTime / to.mixDuration;\r\n            if (mix > 1) mix = 1;\r\n            if (blend != MixBlend.first) blend = from.mixBlend;\r\n        }\r\n\r\n        let attachments = mix < from.attachmentThreshold, drawOrder = mix < from.drawOrderThreshold;\r\n        let timelines = from.animation.timelines;\r\n        let timelineCount = timelines.length;\r\n        let alphaHold = from.alpha * to.interruptAlpha, alphaMix = alphaHold * (1 - mix);\r\n        let animationLast = from.animationLast, animationTime = from.getAnimationTime(), applyTime = animationTime;\r\n        let events = null;\r\n        if (from.reverse)\r\n            applyTime = from.animation.duration - applyTime;\r\n        else if (mix < from.eventThreshold)\r\n            events = this.events;\r\n\r\n        if (blend == MixBlend.add) {\r\n            for (let i = 0; i < timelineCount; i++)\r\n                timelines[i].apply(skeleton, animationLast, applyTime, events, alphaMix, blend, MixDirection.mixOut);\r\n        } else {\r\n            let timelineMode = from.timelineMode;\r\n            let timelineHoldMix = from.timelineHoldMix;\r\n\r\n            let firstFrame = from.timelinesRotation.length != timelineCount << 1;\r\n            if (firstFrame) from.timelinesRotation.length = timelineCount << 1;\r\n\r\n            from.totalAlpha = 0;\r\n            for (let i = 0; i < timelineCount; i++) {\r\n                let timeline = timelines[i];\r\n                let direction = MixDirection.mixOut;\r\n                let timelineBlend: MixBlend;\r\n                let alpha = 0;\r\n                switch (timelineMode[i]) {\r\n                    case SUBSEQUENT:\r\n                        if (!drawOrder && timeline instanceof DrawOrderTimeline) continue;\r\n                        timelineBlend = blend;\r\n                        alpha = alphaMix;\r\n                        break;\r\n                    case FIRST:\r\n                        timelineBlend = MixBlend.setup;\r\n                        alpha = alphaMix;\r\n                        break;\r\n                    case HOLD_SUBSEQUENT:\r\n                        timelineBlend = blend;\r\n                        alpha = alphaHold;\r\n                        break;\r\n                    case HOLD_FIRST:\r\n                        timelineBlend = MixBlend.setup;\r\n                        alpha = alphaHold;\r\n                        break;\r\n                    default:\r\n                        timelineBlend = MixBlend.setup;\r\n                        let holdMix = timelineHoldMix[i];\r\n                        alpha = alphaHold * Math.max(0, 1 - holdMix.mixTime / holdMix.mixDuration);\r\n                        break;\r\n                }\r\n                from.totalAlpha += alpha;\r\n\r\n                if (timeline instanceof RotateTimeline)\r\n                    this.applyRotateTimeline(timeline, skeleton, applyTime, alpha, timelineBlend, from.timelinesRotation, i << 1, firstFrame);\r\n                else if (timeline instanceof AttachmentTimeline)\r\n                    this.applyAttachmentTimeline(timeline, skeleton, applyTime, timelineBlend, attachments);\r\n                else {\r\n                    // This fixes the WebKit 602 specific issue described at http://esotericsoftware.com/forum/iOS-10-disappearing-graphics-10109\r\n                    Utils.webkit602BugfixHelper(alpha, blend);\r\n                    if (drawOrder && timeline instanceof DrawOrderTimeline && timelineBlend == MixBlend.setup)\r\n                        direction = MixDirection.mixIn;\r\n                    timeline.apply(skeleton, animationLast, applyTime, events, alpha, timelineBlend, direction);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (to.mixDuration > 0) this.queueEvents(from, animationTime);\r\n        this.events.length = 0;\r\n        from.nextAnimationLast = animationTime;\r\n        from.nextTrackLast = from.trackTime;\r\n\r\n        return mix;\r\n    }\r\n\r\n    applyAttachmentTimeline (timeline: AttachmentTimeline, skeleton: Skeleton, time: number, blend: MixBlend, attachments: boolean) {\r\n        var slot = skeleton.slots[timeline.slotIndex];\r\n        if (!slot.bone.active) return;\r\n\r\n        if (time < timeline.frames[0]) { // Time is before first frame.\r\n            if (blend == MixBlend.setup || blend == MixBlend.first)\r\n                this.setAttachment(skeleton, slot, slot.data.attachmentName, attachments);\r\n        } else\r\n            this.setAttachment(skeleton, slot, timeline.attachmentNames[Timeline.search1(timeline.frames, time)], attachments);\r\n\r\n        // If an attachment wasn't set (ie before the first frame or attachments is false), set the setup attachment later.\r\n        if (slot.attachmentState <= this.unkeyedState) slot.attachmentState = this.unkeyedState + SETUP;\r\n    }\r\n\r\n    setAttachment (skeleton: Skeleton, slot: Slot, attachmentName: string, attachments: boolean) {\r\n        slot.setAttachment(!attachmentName ? null : skeleton.getAttachment(slot.data.index, attachmentName));\r\n        if (attachments) slot.attachmentState = this.unkeyedState + CURRENT;\r\n    }\r\n\r\n    applyRotateTimeline (timeline: RotateTimeline, skeleton: Skeleton, time: number, alpha: number, blend: MixBlend,\r\n                         timelinesRotation: Array<number>, i: number, firstFrame: boolean) {\r\n\r\n        if (firstFrame) timelinesRotation[i] = 0;\r\n\r\n        if (alpha == 1) {\r\n            timeline.apply(skeleton, 0, time, null, 1, blend, MixDirection.mixIn);\r\n            return;\r\n        }\r\n\r\n        let bone = skeleton.bones[timeline.boneIndex];\r\n        if (!bone.active) return;\r\n        let frames = timeline.frames;\r\n        let r1 = 0, r2 = 0;\r\n        if (time < frames[0]) {\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    bone.rotation = bone.data.rotation;\r\n                default:\r\n                    return;\r\n                case MixBlend.first:\r\n                    r1 = bone.rotation;\r\n                    r2 = bone.data.rotation;\r\n            }\r\n        } else {\r\n            r1 = blend == MixBlend.setup ? bone.data.rotation : bone.rotation;\r\n            r2 = bone.data.rotation + timeline.getCurveValue(time);\r\n        }\r\n\r\n        // Mix between rotations using the direction of the shortest route on the first frame while detecting crosses.\r\n        let total = 0, diff = r2 - r1;\r\n        diff -= (16384 - ((16384.499999999996 - diff / 360) | 0)) * 360;\r\n        if (diff == 0) {\r\n            total = timelinesRotation[i];\r\n        } else {\r\n            let lastTotal = 0, lastDiff = 0;\r\n            if (firstFrame) {\r\n                lastTotal = 0;\r\n                lastDiff = diff;\r\n            } else {\r\n                lastTotal = timelinesRotation[i]; // Angle and direction of mix, including loops.\r\n                lastDiff = timelinesRotation[i + 1]; // Difference between bones.\r\n            }\r\n            let current = diff > 0, dir = lastTotal >= 0;\r\n            // Detect cross at 0 (not 180).\r\n            if (MathUtils.signum(lastDiff) != MathUtils.signum(diff) && Math.abs(lastDiff) <= 90) {\r\n                // A cross after a 360 rotation is a loop.\r\n                if (Math.abs(lastTotal) > 180) lastTotal += 360 * MathUtils.signum(lastTotal);\r\n                dir = current;\r\n            }\r\n            total = diff + lastTotal - lastTotal % 360; // Store loops as part of lastTotal.\r\n            if (dir != current) total += 360 * MathUtils.signum(lastTotal);\r\n            timelinesRotation[i] = total;\r\n        }\r\n        timelinesRotation[i + 1] = diff;\r\n        bone.rotation = r1 + total * alpha;\r\n    }\r\n\r\n    queueEvents (entry: TrackEntry, animationTime: number) {\r\n        let animationStart = entry.animationStart, animationEnd = entry.animationEnd;\r\n        let duration = animationEnd - animationStart;\r\n        let trackLastWrapped = entry.trackLast % duration;\r\n\r\n        // Queue events before complete.\r\n        let events = this.events;\r\n        let i = 0, n = events.length;\r\n        for (; i < n; i++) {\r\n            let event = events[i];\r\n            if (event.time < trackLastWrapped) break;\r\n            if (event.time > animationEnd) continue; // Discard events outside animation start/end.\r\n            this.queue.event(entry, event);\r\n        }\r\n\r\n        // Queue complete if completed a loop iteration or the animation.\r\n        let complete = false;\r\n        if (entry.loop)\r\n            complete = duration == 0 || trackLastWrapped > entry.trackTime % duration;\r\n        else\r\n            complete = animationTime >= animationEnd && entry.animationLast < animationEnd;\r\n        if (complete) this.queue.complete(entry);\r\n\r\n        // Queue events after complete.\r\n        for (; i < n; i++) {\r\n            let event = events[i];\r\n            if (event.time < animationStart) continue; // Discard events outside animation start/end.\r\n            this.queue.event(entry, event);\r\n        }\r\n    }\r\n\r\n    /** Removes all animations from all tracks, leaving skeletons in their current pose.\r\n     *\r\n     * It may be desired to use {@link AnimationState#setEmptyAnimation()} to mix the skeletons back to the setup pose,\r\n     * rather than leaving them in their current pose. */\r\n    clearTracks () {\r\n        let oldDrainDisabled = this.queue.drainDisabled;\r\n        this.queue.drainDisabled = true;\r\n        for (let i = 0, n = this.tracks.length; i < n; i++)\r\n            this.clearTrack(i);\r\n        this.tracks.length = 0;\r\n        this.queue.drainDisabled = oldDrainDisabled;\r\n        this.queue.drain();\r\n    }\r\n\r\n    /** Removes all animations from the track, leaving skeletons in their current pose.\r\n     *\r\n     * It may be desired to use {@link AnimationState#setEmptyAnimation()} to mix the skeletons back to the setup pose,\r\n     * rather than leaving them in their current pose. */\r\n    clearTrack (trackIndex: number) {\r\n        if (trackIndex >= this.tracks.length) return;\r\n        let current = this.tracks[trackIndex];\r\n        if (!current) return;\r\n\r\n        this.queue.end(current);\r\n\r\n        this.clearNext(current);\r\n\r\n        let entry = current;\r\n        while (true) {\r\n            let from = entry.mixingFrom;\r\n            if (!from) break;\r\n            this.queue.end(from);\r\n            entry.mixingFrom = null;\r\n            entry.mixingTo = null;\r\n            entry = from;\r\n        }\r\n\r\n        this.tracks[current.trackIndex] = null;\r\n\r\n        this.queue.drain();\r\n    }\r\n\r\n    setCurrent (index: number, current: TrackEntry, interrupt: boolean) {\r\n        let from = this.expandToIndex(index);\r\n        this.tracks[index] = current;\r\n        current.previous = null;\r\n\r\n        if (from) {\r\n            if (interrupt) this.queue.interrupt(from);\r\n            current.mixingFrom = from;\r\n            from.mixingTo = current;\r\n            current.mixTime = 0;\r\n\r\n            // Store the interrupted mix percentage.\r\n            if (from.mixingFrom && from.mixDuration > 0)\r\n                current.interruptAlpha *= Math.min(1, from.mixTime / from.mixDuration);\r\n\r\n            from.timelinesRotation.length = 0; // Reset rotation for mixing out, in case entry was mixed in.\r\n        }\r\n\r\n        this.queue.start(current);\r\n    }\r\n\r\n    /** Sets an animation by name.\r\n     *\r\n     * See {@link #setAnimationWith()}. */\r\n    setAnimation (trackIndex: number, animationName: string, loop: boolean = false) {\r\n        let animation = this.data.skeletonData.findAnimation(animationName);\r\n        if (!animation) throw new Error(\"Animation not found: \" + animationName);\r\n        return this.setAnimationWith(trackIndex, animation, loop);\r\n    }\r\n\r\n    /** Sets the current animation for a track, discarding any queued animations. If the formerly current track entry was never\r\n     * applied to a skeleton, it is replaced (not mixed from).\r\n     * @param loop If true, the animation will repeat. If false it will not, instead its last frame is applied if played beyond its\r\n     *           duration. In either case {@link TrackEntry#trackEnd} determines when the track is cleared.\r\n     * @returns A track entry to allow further customization of animation playback. References to the track entry must not be kept\r\n     *         after the {@link AnimationStateListener#dispose()} event occurs. */\r\n    setAnimationWith (trackIndex: number, animation: Animation, loop: boolean = false) {\r\n        if (!animation) throw new Error(\"animation cannot be null.\");\r\n        let interrupt = true;\r\n        let current = this.expandToIndex(trackIndex);\r\n        if (current) {\r\n            if (current.nextTrackLast == -1) {\r\n                // Don't mix from an entry that was never applied.\r\n                this.tracks[trackIndex] = current.mixingFrom;\r\n                this.queue.interrupt(current);\r\n                this.queue.end(current);\r\n                this.clearNext(current);\r\n                current = current.mixingFrom;\r\n                interrupt = false;\r\n            } else\r\n                this.clearNext(current);\r\n        }\r\n        let entry = this.trackEntry(trackIndex, animation, loop, current);\r\n        this.setCurrent(trackIndex, entry, interrupt);\r\n        this.queue.drain();\r\n        return entry;\r\n    }\r\n\r\n    /** Queues an animation by name.\r\n     *\r\n     * See {@link #addAnimationWith()}. */\r\n    addAnimation (trackIndex: number, animationName: string, loop: boolean = false, delay: number = 0) {\r\n        let animation = this.data.skeletonData.findAnimation(animationName);\r\n        if (!animation) throw new Error(\"Animation not found: \" + animationName);\r\n        return this.addAnimationWith(trackIndex, animation, loop, delay);\r\n    }\r\n\r\n    /** Adds an animation to be played after the current or last queued animation for a track. If the track is empty, it is\r\n     * equivalent to calling {@link #setAnimationWith()}.\r\n     * @param delay If > 0, sets {@link TrackEntry#delay}. If <= 0, the delay set is the duration of the previous track entry\r\n     *           minus any mix duration (from the {@link AnimationStateData}) plus the specified `delay` (ie the mix\r\n     *           ends at (`delay` = 0) or before (`delay` < 0) the previous track entry duration). If the\r\n     *           previous entry is looping, its next loop completion is used instead of its duration.\r\n     * @returns A track entry to allow further customization of animation playback. References to the track entry must not be kept\r\n     *         after the {@link AnimationStateListener#dispose()} event occurs. */\r\n    addAnimationWith (trackIndex: number, animation: Animation, loop: boolean = false, delay: number = 0) {\r\n        if (!animation) throw new Error(\"animation cannot be null.\");\r\n\r\n        let last = this.expandToIndex(trackIndex);\r\n        if (last) {\r\n            while (last.next)\r\n                last = last.next;\r\n        }\r\n\r\n        let entry = this.trackEntry(trackIndex, animation, loop, last);\r\n\r\n        if (!last) {\r\n            this.setCurrent(trackIndex, entry, true);\r\n            this.queue.drain();\r\n        } else {\r\n            last.next = entry;\r\n            entry.previous = last;\r\n            if (delay <= 0) delay += last.getTrackComplete() - entry.mixDuration;\r\n        }\r\n\r\n        entry.delay = delay;\r\n        return entry;\r\n    }\r\n\r\n    /** Sets an empty animation for a track, discarding any queued animations, and sets the track entry's\r\n     * {@link TrackEntry#mixduration}. An empty animation has no timelines and serves as a placeholder for mixing in or out.\r\n     *\r\n     * Mixing out is done by setting an empty animation with a mix duration using either {@link #setEmptyAnimation()},\r\n     * {@link #setEmptyAnimations()}, or {@link #addEmptyAnimation()}. Mixing to an empty animation causes\r\n     * the previous animation to be applied less and less over the mix duration. Properties keyed in the previous animation\r\n     * transition to the value from lower tracks or to the setup pose value if no lower tracks key the property. A mix duration of\r\n     * 0 still mixes out over one frame.\r\n     *\r\n     * Mixing in is done by first setting an empty animation, then adding an animation using\r\n     * {@link #addAnimation()} and on the returned track entry, set the\r\n     * {@link TrackEntry#setMixDuration()}. Mixing from an empty animation causes the new animation to be applied more and\r\n     * more over the mix duration. Properties keyed in the new animation transition from the value from lower tracks or from the\r\n     * setup pose value if no lower tracks key the property to the value keyed in the new animation. */\r\n    setEmptyAnimation (trackIndex: number, mixDuration: number = 0) {\r\n        let entry = this.setAnimationWith(trackIndex, AnimationState.emptyAnimation(), false);\r\n        entry.mixDuration = mixDuration;\r\n        entry.trackEnd = mixDuration;\r\n        return entry;\r\n    }\r\n\r\n    /** Adds an empty animation to be played after the current or last queued animation for a track, and sets the track entry's\r\n     * {@link TrackEntry#mixDuration}. If the track is empty, it is equivalent to calling\r\n     * {@link #setEmptyAnimation()}.\r\n     *\r\n     * See {@link #setEmptyAnimation()}.\r\n     * @param delay If > 0, sets {@link TrackEntry#delay}. If <= 0, the delay set is the duration of the previous track entry\r\n     *           minus any mix duration plus the specified `delay` (ie the mix ends at (`delay` = 0) or\r\n     *           before (`delay` < 0) the previous track entry duration). If the previous entry is looping, its next\r\n     *           loop completion is used instead of its duration.\r\n     * @return A track entry to allow further customization of animation playback. References to the track entry must not be kept\r\n     *         after the {@link AnimationStateListener#dispose()} event occurs. */\r\n    addEmptyAnimation (trackIndex: number, mixDuration: number = 0, delay: number = 0) {\r\n        let entry = this.addAnimationWith(trackIndex, AnimationState.emptyAnimation(), false, delay <= 0 ? 1 : delay);\r\n        entry.mixDuration = mixDuration;\r\n        entry.trackEnd = mixDuration;\r\n        if (delay <= 0 && entry.previous) entry.delay = entry.previous.getTrackComplete() - entry.mixDuration + delay;\r\n        return entry;\r\n    }\r\n\r\n    /** Sets an empty animation for every track, discarding any queued animations, and mixes to it over the specified mix\r\n     * duration. */\r\n    setEmptyAnimations (mixDuration: number = 0) {\r\n        let oldDrainDisabled = this.queue.drainDisabled;\r\n        this.queue.drainDisabled = true;\r\n        for (let i = 0, n = this.tracks.length; i < n; i++) {\r\n            let current = this.tracks[i];\r\n            if (current) this.setEmptyAnimation(current.trackIndex, mixDuration);\r\n        }\r\n        this.queue.drainDisabled = oldDrainDisabled;\r\n        this.queue.drain();\r\n    }\r\n\r\n    expandToIndex (index: number) {\r\n        if (index < this.tracks.length) return this.tracks[index];\r\n        Utils.ensureArrayCapacity(this.tracks, index + 1, null);\r\n        this.tracks.length = index + 1;\r\n        return null;\r\n    }\r\n\r\n    /** @param last May be null. */\r\n    trackEntry (trackIndex: number, animation: Animation, loop: boolean, last: TrackEntry) {\r\n        let entry = this.trackEntryPool.obtain();\r\n        entry.trackIndex = trackIndex;\r\n        entry.animation = animation;\r\n        entry.loop = loop;\r\n        entry.holdPrevious = false;\r\n\r\n        entry.eventThreshold = 0;\r\n        entry.attachmentThreshold = 0;\r\n        entry.drawOrderThreshold = 0;\r\n\r\n        entry.animationStart = 0;\r\n        entry.animationEnd = animation.duration;\r\n        entry.animationLast = -1;\r\n        entry.nextAnimationLast = -1;\r\n\r\n        entry.delay = 0;\r\n        entry.trackTime = 0;\r\n        entry.trackLast = -1;\r\n        entry.nextTrackLast = -1;\r\n        entry.trackEnd = Number.MAX_VALUE;\r\n        entry.timeScale = 1;\r\n\r\n        entry.alpha = 1;\r\n        entry.interruptAlpha = 1;\r\n        entry.mixTime = 0;\r\n        entry.mixDuration = !last ? 0 : this.data.getMix(last.animation, animation);\r\n        entry.mixBlend = MixBlend.replace;\r\n        return entry;\r\n    }\r\n\r\n    /** Removes the {@link TrackEntry#getNext() next entry} and all entries after it for the specified entry. */\r\n    clearNext (entry: TrackEntry) {\r\n        let next = entry.next;\r\n        while (next) {\r\n            this.queue.dispose(next);\r\n            next = next.next;\r\n        }\r\n        entry.next = null;\r\n    }\r\n\r\n    _animationsChanged () {\r\n        this.animationsChanged = false;\r\n\r\n        this.propertyIDs.clear();\r\n        let tracks = this.tracks;\r\n        for (let i = 0, n = tracks.length; i < n; i++) {\r\n            let entry = tracks[i];\r\n            if (!entry) continue;\r\n            while (entry.mixingFrom)\r\n                entry = entry.mixingFrom;\r\n            do {\r\n                if (!entry.mixingTo || entry.mixBlend != MixBlend.add) this.computeHold(entry);\r\n                entry = entry.mixingTo;\r\n            } while (entry);\r\n        }\r\n    }\r\n\r\n    computeHold (entry: TrackEntry) {\r\n        let to = entry.mixingTo;\r\n        let timelines = entry.animation.timelines;\r\n        let timelinesCount = entry.animation.timelines.length;\r\n        let timelineMode = entry.timelineMode;\r\n        timelineMode.length = timelinesCount;\r\n        let timelineHoldMix = entry.timelineHoldMix;\r\n        timelineHoldMix.length = 0;\r\n        let propertyIDs = this.propertyIDs;\r\n\r\n        if (to && to.holdPrevious) {\r\n            for (let i = 0; i < timelinesCount; i++)\r\n                timelineMode[i] = propertyIDs.addAll(timelines[i].getPropertyIds()) ? HOLD_FIRST : HOLD_SUBSEQUENT;\r\n            return;\r\n        }\r\n\r\n        outer:\r\n            for (let i = 0; i < timelinesCount; i++) {\r\n                let timeline = timelines[i];\r\n                let ids = timeline.getPropertyIds();\r\n                if (!propertyIDs.addAll(ids))\r\n                    timelineMode[i] = SUBSEQUENT;\r\n                else if (!to || timeline instanceof AttachmentTimeline || timeline instanceof DrawOrderTimeline\r\n                    || timeline instanceof EventTimeline || !to.animation.hasTimeline(ids)) {\r\n                    timelineMode[i] = FIRST;\r\n                } else {\r\n                    for (let next = to.mixingTo; next; next = next.mixingTo) {\r\n                        if (next.animation.hasTimeline(ids)) continue;\r\n                        if (entry.mixDuration > 0) {\r\n                            timelineMode[i] = HOLD_MIX;\r\n                            timelineHoldMix[i] = next;\r\n                            continue outer;\r\n                        }\r\n                        break;\r\n                    }\r\n                    timelineMode[i] = HOLD_FIRST;\r\n                }\r\n            }\r\n    }\r\n\r\n    /** Returns the track entry for the animation currently playing on the track, or null if no animation is currently playing. */\r\n    getCurrent (trackIndex: number) {\r\n        if (trackIndex >= this.tracks.length) return null;\r\n        return this.tracks[trackIndex];\r\n    }\r\n\r\n    /** Adds a listener to receive events for all track entries. */\r\n    addListener (listener: AnimationStateListener) {\r\n        if (!listener) throw new Error(\"listener cannot be null.\");\r\n        this.listeners.push(listener);\r\n    }\r\n\r\n    /** Removes the listener added with {@link #addListener()}. */\r\n    removeListener (listener: AnimationStateListener) {\r\n        let index = this.listeners.indexOf(listener);\r\n        if (index >= 0) this.listeners.splice(index, 1);\r\n    }\r\n\r\n    /** Removes all listeners added with {@link #addListener()}. */\r\n    clearListeners () {\r\n        this.listeners.length = 0;\r\n    }\r\n\r\n    /** Discards all listener notifications that have not yet been delivered. This can be useful to call from an\r\n     * {@link AnimationStateListener} when it is known that further notifications that may have been already queued for delivery\r\n     * are not wanted because new animations are being set. */\r\n    clearListenerNotifications () {\r\n        this.queue.clear();\r\n    }\r\n\r\n    //deprecated stuff\r\n    onComplete: (trackIndex: number, loopCount: number) => any;\r\n    onEvent: (trackIndex: number, event: Event) => any;\r\n    onStart: (trackIndex: number) => any;\r\n    onEnd: (trackIndex: number) => any;\r\n\r\n    private static deprecatedWarning1: boolean = false;\r\n\r\n    setAnimationByName(trackIndex: number, animationName: string, loop: boolean) {\r\n        if (!AnimationState.deprecatedWarning1) {\r\n            AnimationState.deprecatedWarning1 = true;\r\n            console.warn(\"Spine Deprecation Warning: AnimationState.setAnimationByName is deprecated, please use setAnimation from now on.\");\r\n        }\r\n        this.setAnimation(trackIndex, animationName, loop);\r\n    }\r\n\r\n    private static deprecatedWarning2: boolean = false;\r\n\r\n    addAnimationByName(trackIndex: number, animationName: string, loop: boolean, delay: number) {\r\n        if (!AnimationState.deprecatedWarning2) {\r\n            AnimationState.deprecatedWarning2 = true;\r\n            console.warn(\"Spine Deprecation Warning: AnimationState.addAnimationByName is deprecated, please use addAnimation from now on.\");\r\n        }\r\n        this.addAnimation(trackIndex, animationName, loop, delay);\r\n    }\r\n\r\n    private static deprecatedWarning3: boolean = false;\r\n\r\n    hasAnimation(animationName: string): boolean {\r\n        let animation = this.data.skeletonData.findAnimation(animationName);\r\n        return animation !== null;\r\n    }\r\n\r\n    hasAnimationByName(animationName: string): boolean {\r\n        if (!AnimationState.deprecatedWarning3) {\r\n            AnimationState.deprecatedWarning3 = true;\r\n            console.warn(\"Spine Deprecation Warning: AnimationState.hasAnimationByName is deprecated, please use hasAnimation from now on.\");\r\n        }\r\n        return this.hasAnimation(animationName);\r\n    }\r\n}\r\n\r\n/** Stores settings and other state for the playback of an animation on an {@link AnimationState} track.\r\n *\r\n * References to a track entry must not be kept after the {@link AnimationStateListener#dispose()} event occurs.\r\n * @public\r\n * */\r\nexport class TrackEntry implements ITrackEntry {\r\n    /** The animation to apply for this track entry. */\r\n    animation: Animation;\r\n\r\n    previous: TrackEntry;\r\n\r\n    /** The animation queued to start after this animation, or null. `next` makes up a linked list. */\r\n    next: TrackEntry;\r\n\r\n    /** The track entry for the previous animation when mixing from the previous animation to this animation, or null if no\r\n     * mixing is currently occuring. When mixing from multiple animations, `mixingFrom` makes up a linked list. */\r\n    mixingFrom: TrackEntry;\r\n\r\n    /** The track entry for the next animation when mixing from this animation to the next animation, or null if no mixing is\r\n     * currently occuring. When mixing to multiple animations, `mixingTo` makes up a linked list. */\r\n    mixingTo: TrackEntry;\r\n\r\n    /** The listener for events generated by this track entry, or null.\r\n     *\r\n     * A track entry returned from {@link AnimationState#setAnimation()} is already the current animation\r\n     * for the track, so the track entry listener {@link AnimationStateListener#start()} will not be called. */\r\n    listener: AnimationStateListener;\r\n\r\n    /** The index of the track where this track entry is either current or queued.\r\n     *\r\n     * See {@link AnimationState#getCurrent()}. */\r\n    trackIndex: number;\r\n\r\n    /** If true, the animation will repeat. If false it will not, instead its last frame is applied if played beyond its\r\n     * duration. */\r\n    loop: boolean;\r\n\r\n    /** If true, when mixing from the previous animation to this animation, the previous animation is applied as normal instead\r\n     * of being mixed out.\r\n     *\r\n     * When mixing between animations that key the same property, if a lower track also keys that property then the value will\r\n     * briefly dip toward the lower track value during the mix. This happens because the first animation mixes from 100% to 0%\r\n     * while the second animation mixes from 0% to 100%. Setting `holdPrevious` to true applies the first animation\r\n     * at 100% during the mix so the lower track value is overwritten. Such dipping does not occur on the lowest track which\r\n     * keys the property, only when a higher track also keys the property.\r\n     *\r\n     * Snapping will occur if `holdPrevious` is true and this animation does not key all the same properties as the\r\n     * previous animation. */\r\n    holdPrevious: boolean;\r\n\r\n    reverse: boolean;\r\n\r\n    /** When the mix percentage ({@link #mixTime} / {@link #mixDuration}) is less than the\r\n     * `eventThreshold`, event timelines are applied while this animation is being mixed out. Defaults to 0, so event\r\n     * timelines are not applied while this animation is being mixed out. */\r\n    eventThreshold: number;\r\n\r\n    /** When the mix percentage ({@link #mixtime} / {@link #mixDuration}) is less than the\r\n     * `attachmentThreshold`, attachment timelines are applied while this animation is being mixed out. Defaults to\r\n     * 0, so attachment timelines are not applied while this animation is being mixed out. */\r\n    attachmentThreshold: number;\r\n\r\n    /** When the mix percentage ({@link #mixTime} / {@link #mixDuration}) is less than the\r\n     * `drawOrderThreshold`, draw order timelines are applied while this animation is being mixed out. Defaults to 0,\r\n     * so draw order timelines are not applied while this animation is being mixed out. */\r\n    drawOrderThreshold: number;\r\n\r\n    /** Seconds when this animation starts, both initially and after looping. Defaults to 0.\r\n     *\r\n     * When changing the `animationStart` time, it often makes sense to set {@link #animationLast} to the same\r\n     * value to prevent timeline keys before the start time from triggering. */\r\n    animationStart: number;\r\n\r\n    /** Seconds for the last frame of this animation. Non-looping animations won't play past this time. Looping animations will\r\n     * loop back to {@link #animationStart} at this time. Defaults to the animation {@link Animation#duration}. */\r\n    animationEnd: number;\r\n\r\n\r\n    /** The time in seconds this animation was last applied. Some timelines use this for one-time triggers. Eg, when this\r\n     * animation is applied, event timelines will fire all events between the `animationLast` time (exclusive) and\r\n     * `animationTime` (inclusive). Defaults to -1 to ensure triggers on frame 0 happen the first time this animation\r\n     * is applied. */\r\n    animationLast: number;\r\n\r\n    nextAnimationLast: number;\r\n\r\n    /** Seconds to postpone playing the animation. When this track entry is the current track entry, `delay`\r\n     * postpones incrementing the {@link #trackTime}. When this track entry is queued, `delay` is the time from\r\n     * the start of the previous animation to when this track entry will become the current track entry (ie when the previous\r\n     * track entry {@link TrackEntry#trackTime} >= this track entry's `delay`).\r\n     *\r\n     * {@link #timeScale} affects the delay. */\r\n    delay: number;\r\n\r\n    /** Current time in seconds this track entry has been the current track entry. The track time determines\r\n     * {@link #animationTime}. The track time can be set to start the animation at a time other than 0, without affecting\r\n     * looping. */\r\n    trackTime: number;\r\n\r\n    trackLast: number; nextTrackLast: number;\r\n\r\n    /** The track time in seconds when this animation will be removed from the track. Defaults to the highest possible float\r\n     * value, meaning the animation will be applied until a new animation is set or the track is cleared. If the track end time\r\n     * is reached, no other animations are queued for playback, and mixing from any previous animations is complete, then the\r\n     * properties keyed by the animation are set to the setup pose and the track is cleared.\r\n     *\r\n     * It may be desired to use {@link AnimationState#addEmptyAnimation()} rather than have the animation\r\n     * abruptly cease being applied. */\r\n    trackEnd: number;\r\n\r\n    /** Multiplier for the delta time when this track entry is updated, causing time for this animation to pass slower or\r\n     * faster. Defaults to 1.\r\n     *\r\n     * {@link #mixTime} is not affected by track entry time scale, so {@link #mixDuration} may need to be adjusted to\r\n     * match the animation speed.\r\n     *\r\n     * When using {@link AnimationState#addAnimation()} with a `delay` <= 0, note the\r\n     * {@link #delay} is set using the mix duration from the {@link AnimationStateData}, assuming time scale to be 1. If\r\n     * the time scale is not 1, the delay may need to be adjusted.\r\n     *\r\n     * See AnimationState {@link AnimationState#timeScale} for affecting all animations. */\r\n    timeScale: number;\r\n\r\n    /** Values < 1 mix this animation with the skeleton's current pose (usually the pose resulting from lower tracks). Defaults\r\n     * to 1, which overwrites the skeleton's current pose with this animation.\r\n     *\r\n     * Typically track 0 is used to completely pose the skeleton, then alpha is used on higher tracks. It doesn't make sense to\r\n     * use alpha on track 0 if the skeleton pose is from the last frame render. */\r\n    alpha: number;\r\n\r\n    /** Seconds from 0 to the {@link #getMixDuration()} when mixing from the previous animation to this animation. May be\r\n     * slightly more than `mixDuration` when the mix is complete. */\r\n    mixTime: number;\r\n\r\n    /** Seconds for mixing from the previous animation to this animation. Defaults to the value provided by AnimationStateData\r\n     * {@link AnimationStateData#getMix()} based on the animation before this animation (if any).\r\n     *\r\n     * A mix duration of 0 still mixes out over one frame to provide the track entry being mixed out a chance to revert the\r\n     * properties it was animating.\r\n     *\r\n     * The `mixDuration` can be set manually rather than use the value from\r\n     * {@link AnimationStateData#getMix()}. In that case, the `mixDuration` can be set for a new\r\n     * track entry only before {@link AnimationState#update(float)} is first called.\r\n     *\r\n     * When using {@link AnimationState#addAnimation()} with a `delay` <= 0, note the\r\n     * {@link #delay} is set using the mix duration from the {@link AnimationStateData}, not a mix duration set\r\n     * afterward. */\r\n    mixDuration: number; interruptAlpha: number; totalAlpha: number;\r\n\r\n    /** Controls how properties keyed in the animation are mixed with lower tracks. Defaults to {@link MixBlend#replace}, which\r\n     * replaces the values from the lower tracks with the animation values. {@link MixBlend#add} adds the animation values to\r\n     * the values from the lower tracks.\r\n     *\r\n     * The `mixBlend` can be set for a new track entry only before {@link AnimationState#apply()} is first\r\n     * called. */\r\n    mixBlend = MixBlend.replace;\r\n    timelineMode = new Array<number>();\r\n    timelineHoldMix = new Array<TrackEntry>();\r\n    timelinesRotation = new Array<number>();\r\n\r\n    reset () {\r\n        this.previous = null;\r\n        this.next = null;\r\n        this.mixingFrom = null;\r\n        this.mixingTo = null;\r\n        this.animation = null;\r\n        this.listener = null;\r\n        this.timelineMode.length = 0;\r\n        this.timelineHoldMix.length = 0;\r\n        this.timelinesRotation.length = 0;\r\n    }\r\n\r\n    /** Uses {@link #trackTime} to compute the `animationTime`, which is between {@link #animationStart}\r\n     * and {@link #animationEnd}. When the `trackTime` is 0, the `animationTime` is equal to the\r\n     * `animationStart` time. */\r\n    getAnimationTime () {\r\n        if (this.loop) {\r\n            let duration = this.animationEnd - this.animationStart;\r\n            if (duration == 0) return this.animationStart;\r\n            return (this.trackTime % duration) + this.animationStart;\r\n        }\r\n        return Math.min(this.trackTime + this.animationStart, this.animationEnd);\r\n    }\r\n\r\n    setAnimationLast(animationLast: number) {\r\n        this.animationLast = animationLast;\r\n        this.nextAnimationLast = animationLast;\r\n    }\r\n\r\n    /** Returns true if at least one loop has been completed.\r\n     *\r\n     * See {@link AnimationStateListener#complete()}. */\r\n    isComplete () {\r\n        return this.trackTime >= this.animationEnd - this.animationStart;\r\n    }\r\n\r\n    /** Resets the rotation directions for mixing this entry's rotate timelines. This can be useful to avoid bones rotating the\r\n     * long way around when using {@link #alpha} and starting animations on other tracks.\r\n     *\r\n     * Mixing with {@link MixBlend#replace} involves finding a rotation between two others, which has two possible solutions:\r\n     * the short way or the long way around. The two rotations likely change over time, so which direction is the short or long\r\n     * way also changes. If the short way was always chosen, bones would flip to the other side when that direction became the\r\n     * long way. TrackEntry chooses the short way the first time it is applied and remembers that direction. */\r\n    resetRotationDirections () {\r\n        this.timelinesRotation.length = 0;\r\n    }\r\n\r\n    getTrackComplete() {\r\n        let duration = this.animationEnd - this.animationStart;\r\n        if (duration != 0) {\r\n            if (this.loop) return duration * (1 + ((this.trackTime / duration) | 0)); // Completion of next loop.\r\n            if (this.trackTime < duration) return duration; // Before duration.\r\n        }\r\n        return this.trackTime; // Next update.\r\n    }\r\n\r\n    //deprecated stuff\r\n    onComplete: (trackIndex: number, loopCount: number) => any;\r\n    onEvent: (trackIndex: number, event: Event) => any;\r\n    onStart: (trackIndex: number) => any;\r\n    onEnd: (trackIndex: number) => any;\r\n\r\n    private static deprecatedWarning1: Boolean = false;\r\n    private static deprecatedWarning2: Boolean = false;\r\n\r\n    get time() {\r\n        if (!TrackEntry.deprecatedWarning1) {\r\n            TrackEntry.deprecatedWarning1 = true;\r\n            console.warn(\"Spine Deprecation Warning: TrackEntry.time is deprecated, please use trackTime from now on.\");\r\n        }\r\n        return this.trackTime;\r\n    }\r\n\r\n    set time(value: number) {\r\n        if (!TrackEntry.deprecatedWarning1) {\r\n            TrackEntry.deprecatedWarning1 = true;\r\n            console.warn(\"Spine Deprecation Warning: TrackEntry.time is deprecated, please use trackTime from now on.\");\r\n        }\r\n        this.trackTime = value;\r\n    }\r\n\r\n    get endTime() {\r\n        if (!TrackEntry.deprecatedWarning2) {\r\n            TrackEntry.deprecatedWarning2 = true;\r\n            console.warn(\"Spine Deprecation Warning: TrackEntry.endTime is deprecated, please use trackEnd from now on.\");\r\n        }\r\n        return this.trackTime;\r\n    }\r\n\r\n    set endTime(value: number) {\r\n        if (!TrackEntry.deprecatedWarning2) {\r\n            TrackEntry.deprecatedWarning2 = true;\r\n            console.warn(\"Spine Deprecation Warning: TrackEntry.endTime is deprecated, please use trackEnd from now on.\");\r\n        }\r\n        this.trackTime = value;\r\n    }\r\n\r\n    loopsCount() {\r\n        return Math.floor(this.trackTime / this.trackEnd);\r\n    }\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport class EventQueue {\r\n    objects: Array<any> = [];\r\n    drainDisabled = false;\r\n    animState: AnimationState;\r\n\r\n    constructor(animState: AnimationState) {\r\n        this.animState = animState;\r\n    }\r\n\r\n    start (entry: TrackEntry) {\r\n        this.objects.push(EventType.start);\r\n        this.objects.push(entry);\r\n        this.animState.animationsChanged = true;\r\n    }\r\n\r\n    interrupt (entry: TrackEntry) {\r\n        this.objects.push(EventType.interrupt);\r\n        this.objects.push(entry);\r\n    }\r\n\r\n    end (entry: TrackEntry) {\r\n        this.objects.push(EventType.end);\r\n        this.objects.push(entry);\r\n        this.animState.animationsChanged = true;\r\n    }\r\n\r\n    dispose (entry: TrackEntry) {\r\n        this.objects.push(EventType.dispose);\r\n        this.objects.push(entry);\r\n    }\r\n\r\n    complete (entry: TrackEntry) {\r\n        this.objects.push(EventType.complete);\r\n        this.objects.push(entry);\r\n    }\r\n\r\n    event (entry: TrackEntry, event: Event) {\r\n        this.objects.push(EventType.event);\r\n        this.objects.push(entry);\r\n        this.objects.push(event);\r\n    }\r\n\r\n    drain () {\r\n        if (this.drainDisabled) return;\r\n        this.drainDisabled = true;\r\n\r\n        let objects = this.objects;\r\n        let listeners = this.animState.listeners;\r\n\r\n        for (let i = 0; i < objects.length; i += 2) {\r\n            let type = objects[i] as EventType;\r\n            let entry = objects[i + 1] as TrackEntry;\r\n            switch (type) {\r\n                case EventType.start:\r\n                    if (entry.listener != null && entry.listener.start) entry.listener.start(entry);\r\n                    for (let ii = 0; ii < listeners.length; ii++)\r\n                        if (listeners[ii].start) listeners[ii].start(entry);\r\n                    break;\r\n                case EventType.interrupt:\r\n                    if (entry.listener != null && entry.listener.interrupt) entry.listener.interrupt(entry);\r\n                    for (let ii = 0; ii < listeners.length; ii++)\r\n                        if (listeners[ii].interrupt) listeners[ii].interrupt(entry);\r\n                    break;\r\n                case EventType.end:\r\n                    if (entry.listener != null && entry.listener.end) entry.listener.end(entry);\r\n                    for (let ii = 0; ii < listeners.length; ii++)\r\n                        if (listeners[ii].end) listeners[ii].end(entry);\r\n                // Fall through.\r\n                case EventType.dispose:\r\n                    if (entry.listener != null && entry.listener.dispose) entry.listener.dispose(entry);\r\n                    for (let ii = 0; ii < listeners.length; ii++)\r\n                        if (listeners[ii].dispose) listeners[ii].dispose(entry);\r\n                    this.animState.trackEntryPool.free(entry);\r\n                    break;\r\n                case EventType.complete:\r\n                    if (entry.listener != null && entry.listener.complete) entry.listener.complete(entry);\r\n                    for (let ii = 0; ii < listeners.length; ii++)\r\n                        if (listeners[ii].complete) listeners[ii].complete(entry);\r\n                    break;\r\n                case EventType.event:\r\n                    let event = objects[i++ + 2] as Event;\r\n                    if (entry.listener != null && entry.listener.event) entry.listener.event(entry, event);\r\n                    for (let ii = 0; ii < listeners.length; ii++)\r\n                        if (listeners[ii].event) listeners[ii].event(entry, event);\r\n                    break;\r\n            }\r\n        }\r\n        this.clear();\r\n\r\n        this.drainDisabled = false;\r\n    }\r\n\r\n    clear () {\r\n        this.objects.length = 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport enum EventType {\r\n    start, interrupt, end, dispose, complete, event\r\n}\r\n\r\n/** The interface to implement for receiving TrackEntry events. It is always safe to call AnimationState methods when receiving\r\n * events.\r\n *\r\n * See TrackEntry {@link TrackEntry#listener} and AnimationState\r\n * {@link AnimationState#addListener()}.\r\n * @public\r\n * */\r\nexport interface AnimationStateListener {\r\n    /** Invoked when this entry has been set as the current entry. */\r\n    start (entry: TrackEntry): void;\r\n\r\n    /** Invoked when another entry has replaced this entry as the current entry. This entry may continue being applied for\r\n     * mixing. */\r\n    interrupt (entry: TrackEntry): void;\r\n\r\n    /** Invoked when this entry is no longer the current entry and will never be applied again. */\r\n    end (entry: TrackEntry): void;\r\n\r\n    /** Invoked when this entry will be disposed. This may occur without the entry ever being set as the current entry.\r\n     * References to the entry should not be kept after dispose is called, as it may be destroyed or reused. */\r\n    dispose (entry: TrackEntry): void;\r\n\r\n    /** Invoked every time this entry's animation completes a loop. */\r\n    complete (entry: TrackEntry): void;\r\n\r\n    /** Invoked when this entry's animation triggers an event. */\r\n    event (entry: TrackEntry, event: Event): void;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport abstract class AnimationStateAdapter implements AnimationStateListener {\r\n    start (entry: TrackEntry) {\r\n    }\r\n\r\n    interrupt (entry: TrackEntry) {\r\n    }\r\n\r\n    end (entry: TrackEntry) {\r\n    }\r\n\r\n    dispose (entry: TrackEntry) {\r\n    }\r\n\r\n    complete (entry: TrackEntry) {\r\n    }\r\n\r\n    event (entry: TrackEntry, event: Event) {\r\n    }\r\n}\r\n\r\n/** 1. A previously applied timeline has set this property.\r\n *\r\n * Result: Mix from the current pose to the timeline pose. */\r\nconst SUBSEQUENT = 0;\r\n/** 1. This is the first timeline to set this property.\r\n * 2. The next track entry applied after this one does not have a timeline to set this property.\r\n *\r\n * Result: Mix from the setup pose to the timeline pose. */\r\nconst FIRST = 1;\r\n/** 1) A previously applied timeline has set this property.<br>\r\n * 2) The next track entry to be applied does have a timeline to set this property.<br>\r\n * 3) The next track entry after that one does not have a timeline to set this property.<br>\r\n * Result: Mix from the current pose to the timeline pose, but do not mix out. This avoids \"dipping\" when crossfading\r\n * animations that key the same property. A subsequent timeline will set this property using a mix. */\r\nconst HOLD_SUBSEQUENT = 2;\r\n/** 1) This is the first timeline to set this property.<br>\r\n * 2) The next track entry to be applied does have a timeline to set this property.<br>\r\n * 3) The next track entry after that one does not have a timeline to set this property.<br>\r\n * Result: Mix from the setup pose to the timeline pose, but do not mix out. This avoids \"dipping\" when crossfading animations\r\n * that key the same property. A subsequent timeline will set this property using a mix. */\r\nconst HOLD_FIRST = 3;\r\n/** 1. This is the first timeline to set this property.\r\n * 2. The next track entry to be applied does have a timeline to set this property.\r\n * 3. The next track entry after that one does have a timeline to set this property.\r\n * 4. timelineHoldMix stores the first subsequent track entry that does not have a timeline to set this property.\r\n *\r\n * Result: The same as HOLD except the mix percentage from the timelineHoldMix track entry is used. This handles when more than\r\n * 2 track entries in a row have a timeline that sets the same property.\r\n *\r\n * Eg, A -> B -> C -> D where A, B, and C have a timeline setting same property, but D does not. When A is applied, to avoid\r\n * \"dipping\" A is not mixed out, however D (the first entry that doesn't set the property) mixing in is used to mix out A\r\n * (which affects B and C). Without using D to mix out, A would be applied fully until mixing completes, then snap into\r\n * place. */\r\nconst HOLD_MIX = 4;\r\n\r\nconst SETUP = 1;\r\nconst CURRENT = 2;\r\n\r\nlet _emptyAnimation: Animation = null;\r\n","import {SkeletonData} from \"./SkeletonData\";\r\nimport {IAnimationStateData, Map} from '@pixi-spine/base';\r\nimport type {Animation} from './Animation';\r\n\r\n/** Stores mix (crossfade) durations to be applied when {@link AnimationState} animations are changed.\r\n * @public\r\n * */\r\nexport class AnimationStateData implements IAnimationStateData {\r\n    /** The SkeletonData to look up animations when they are specified by name. */\r\n    skeletonData: SkeletonData;\r\n\r\n    animationToMixTime: Map<number> = { };\r\n\r\n    /** The mix duration to use when no mix duration has been defined between two animations. */\r\n    defaultMix = 0;\r\n\r\n    constructor (skeletonData: SkeletonData) {\r\n        if (skeletonData == null) throw new Error(\"skeletonData cannot be null.\");\r\n        this.skeletonData = skeletonData;\r\n    }\r\n\r\n    /** Sets a mix duration by animation name.\r\n     *\r\n     * See {@link #setMixWith()}. */\r\n    setMix (fromName: string, toName: string, duration: number) {\r\n        let from = this.skeletonData.findAnimation(fromName);\r\n        if (from == null) throw new Error(\"Animation not found: \" + fromName);\r\n        let to = this.skeletonData.findAnimation(toName);\r\n        if (to == null) throw new Error(\"Animation not found: \" + toName);\r\n        this.setMixWith(from, to, duration);\r\n    }\r\n\r\n    /** Sets the mix duration when changing from the specified animation to the other.\r\n     *\r\n     * See {@link TrackEntry#mixDuration}. */\r\n    setMixWith (from: Animation, to: Animation, duration: number) {\r\n        if (from == null) throw new Error(\"from cannot be null.\");\r\n        if (to == null) throw new Error(\"to cannot be null.\");\r\n        let key = from.name + \".\" + to.name;\r\n        this.animationToMixTime[key] = duration;\r\n    }\r\n\r\n    /** Returns the mix duration to use when changing from the specified animation to the other, or the {@link #defaultMix} if\r\n     * no mix duration has been set. */\r\n    getMix (from: Animation, to: Animation) {\r\n        let key = from.name + \".\" + to.name;\r\n        let value = this.animationToMixTime[key];\r\n        return value === undefined ? this.defaultMix : value;\r\n    }\r\n}\r\n","\r\nimport {AttachmentLoader, RegionAttachment, MeshAttachment, BoundingBoxAttachment,\r\n    PathAttachment, PointAttachment, ClippingAttachment} from './attachments';\r\nimport type {TextureAtlas} from \"@pixi-spine/base\";\r\nimport type {Skin} from \"./Skin\";\r\n\r\n/**\r\n * @public\r\n */\r\nexport class AtlasAttachmentLoader implements AttachmentLoader {\r\n    atlas: TextureAtlas;\r\n\r\n    constructor(atlas: TextureAtlas) {\r\n        this.atlas = atlas;\r\n    }\r\n\r\n    /** @return May be null to not load an attachment. */\r\n    // @ts-ignore\r\n    newRegionAttachment(skin: Skin, name: string, path: string): RegionAttachment {\r\n        let region = this.atlas.findRegion(path);\r\n        if (region == null) throw new Error(\"Region not found in atlas: \" + path + \" (region attachment: \" + name + \")\");\r\n        let attachment = new RegionAttachment(name);\r\n        attachment.region = region;\r\n        return attachment;\r\n    }\r\n\r\n    /** @return May be null to not load an attachment. */\r\n    // @ts-ignore\r\n    newMeshAttachment(skin: Skin, name: string, path: string): MeshAttachment {\r\n        let region = this.atlas.findRegion(path);\r\n        if (region == null) throw new Error(\"Region not found in atlas: \" + path + \" (mesh attachment: \" + name + \")\");\r\n        let attachment = new MeshAttachment(name);\r\n        attachment.region = region;\r\n        return attachment;\r\n    }\r\n\r\n    /** @return May be null to not load an attachment. */\r\n    // @ts-ignore\r\n    newBoundingBoxAttachment(skin: Skin, name: string): BoundingBoxAttachment {\r\n        return new BoundingBoxAttachment(name);\r\n    }\r\n\r\n    /** @return May be null to not load an attachment */\r\n    // @ts-ignore\r\n    newPathAttachment(skin: Skin, name: string): PathAttachment {\r\n        return new PathAttachment(name);\r\n    }\r\n\r\n    // @ts-ignore\r\n    newPointAttachment(skin: Skin, name: string): PointAttachment {\r\n        return new PointAttachment(name);\r\n    }\r\n\r\n    // @ts-ignore\r\n    newClippingAttachment(skin: Skin, name: string): ClippingAttachment {\r\n        return new ClippingAttachment(name);\r\n    }\r\n}\r\n","import {Color} from '@pixi-spine/base';\r\n\r\n/** Stores the setup pose for a {@link Bone}.\r\n * @public\r\n * */\r\nexport class BoneData {\r\n    /** The index of the bone in {@link Skeleton#getBones()}. */\r\n    index: number;\r\n\r\n    /** The name of the bone, which is unique across all bones in the skeleton. */\r\n    name: string;\r\n\r\n    /** @returns May be null. */\r\n    parent: BoneData;\r\n\r\n    /** The bone's length. */\r\n    length: number;\r\n\r\n    /** The local x translation. */\r\n    x = 0;\r\n\r\n    /** The local y translation. */\r\n    y = 0;\r\n\r\n    /** The local rotation. */\r\n    rotation = 0;\r\n\r\n    /** The local scaleX. */\r\n    scaleX = 1;\r\n\r\n    /** The local scaleY. */\r\n    scaleY = 1;\r\n\r\n    /** The local shearX. */\r\n    shearX = 0;\r\n\r\n    /** The local shearX. */\r\n    shearY = 0;\r\n\r\n    /** The transform mode for how parent world transforms affect this bone. */\r\n    transformMode = TransformMode.Normal;\r\n\r\n    /** When true, {@link Skeleton#updateWorldTransform()} only updates this bone if the {@link Skeleton#skin} contains this\r\n     * bone.\r\n     * @see Skin#bones */\r\n    skinRequired = false;\r\n\r\n    /** The color of the bone as it was in Spine. Available only when nonessential data was exported. Bones are not usually\r\n     * rendered at runtime. */\r\n    color = new Color();\r\n\r\n    constructor (index: number, name: string, parent: BoneData) {\r\n        if (index < 0) throw new Error(\"index must be >= 0.\");\r\n        if (name == null) throw new Error(\"name cannot be null.\");\r\n        this.index = index;\r\n        this.name = name;\r\n        this.parent = parent;\r\n    }\r\n}\r\n\r\n/** Determines how a bone inherits world transforms from parent bones.\r\n * @public\r\n * */\r\nexport enum TransformMode {\r\n    Normal, OnlyTranslation, NoRotationOrReflection, NoScale, NoScaleOrReflection\r\n}\r\n","import {Matrix} from '@pixi/math';\r\nimport {Updatable} from \"./Updatable\";\r\nimport {BoneData, TransformMode} from \"./BoneData\";\r\nimport {Skeleton} from \"./Skeleton\";\r\nimport {IBone, MathUtils, settings, Vector2} from \"@pixi-spine/base\";\r\n\r\n/** Stores a bone's current pose.\r\n *\r\n * A bone has a local transform which is used to compute its world transform. A bone also has an applied transform, which is a\r\n * local transform that can be applied to compute the world transform. The local transform and applied transform may differ if a\r\n * constraint or application code modifies the world transform after it was computed from the local transform.\r\n * @public\r\n * */\r\nexport class Bone implements Updatable, IBone {\r\n    //be careful! Spine b,c is c,b in pixi matrix\r\n    matrix = new Matrix();\r\n\r\n    get worldX(): number {\r\n        return this.matrix.tx;\r\n    }\r\n\r\n    get worldY(): number {\r\n        return this.matrix.ty;\r\n    }\r\n\r\n    /** The bone's setup pose data. */\r\n    data: BoneData;\r\n\r\n    /** The skeleton this bone belongs to. */\r\n    skeleton: Skeleton;\r\n\r\n    /** The parent bone, or null if this is the root bone. */\r\n    parent: Bone;\r\n\r\n    /** The immediate children of this bone. */\r\n    children = new Array<Bone>();\r\n\r\n    /** The local x translation. */\r\n    x = 0;\r\n\r\n    /** The local y translation. */\r\n    y = 0;\r\n\r\n    /** The local rotation in degrees, counter clockwise. */\r\n    rotation = 0;\r\n\r\n    /** The local scaleX. */\r\n    scaleX = 0;\r\n\r\n    /** The local scaleY. */\r\n    scaleY = 0;\r\n\r\n    /** The local shearX. */\r\n    shearX = 0;\r\n\r\n    /** The local shearY. */\r\n    shearY = 0;\r\n\r\n    /** The applied local x translation. */\r\n    ax = 0;\r\n\r\n    /** The applied local y translation. */\r\n    ay = 0;\r\n\r\n    /** The applied local rotation in degrees, counter clockwise. */\r\n    arotation = 0;\r\n\r\n    /** The applied local scaleX. */\r\n    ascaleX = 0;\r\n\r\n    /** The applied local scaleY. */\r\n    ascaleY = 0;\r\n\r\n    /** The applied local shearX. */\r\n    ashearX = 0;\r\n\r\n    /** The applied local shearY. */\r\n    ashearY = 0;\r\n\r\n    sorted = false;\r\n    active = false;\r\n\r\n    /** @param parent May be null. */\r\n    constructor (data: BoneData, skeleton: Skeleton, parent: Bone) {\r\n        if (!data) throw new Error(\"data cannot be null.\");\r\n        if (!skeleton) throw new Error(\"skeleton cannot be null.\");\r\n        this.data = data;\r\n        this.skeleton = skeleton;\r\n        this.parent = parent;\r\n        this.setToSetupPose();\r\n    }\r\n\r\n    /** Returns false when the bone has not been computed because {@link BoneData#skinRequired} is true and the\r\n     * {@link Skeleton#skin active skin} does not {@link Skin#bones contain} this bone. */\r\n    isActive () {\r\n        return this.active;\r\n    }\r\n\r\n    /** Computes the world transform using the parent bone and this bone's local applied transform. */\r\n    update () {\r\n        this.updateWorldTransformWith(this.ax, this.ay, this.arotation, this.ascaleX, this.ascaleY, this.ashearX, this.ashearY);\r\n    }\r\n\r\n    /** Computes the world transform using the parent bone and this bone's local transform.\r\n     *\r\n     * See {@link #updateWorldTransformWith()}. */\r\n    updateWorldTransform () {\r\n        this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY);\r\n    }\r\n\r\n    /** Computes the world transform using the parent bone and the specified local transform. The applied transform is set to the\r\n     * specified local transform. Child bones are not updated.\r\n     *\r\n     * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\r\n     * Runtimes Guide. */\r\n    updateWorldTransformWith (x: number, y: number, rotation: number, scaleX: number, scaleY: number, shearX: number, shearY: number) {\r\n        this.ax = x;\r\n        this.ay = y;\r\n        this.arotation = rotation;\r\n        this.ascaleX = scaleX;\r\n        this.ascaleY = scaleY;\r\n        this.ashearX = shearX;\r\n        this.ashearY = shearY;\r\n\r\n        let parent = this.parent;\r\n        let m = this.matrix;\r\n\r\n        let sx = this.skeleton.scaleX;\r\n        let sy = settings.yDown? -this.skeleton.scaleY : this.skeleton.scaleY;\r\n        if (!parent) { // Root bone.\r\n            let skeleton = this.skeleton;\r\n            let rotationY = rotation + 90 + shearY;\r\n            m.a = MathUtils.cosDeg(rotation + shearX) * scaleX * sx;\r\n            m.c = MathUtils.cosDeg(rotationY) * scaleY * sx;\r\n            m.b = MathUtils.sinDeg(rotation + shearX) * scaleX * sy;\r\n            m.d = MathUtils.sinDeg(rotationY) * scaleY * sy;\r\n            m.tx = x * sx + skeleton.x;\r\n            m.ty = y * sy + skeleton.y;\r\n            return;\r\n        }\r\n\r\n        let pa = parent.matrix.a, pb = parent.matrix.c, pc = parent.matrix.b, pd = parent.matrix.d;\r\n        m.tx = pa * x + pb * y + parent.matrix.tx;\r\n        m.ty = pc * x + pd * y + parent.matrix.ty;\r\n\r\n        switch (this.data.transformMode) {\r\n            case TransformMode.Normal: {\r\n                let rotationY = rotation + 90 + shearY;\r\n                let la = MathUtils.cosDeg(rotation + shearX) * scaleX;\r\n                let lb = MathUtils.cosDeg(rotationY) * scaleY;\r\n                let lc = MathUtils.sinDeg(rotation + shearX) * scaleX;\r\n                let ld = MathUtils.sinDeg(rotationY) * scaleY;\r\n                m.a = pa * la + pb * lc;\r\n                m.c = pa * lb + pb * ld;\r\n                m.b = pc * la + pd * lc;\r\n                m.d = pc * lb + pd * ld;\r\n                return;\r\n            }\r\n            case TransformMode.OnlyTranslation: {\r\n                let rotationY = rotation + 90 + shearY;\r\n                m.a = MathUtils.cosDeg(rotation + shearX) * scaleX;\r\n                m.c = MathUtils.cosDeg(rotationY) * scaleY;\r\n                m.b = MathUtils.sinDeg(rotation + shearX) * scaleX;\r\n                m.d = MathUtils.sinDeg(rotationY) * scaleY;\r\n                break;\r\n            }\r\n            case TransformMode.NoRotationOrReflection: {\r\n                let s = pa * pa + pc * pc;\r\n                let prx = 0;\r\n                if (s > 0.0001) {\r\n                    s = Math.abs(pa * pd - pb * pc) / s;\r\n                    pa /= this.skeleton.scaleX;\r\n                    pc /= this.skeleton.scaleY;\r\n                    pb = pc * s;\r\n                    pd = pa * s;\r\n                    prx = Math.atan2(pc, pa) * MathUtils.radDeg;\r\n                } else {\r\n                    pa = 0;\r\n                    pc = 0;\r\n                    prx = 90 - Math.atan2(pd, pb) * MathUtils.radDeg;\r\n                }\r\n                let rx = rotation + shearX - prx;\r\n                let ry = rotation + shearY - prx + 90;\r\n                let la = MathUtils.cosDeg(rx) * scaleX;\r\n                let lb = MathUtils.cosDeg(ry) * scaleY;\r\n                let lc = MathUtils.sinDeg(rx) * scaleX;\r\n                let ld = MathUtils.sinDeg(ry) * scaleY;\r\n                m.a = pa * la - pb * lc;\r\n                m.c = pa * lb - pb * ld;\r\n                m.b = pc * la + pd * lc;\r\n                m.d = pc * lb + pd * ld;\r\n                break;\r\n            }\r\n            case TransformMode.NoScale:\r\n            case TransformMode.NoScaleOrReflection: {\r\n                let cos = MathUtils.cosDeg(rotation);\r\n                let sin = MathUtils.sinDeg(rotation);\r\n                let za = (pa * cos + pb * sin) / sx;\r\n                let zc = (pc * cos + pd * sin) / sy;\r\n                let s = Math.sqrt(za * za + zc * zc);\r\n                if (s > 0.00001) s = 1 / s;\r\n                za *= s;\r\n                zc *= s;\r\n                s = Math.sqrt(za * za + zc * zc);\r\n                if (\r\n                    this.data.transformMode == TransformMode.NoScale\r\n                    && (pa * pd - pb * pc < 0) != (settings.yDown?\r\n                    (this.skeleton.scaleX < 0 != this.skeleton.scaleY > 0) :\r\n                        (this.skeleton.scaleX < 0 != this.skeleton.scaleY < 0))\r\n                ) s = -s;\r\n                let r = Math.PI / 2 + Math.atan2(zc, za);\r\n                let zb = Math.cos(r) * s;\r\n                let zd = Math.sin(r) * s;\r\n                let la = MathUtils.cosDeg(shearX) * scaleX;\r\n                let lb = MathUtils.cosDeg(90 + shearY) * scaleY;\r\n                let lc = MathUtils.sinDeg(shearX) * scaleX;\r\n                let ld = MathUtils.sinDeg(90 + shearY) * scaleY;\r\n                m.a = za * la + zb * lc;\r\n                m.c = za * lb + zb * ld;\r\n                m.b = zc * la + zd * lc;\r\n                m.d = zc * lb + zd * ld;\r\n                break;\r\n            }\r\n        }\r\n        m.a *= sx;\r\n        m.c *= sx;\r\n        m.b *= sy;\r\n        m.d *= sy;\r\n    }\r\n\r\n    /** Sets this bone's local transform to the setup pose. */\r\n    setToSetupPose () {\r\n        let data = this.data;\r\n        this.x = data.x;\r\n        this.y = data.y;\r\n        this.rotation = data.rotation;\r\n        this.scaleX = data.scaleX;\r\n        this.scaleY = data.scaleY;\r\n        this.shearX = data.shearX;\r\n        this.shearY = data.shearY;\r\n    }\r\n\r\n    /** The world rotation for the X axis, calculated using {@link #a} and {@link #c}. */\r\n    getWorldRotationX () {\r\n        return Math.atan2(this.matrix.b, this.matrix.a) * MathUtils.radDeg;\r\n    }\r\n\r\n    /** The world rotation for the Y axis, calculated using {@link #b} and {@link #d}. */\r\n    getWorldRotationY () {\r\n        return Math.atan2(this.matrix.d, this.matrix.c) * MathUtils.radDeg;\r\n    }\r\n\r\n    /** The magnitude (always positive) of the world scale X, calculated using {@link #a} and {@link #c}. */\r\n    getWorldScaleX () {\r\n        let m = this.matrix;\r\n        return Math.sqrt(m.a * m.a + m.b * m.b);\r\n    }\r\n\r\n    /** The magnitude (always positive) of the world scale Y, calculated using {@link #b} and {@link #d}. */\r\n    getWorldScaleY () {\r\n        let m = this.matrix;\r\n        return Math.sqrt(m.c * m.c + m.d * m.d);\r\n    }\r\n\r\n    /** Computes the applied transform values from the world transform.\r\n     *\r\n     * If the world transform is modified (by a constraint, {@link #rotateWorld(float)}, etc) then this method should be called so\r\n     * the applied transform matches the world transform. The applied transform may be needed by other code (eg to apply other\r\n     * constraints).\r\n     *\r\n     * Some information is ambiguous in the world transform, such as -1,-1 scale versus 180 rotation. The applied transform after\r\n     * calling this method is equivalent to the local transform used to compute the world transform, but may not be identical. */\r\n    updateAppliedTransform () {\r\n        let parent = this.parent;\r\n        let m = this.matrix;\r\n        if (!parent) {\r\n            this.ax = m.tx;\r\n            this.ay = m.ty;\r\n            this.arotation = Math.atan2(m.b, m.a) * MathUtils.radDeg;\r\n            this.ascaleX = Math.sqrt(m.a * m.a + m.b * m.b);\r\n            this.ascaleY = Math.sqrt(m.c * m.c + m.d * m.d);\r\n            this.ashearX = 0;\r\n            this.ashearY = Math.atan2(m.a * m.c + m.b * m.d, m.a * m.d - m.b * m.c) * MathUtils.radDeg;\r\n            return;\r\n        }\r\n        let pm = parent.matrix;\r\n        let pid = 1 / (pm.a * pm.d - pm.b * pm.c);\r\n        let dx = m.tx - pm.tx, dy = m.ty - pm.ty;\r\n        this.ax = (dx * pm.d * pid - dy * pm.c * pid);\r\n        this.ay = (dy * pm.a * pid - dx * pm.b * pid);\r\n        let ia = pid * pm.d;\r\n        let id = pid * pm.a;\r\n        let ib = pid * pm.c;\r\n        let ic = pid * pm.b;\r\n        let ra = ia * m.a - ib * m.b;\r\n        let rb = ia * m.c - ib * m.d;\r\n        let rc = id * m.b - ic * m.a;\r\n        let rd = id * m.d - ic * m.c;\r\n        this.ashearX = 0;\r\n        this.ascaleX = Math.sqrt(ra * ra + rc * rc);\r\n        if (this.ascaleX > 0.0001) {\r\n            let det = ra * rd - rb * rc;\r\n            this.ascaleY = det / this.ascaleX;\r\n            this.ashearY = Math.atan2(ra * rb + rc * rd, det) * MathUtils.radDeg;\r\n            this.arotation = Math.atan2(rc, ra) * MathUtils.radDeg;\r\n        } else {\r\n            this.ascaleX = 0;\r\n            this.ascaleY = Math.sqrt(rb * rb + rd * rd);\r\n            this.ashearY = 0;\r\n            this.arotation = 90 - Math.atan2(rd, rb) * MathUtils.radDeg;\r\n        }\r\n    }\r\n\r\n    /** Transforms a point from world coordinates to the bone's local coordinates. */\r\n    worldToLocal(world: Vector2) {\r\n        let m = this.matrix;\r\n        let a = m.a, b = m.c, c = m.b, d = m.d;\r\n        let invDet = 1 / (a * d - b * c);\r\n        let x = world.x - m.tx, y = world.y - m.ty;\r\n        world.x = (x * d * invDet - y * b * invDet);\r\n        world.y = (y * a * invDet - x * c * invDet);\r\n        return world;\r\n    }\r\n\r\n    /** Transforms a point from the bone's local coordinates to world coordinates. */\r\n    localToWorld(local: Vector2) {\r\n        let m = this.matrix;\r\n        let x = local.x, y = local.y;\r\n        local.x = x * m.a + y * m.c + m.tx;\r\n        local.y = x * m.b + y * m.d + m.ty;\r\n        return local;\r\n    }\r\n\r\n    /** Transforms a world rotation to a local rotation. */\r\n    worldToLocalRotation (worldRotation: number) {\r\n        let sin = MathUtils.sinDeg(worldRotation), cos = MathUtils.cosDeg(worldRotation);\r\n        let mat = this.matrix;\r\n        return Math.atan2(mat.a * sin - mat.b * cos, mat.d * cos - mat.c * sin) * MathUtils.radDeg;\r\n    }\r\n\r\n    /** Transforms a local rotation to a world rotation. */\r\n    localToWorldRotation (localRotation: number) {\r\n        localRotation -= this.rotation - this.shearX;\r\n        let sin = MathUtils.sinDeg(localRotation), cos = MathUtils.cosDeg(localRotation);\r\n        let mat = this.matrix;\r\n        return Math.atan2(cos * mat.b + sin * mat.d, cos * mat.a + sin * mat.c) * MathUtils.radDeg;\r\n    }\r\n\r\n    /** Rotates the world transform the specified amount.\r\n     * <p>\r\n     * After changes are made to the world transform, {@link #updateAppliedTransform()} should be called and {@link #update()} will\r\n     * need to be called on any child bones, recursively. */\r\n    rotateWorld (degrees: number) {\r\n        let mat = this.matrix;\r\n        let a = mat.a, b = mat.c, c = mat.b, d = mat.d;\r\n        let cos = MathUtils.cosDeg(degrees), sin = MathUtils.sinDeg(degrees);\r\n        mat.a = cos * a - sin * c;\r\n        mat.c = cos * b - sin * d;\r\n        mat.b = sin * a + cos * c;\r\n        mat.d = sin * b + cos * d;\r\n    }\r\n}\r\n","/** The base class for all constraint datas.\r\n * @public\r\n * */\r\nexport abstract class ConstraintData {\r\n    constructor(public name: string, public order: number, public skinRequired: boolean) { }\r\n}\r\n","import {EventData} from \"./EventData\";\r\n\r\n/** Stores the current pose values for an {@link Event}.\r\n *\r\n * See Timeline {@link Timeline#apply()},\r\n * AnimationStateListener {@link AnimationStateListener#event()}, and\r\n * [Events](http://esotericsoftware.com/spine-events) in the Spine User Guide.\r\n * @public\r\n * */\r\nexport class Event {\r\n    data: EventData;\r\n    intValue: number;\r\n    floatValue: number;\r\n    stringValue: string;\r\n    time: number;\r\n    volume: number;\r\n    balance: number;\r\n\r\n    constructor (time: number, data: EventData) {\r\n        if (data == null) throw new Error(\"data cannot be null.\");\r\n        this.time = time;\r\n        this.data = data;\r\n    }\r\n}\r\n","/** Stores the setup pose values for an {@link Event}.\r\n *\r\n * See [Events](http://esotericsoftware.com/spine-events) in the Spine User Guide.\r\n * @public\r\n * */\r\nexport class EventData {\r\n    name: string;\r\n    intValue: number;\r\n    floatValue: number;\r\n    stringValue: string;\r\n    audioPath: string;\r\n    volume: number;\r\n    balance: number;\r\n\r\n    constructor (name: string) {\r\n        this.name = name;\r\n    }\r\n}\r\n","import {Updatable} from \"./Updatable\";\r\nimport {IkConstraintData} from \"./IkConstraintData\";\r\nimport {Bone} from \"./Bone\";\r\nimport {Skeleton} from \"./Skeleton\";\r\nimport {TransformMode} from \"./BoneData\";\r\nimport {MathUtils} from \"@pixi-spine/base\";\r\n\r\n/** Stores the current pose for an IK constraint. An IK constraint adjusts the rotation of 1 or 2 constrained bones so the tip of\r\n * the last bone is as close to the target bone as possible.\r\n *\r\n * See [IK constraints](http://esotericsoftware.com/spine-ik-constraints) in the Spine User Guide.\r\n * @public\r\n * */\r\nexport class IkConstraint implements Updatable {\r\n    /** The IK constraint's setup pose data. */\r\n    data: IkConstraintData;\r\n\r\n    /** The bones that will be modified by this IK constraint. */\r\n    bones: Array<Bone>;\r\n\r\n    /** The bone that is the IK target. */\r\n    target: Bone;\r\n\r\n    /** Controls the bend direction of the IK bones, either 1 or -1. */\r\n    bendDirection = 0;\r\n\r\n    /** When true and only a single bone is being constrained, if the target is too close, the bone is scaled to reach it. */\r\n    compress = false;\r\n\r\n    /** When true, if the target is out of range, the parent bone is scaled to reach it. If more than one bone is being constrained\r\n     * and the parent bone has local nonuniform scale, stretch is not applied. */\r\n    stretch = false;\r\n\r\n    /** A percentage (0-1) that controls the mix between the constrained and unconstrained rotations. */\r\n    mix = 1;\r\n\r\n    /** For two bone IK, the distance from the maximum reach of the bones that rotation will slow. */\r\n    softness = 0;\r\n    active = false;\r\n\r\n    constructor (data: IkConstraintData, skeleton: Skeleton) {\r\n        if (!data) throw new Error(\"data cannot be null.\");\r\n        if (!skeleton) throw new Error(\"skeleton cannot be null.\");\r\n        this.data = data;\r\n        this.mix = data.mix;\r\n        this.softness = data.softness;\r\n        this.bendDirection = data.bendDirection;\r\n        this.compress = data.compress;\r\n        this.stretch = data.stretch;\r\n\r\n        this.bones = new Array<Bone>();\r\n        for (let i = 0; i < data.bones.length; i++)\r\n            this.bones.push(skeleton.findBone(data.bones[i].name));\r\n        this.target = skeleton.findBone(data.target.name);\r\n    }\r\n\r\n    isActive () {\r\n        return this.active;\r\n    }\r\n\r\n    update () {\r\n        if (this.mix == 0) return;\r\n        let target = this.target;\r\n        let bones = this.bones;\r\n        switch (bones.length) {\r\n            case 1:\r\n                this.apply1(bones[0], target.worldX, target.worldY, this.compress, this.stretch, this.data.uniform, this.mix);\r\n                break;\r\n            case 2:\r\n                this.apply2(bones[0], bones[1], target.worldX, target.worldY, this.bendDirection, this.stretch, this.data.uniform, this.softness, this.mix);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /** Applies 1 bone IK. The target is specified in the world coordinate system. */\r\n    apply1 (bone: Bone, targetX: number, targetY: number, compress: boolean, stretch: boolean, uniform: boolean, alpha: number) {\r\n        let p = bone.parent.matrix;\r\n\r\n        let pa = p.a, pb = p.c, pc = p.b, pd = p.d;\r\n        let rotationIK = -bone.ashearX - bone.arotation, tx = 0, ty = 0;\r\n\r\n        switch(bone.data.transformMode) {\r\n            case TransformMode.OnlyTranslation:\r\n                tx = targetX - bone.worldX;\r\n                ty = targetY - bone.worldY;\r\n                break;\r\n            case TransformMode.NoRotationOrReflection:\r\n                let s = Math.abs(pa * pd - pb * pc) / (pa * pa + pc * pc);\r\n                let sa = pa / bone.skeleton.scaleX;\r\n                let sc = pc / bone.skeleton.scaleY;\r\n                pb = -sc * s * bone.skeleton.scaleX;\r\n                pd = sa * s * bone.skeleton.scaleY;\r\n                rotationIK += Math.atan2(sc, sa) * MathUtils.radDeg;\r\n            // Fall through\r\n            default:\r\n                let x = targetX - p.tx, y = targetY - p.ty;\r\n                let d = pa * pd - pb * pc;\r\n                tx = (x * pd - y * pb) / d - bone.ax;\r\n                ty = (y * pa - x * pc) / d - bone.ay;\r\n        }\r\n        rotationIK += Math.atan2(ty, tx) * MathUtils.radDeg;\r\n        if (bone.ascaleX < 0) rotationIK += 180;\r\n        if (rotationIK > 180)\r\n            rotationIK -= 360;\r\n        else if (rotationIK < -180)\r\n            rotationIK += 360;\r\n        let sx = bone.ascaleX, sy = bone.ascaleY;\r\n        if (compress || stretch) {\r\n            switch (bone.data.transformMode) {\r\n                case TransformMode.NoScale:\r\n                case TransformMode.NoScaleOrReflection:\r\n                    tx = targetX - bone.worldX;\r\n                    ty = targetY - bone.worldY;\r\n            }\r\n            let b = bone.data.length * sx, dd = Math.sqrt(tx * tx + ty * ty);\r\n            if ((compress && dd < b) || (stretch && dd > b) && b > 0.0001) {\r\n                let s = (dd / b - 1) * alpha + 1;\r\n                sx *= s;\r\n                if (uniform) sy *= s;\r\n            }\r\n        }\r\n        bone.updateWorldTransformWith(bone.ax, bone.ay, bone.arotation + rotationIK * alpha, sx, sy, bone.ashearX,\r\n            bone.ashearY);\r\n    }\r\n\r\n    /** Applies 2 bone IK. The target is specified in the world coordinate system.\r\n     * @param child A direct descendant of the parent bone. */\r\n    apply2 (parent: Bone, child: Bone, targetX: number, targetY: number, bendDir: number, stretch: boolean, uniform: boolean, softness: number, alpha: number) {\r\n        let px = parent.ax, py = parent.ay, psx = parent.ascaleX, psy = parent.ascaleY, sx = psx, sy = psy, csx = child.ascaleX;\r\n        let pmat = parent.matrix;\r\n        let os1 = 0, os2 = 0, s2 = 0;\r\n        if (psx < 0) {\r\n            psx = -psx;\r\n            os1 = 180;\r\n            s2 = -1;\r\n        } else {\r\n            os1 = 0;\r\n            s2 = 1;\r\n        }\r\n        if (psy < 0) {\r\n            psy = -psy;\r\n            s2 = -s2;\r\n        }\r\n        if (csx < 0) {\r\n            csx = -csx;\r\n            os2 = 180;\r\n        } else\r\n            os2 = 0;\r\n        let cx = child.ax, cy = 0, cwx = 0, cwy = 0, a = pmat.a, b = pmat.c, c = pmat.b, d = pmat.d;\r\n        let u = Math.abs(psx - psy) <= 0.0001;\r\n        if (!u || stretch) {\r\n            cy = 0;\r\n            cwx = a * cx + pmat.tx;\r\n            cwy = c * cx + pmat.ty;\r\n        } else {\r\n            cy = child.ay;\r\n            cwx = a * cx + b * cy + pmat.tx;\r\n            cwy = c * cx + d * cy + pmat.ty;\r\n        }\r\n        let pp = parent.parent.matrix;\r\n        a = pp.a;\r\n        b = pp.c;\r\n        c = pp.b;\r\n        d = pp.d;\r\n        let id = 1 / (a * d - b * c), x = cwx - pp.tx, y = cwy - pp.ty;\r\n        let dx = (x * d - y * b) * id - px, dy = (y * a - x * c) * id - py;\r\n        let l1 = Math.sqrt(dx * dx + dy * dy), l2 = child.data.length * csx, a1, a2;\r\n        if (l1 < 0.0001) {\r\n            this.apply1(parent, targetX, targetY, false, stretch, false, alpha);\r\n            child.updateWorldTransformWith(cx, cy, 0, child.ascaleX, child.ascaleY, child.ashearX, child.ashearY);\r\n            return;\r\n        }\r\n        x = targetX - pp.tx;\r\n        y = targetY - pp.ty;\r\n        let tx = (x * d - y * b) * id - px, ty = (y * a - x * c) * id - py;\r\n        let dd = tx * tx + ty * ty;\r\n        if (softness != 0) {\r\n            softness *= psx * (csx + 1) * 0.5;\r\n            let td = Math.sqrt(dd), sd = td - l1 - l2 * psx + softness;\r\n            if (sd > 0) {\r\n                let p = Math.min(1, sd / (softness * 2)) - 1;\r\n                p = (sd - softness * (1 - p * p)) / td;\r\n                tx -= p * tx;\r\n                ty -= p * ty;\r\n                dd = tx * tx + ty * ty;\r\n            }\r\n        }\r\n        outer:\r\n            if (u) {\r\n                l2 *= psx;\r\n                let cos = (dd - l1 * l1 - l2 * l2) / (2 * l1 * l2);\r\n                if (cos < -1) {\r\n                    cos = -1;\r\n                    a2 = Math.PI * bendDir;\r\n                } else if (cos > 1) {\r\n                    cos = 1;\r\n                    a2 = 0;\r\n                    if (stretch) {\r\n                        a = (Math.sqrt(dd) / (l1 + l2) - 1) * alpha + 1;\r\n                        sx *= a;\r\n                        if (uniform) sy *= a;\r\n                    }\r\n                } else\r\n                    a2 = Math.acos(cos) * bendDir;\r\n                a = l1 + l2 * cos;\r\n                b = l2 * Math.sin(a2);\r\n                a1 = Math.atan2(ty * a - tx * b, tx * a + ty * b);\r\n            } else {\r\n                a = psx * l2;\r\n                b = psy * l2;\r\n                let aa = a * a, bb = b * b, ta = Math.atan2(ty, tx);\r\n                c = bb * l1 * l1 + aa * dd - aa * bb;\r\n                let c1 = -2 * bb * l1, c2 = bb - aa;\r\n                d = c1 * c1 - 4 * c2 * c;\r\n                if (d >= 0) {\r\n                    let q = Math.sqrt(d);\r\n                    if (c1 < 0) q = -q;\r\n                    q = -(c1 + q) * 0.5;\r\n                    let r0 = q / c2, r1 = c / q;\r\n                    let r = Math.abs(r0) < Math.abs(r1) ? r0 : r1;\r\n                    if (r * r <= dd) {\r\n                        y = Math.sqrt(dd - r * r) * bendDir;\r\n                        a1 = ta - Math.atan2(y, r);\r\n                        a2 = Math.atan2(y / psy, (r - l1) / psx);\r\n                        break outer;\r\n                    }\r\n                }\r\n                let minAngle = MathUtils.PI, minX = l1 - a, minDist = minX * minX, minY = 0;\r\n                let maxAngle = 0, maxX = l1 + a, maxDist = maxX * maxX, maxY = 0;\r\n                c = -a * l1 / (aa - bb);\r\n                if (c >= -1 && c <= 1) {\r\n                    c = Math.acos(c);\r\n                    x = a * Math.cos(c) + l1;\r\n                    y = b * Math.sin(c);\r\n                    d = x * x + y * y;\r\n                    if (d < minDist) {\r\n                        minAngle = c;\r\n                        minDist = d;\r\n                        minX = x;\r\n                        minY = y;\r\n                    }\r\n                    if (d > maxDist) {\r\n                        maxAngle = c;\r\n                        maxDist = d;\r\n                        maxX = x;\r\n                        maxY = y;\r\n                    }\r\n                }\r\n                if (dd <= (minDist + maxDist) * 0.5) {\r\n                    a1 = ta - Math.atan2(minY * bendDir, minX);\r\n                    a2 = minAngle * bendDir;\r\n                } else {\r\n                    a1 = ta - Math.atan2(maxY * bendDir, maxX);\r\n                    a2 = maxAngle * bendDir;\r\n                }\r\n            }\r\n        let os = Math.atan2(cy, cx) * s2;\r\n        let rotation = parent.arotation;\r\n        a1 = (a1 - os) * MathUtils.radDeg + os1 - rotation;\r\n        if (a1 > 180)\r\n            a1 -= 360;\r\n        else if (a1 < -180) //\r\n            a1 += 360;\r\n        parent.updateWorldTransformWith(px, py, rotation + a1 * alpha, sx, sy, 0, 0);\r\n        rotation = child.arotation;\r\n        a2 = ((a2 + os) * MathUtils.radDeg - child.ashearX) * s2 + os2 - rotation;\r\n        if (a2 > 180)\r\n            a2 -= 360;\r\n        else if (a2 < -180) //\r\n            a2 += 360;\r\n        child.updateWorldTransformWith(cx, cy, rotation + a2 * alpha, child.ascaleX, child.ascaleY, child.ashearX, child.ashearY);\r\n    }\r\n}\r\n","import {ConstraintData} from \"./ConstraintData\";\r\nimport {BoneData} from \"./BoneData\";\r\n\r\n/** Stores the setup pose for an {@link IkConstraint}.\r\n * <p>\r\n * See [IK constraints](http://esotericsoftware.com/spine-ik-constraints) in the Spine User Guide.\r\n * @public\r\n * */\r\nexport class IkConstraintData extends ConstraintData {\r\n    /** The bones that are constrained by this IK constraint. */\r\n    bones = new Array<BoneData>();\r\n\r\n    /** The bone that is the IK target. */\r\n    target: BoneData;\r\n\r\n    /** Controls the bend direction of the IK bones, either 1 or -1. */\r\n    bendDirection = 1;\r\n\r\n    /** When true and only a single bone is being constrained, if the target is too close, the bone is scaled to reach it. */\r\n    compress = false;\r\n\r\n    /** When true, if the target is out of range, the parent bone is scaled to reach it. If more than one bone is being constrained\r\n     * and the parent bone has local nonuniform scale, stretch is not applied. */\r\n    stretch = false;\r\n\r\n    /** When true, only a single bone is being constrained, and {@link #getCompress()} or {@link #getStretch()} is used, the bone\r\n     * is scaled on both the X and Y axes. */\r\n    uniform = false;\r\n\r\n    /** A percentage (0-1) that controls the mix between the constrained and unconstrained rotations. */\r\n    mix = 1;\r\n\r\n    /** For two bone IK, the distance from the maximum reach of the bones that rotation will slow. */\r\n    softness = 0;\r\n\r\n    constructor (name: string) {\r\n        super(name, 0, false);\r\n    }\r\n}\r\n","import {ConstraintData} from \"./ConstraintData\";\r\nimport type {SlotData} from \"./SlotData\";\r\nimport type {BoneData} from \"./BoneData\";\r\n\r\n/** Stores the setup pose for a {@link PathConstraint}.\r\n *\r\n * See [Path constraints](http://esotericsoftware.com/spine-path-constraints) in the Spine User Guide.\r\n * @public\r\n * */\r\nexport class PathConstraintData extends ConstraintData {\r\n\r\n    /** The bones that will be modified by this path constraint. */\r\n    bones = new Array<BoneData>();\r\n\r\n    /** The slot whose path attachment will be used to constrained the bones. */\r\n    target: SlotData;\r\n\r\n    /** The mode for positioning the first bone on the path. */\r\n    positionMode: PositionMode;\r\n\r\n    /** The mode for positioning the bones after the first bone on the path. */\r\n    spacingMode: SpacingMode;\r\n\r\n    /** The mode for adjusting the rotation of the bones. */\r\n    rotateMode: RotateMode;\r\n\r\n    /** An offset added to the constrained bone rotation. */\r\n    offsetRotation: number;\r\n\r\n    /** The position along the path. */\r\n    position: number;\r\n\r\n    /** The spacing between bones. */\r\n    spacing: number;\r\n\r\n    mixRotate = 0;\r\n    mixX = 0;\r\n    mixY = 0;\r\n\r\n    constructor (name: string) {\r\n        super(name, 0, false);\r\n    }\r\n}\r\n\r\n/** Controls how the first bone is positioned along the path.\r\n *\r\n * See [Position mode](http://esotericsoftware.com/spine-path-constraints#Position-mode) in the Spine User Guide.\r\n * @public\r\n * */\r\nexport enum PositionMode {\r\n    Fixed, Percent\r\n}\r\n\r\n/** Controls how bones after the first bone are positioned along the path.\r\n *\r\n * [Spacing mode](http://esotericsoftware.com/spine-path-constraints#Spacing-mode) in the Spine User Guide.\r\n * @public\r\n * */\r\nexport enum SpacingMode {\r\n    Length, Fixed, Percent, Proportional\r\n}\r\n\r\n/** Controls how bones are rotated, translated, and scaled to match the path.\r\n *\r\n * [Rotate mode](http://esotericsoftware.com/spine-path-constraints#Rotate-mod) in the Spine User Guide.\r\n * @public\r\n * */\r\nexport enum RotateMode {\r\n    Tangent, Chain, ChainScale\r\n}\r\n","import {PathAttachment} from \"./attachments\";\r\nimport {Updatable} from \"./Updatable\";\r\nimport {PathConstraintData, PositionMode, RotateMode, SpacingMode} from \"./PathConstraintData\";\r\nimport {Bone} from \"./Bone\";\r\nimport {Slot} from \"./Slot\";\r\nimport {Skeleton} from \"./Skeleton\";\r\nimport {MathUtils, Utils} from \"@pixi-spine/base\";\r\n/** Stores the current pose for a path constraint. A path constraint adjusts the rotation, translation, and scale of the\r\n * constrained bones so they follow a {@link PathAttachment}.\r\n *\r\n * See [Path constraints](http://esotericsoftware.com/spine-path-constraints) in the Spine User Guide.\r\n * @public\r\n * */\r\nexport class PathConstraint implements Updatable {\r\n    static NONE = -1; static BEFORE = -2; static AFTER = -3;\r\n    static epsilon = 0.00001;\r\n\r\n    /** The path constraint's setup pose data. */\r\n    data: PathConstraintData;\r\n\r\n    /** The bones that will be modified by this path constraint. */\r\n    bones: Array<Bone>;\r\n\r\n    /** The slot whose path attachment will be used to constrained the bones. */\r\n    target: Slot;\r\n\r\n    /** The position along the path. */\r\n    position = 0;\r\n\r\n    /** The spacing between bones. */\r\n    spacing = 0;\r\n\r\n    mixRotate = 0;\r\n\r\n    mixX = 0;\r\n\r\n    mixY = 0;\r\n\r\n    spaces = new Array<number>(); positions = new Array<number>();\r\n    world = new Array<number>(); curves = new Array<number>(); lengths = new Array<number>();\r\n    segments = new Array<number>();\r\n\r\n    active = false;\r\n\r\n    constructor (data: PathConstraintData, skeleton: Skeleton) {\r\n        if (data == null) throw new Error(\"data cannot be null.\");\r\n        if (skeleton == null) throw new Error(\"skeleton cannot be null.\");\r\n        this.data = data;\r\n        this.bones = new Array<Bone>();\r\n        for (let i = 0, n = data.bones.length; i < n; i++)\r\n            this.bones.push(skeleton.findBone(data.bones[i].name));\r\n        this.target = skeleton.findSlot(data.target.name);\r\n        this.position = data.position;\r\n        this.spacing = data.spacing;\r\n        this.mixRotate = data.mixRotate;\r\n        this.mixX = data.mixX;\r\n        this.mixY = data.mixY;\r\n    }\r\n\r\n    isActive () {\r\n        return this.active;\r\n    }\r\n\r\n    update () {\r\n        let attachment = this.target.getAttachment();\r\n        if (!(attachment instanceof PathAttachment)) return;\r\n\r\n        let mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY;\r\n        if (mixRotate == 0 && mixX == 0 && mixY == 0) return;\r\n\r\n        let data = this.data;\r\n        let tangents = data.rotateMode == RotateMode.Tangent, scale = data.rotateMode == RotateMode.ChainScale;\r\n\r\n        let boneCount = this.bones.length, spacesCount = tangents ? boneCount : boneCount + 1;\r\n        let bones = this.bones;\r\n        let spaces = Utils.setArraySize(this.spaces, spacesCount), lengths: Array<number> = scale ? this.lengths = Utils.setArraySize(this.lengths, boneCount) : null;\r\n        let spacing = this.spacing;\r\n\r\n        switch (data.spacingMode) {\r\n            case SpacingMode.Percent:\r\n                if (scale) {\r\n                    for (let i = 0, n = spacesCount - 1; i < n; i++) {\r\n                        let bone = bones[i];\r\n                        let setupLength = bone.data.length;\r\n                        if (setupLength < PathConstraint.epsilon)\r\n                            lengths[i] = 0;\r\n                        else {\r\n                            let x = setupLength * bone.matrix.a, y = setupLength * bone.matrix.b;\r\n                            lengths[i] = Math.sqrt(x * x + y * y);\r\n                        }\r\n                    }\r\n                }\r\n                Utils.arrayFill(spaces, 1, spacesCount, spacing);\r\n                break;\r\n            case SpacingMode.Proportional:\r\n                let sum = 0;\r\n                for (let i = 0, n = spacesCount - 1; i < n;) {\r\n                    let bone = bones[i];\r\n                    let setupLength = bone.data.length;\r\n                    if (setupLength < PathConstraint.epsilon) {\r\n                        if (scale) lengths[i] = 0;\r\n                        spaces[++i] = spacing;\r\n                    } else {\r\n                        let x = setupLength * bone.matrix.a, y = setupLength * bone.matrix.b;\r\n                        let length = Math.sqrt(x * x + y * y);\r\n                        if (scale) lengths[i] = length;\r\n                        spaces[++i] = length;\r\n                        sum += length;\r\n                    }\r\n                }\r\n                if (sum > 0) {\r\n                    sum = spacesCount / sum * spacing;\r\n                    for (let i = 1; i < spacesCount; i++)\r\n                        spaces[i] *= sum;\r\n                }\r\n                break;\r\n            default:\r\n                let lengthSpacing = data.spacingMode == SpacingMode.Length;\r\n                for (let i = 0, n = spacesCount - 1; i < n;) {\r\n                    let bone = bones[i];\r\n                    let setupLength = bone.data.length;\r\n                    if (setupLength < PathConstraint.epsilon) {\r\n                        if (scale) lengths[i] = 0;\r\n                        spaces[++i] = spacing;\r\n                    } else {\r\n                        let x = setupLength * bone.matrix.a, y = setupLength * bone.matrix.b;\r\n                        let length = Math.sqrt(x * x + y * y);\r\n                        if (scale) lengths[i] = length;\r\n                        spaces[++i] = (lengthSpacing ? setupLength + spacing : spacing) * length / setupLength;\r\n                    }\r\n                }\r\n        }\r\n\r\n        let positions = this.computeWorldPositions(<PathAttachment>attachment, spacesCount, tangents);\r\n        let boneX = positions[0], boneY = positions[1], offsetRotation = data.offsetRotation;\r\n        let tip = false;\r\n        if (offsetRotation == 0)\r\n            tip = data.rotateMode == RotateMode.Chain;\r\n        else {\r\n            tip = false;\r\n            let p = this.target.bone.matrix;\r\n            offsetRotation *= p.a * p.d - p.b * p.c > 0 ? MathUtils.degRad : -MathUtils.degRad;\r\n        }\r\n        for (let i = 0, p = 3; i < boneCount; i++, p += 3) {\r\n            let bone = bones[i];\r\n            let mat = bone.matrix;\r\n            mat.tx += (boneX - mat.tx) * mixX;\r\n            mat.ty += (boneY - mat.ty) * mixY;\r\n            let x = positions[p], y = positions[p + 1], dx = x - boneX, dy = y - boneY;\r\n            if (scale) {\r\n                let length = lengths[i];\r\n                if (length != 0) {\r\n                    let s = (Math.sqrt(dx * dx + dy * dy) / length - 1) * mixRotate + 1;\r\n                    mat.a *= s;\r\n                    mat.b *= s;\r\n                }\r\n            }\r\n            boneX = x;\r\n            boneY = y;\r\n            if (mixRotate > 0) {\r\n                let a = mat.a, b = mat.c, c = mat.b, d = mat.d, r = 0, cos = 0, sin = 0;\r\n                if (tangents)\r\n                    r = positions[p - 1];\r\n                else if (spaces[i + 1] == 0)\r\n                    r = positions[p + 2];\r\n                else\r\n                    r = Math.atan2(dy, dx);\r\n                r -= Math.atan2(c, a);\r\n                if (tip) {\r\n                    cos = Math.cos(r);\r\n                    sin = Math.sin(r);\r\n                    let length = bone.data.length;\r\n                    boneX += (length * (cos * a - sin * c) - dx) * mixRotate;\r\n                    boneY += (length * (sin * a + cos * c) - dy) * mixRotate;\r\n                } else {\r\n                    r += offsetRotation;\r\n                }\r\n                if (r > MathUtils.PI)\r\n                    r -= MathUtils.PI2;\r\n                else if (r < -MathUtils.PI) //\r\n                    r += MathUtils.PI2;\r\n                r *= mixRotate;\r\n                cos = Math.cos(r);\r\n                sin = Math.sin(r);\r\n                mat.a = cos * a - sin * c;\r\n                mat.c = cos * b - sin * d;\r\n                mat.b = sin * a + cos * c;\r\n                mat.d = sin * b + cos * d;\r\n            }\r\n            bone.updateAppliedTransform();\r\n        }\r\n    }\r\n\r\n    computeWorldPositions (path: PathAttachment, spacesCount: number, tangents: boolean) {\r\n        let target = this.target;\r\n        let position = this.position;\r\n        let spaces = this.spaces, out = Utils.setArraySize(this.positions, spacesCount * 3 + 2), world: Array<number> = null;\r\n        let closed = path.closed;\r\n        let verticesLength = path.worldVerticesLength, curveCount = verticesLength / 6, prevCurve = PathConstraint.NONE;\r\n\r\n        if (!path.constantSpeed) {\r\n            let lengths = path.lengths;\r\n            curveCount -= closed ? 1 : 2;\r\n            let pathLength = lengths[curveCount];\r\n            if (this.data.positionMode == PositionMode.Percent) position *= pathLength;\r\n\r\n            let multiplier;\r\n            switch (this.data.spacingMode) {\r\n                case SpacingMode.Percent:\r\n                    multiplier = pathLength;\r\n                    break;\r\n                case SpacingMode.Proportional:\r\n                    multiplier = pathLength / spacesCount;\r\n                    break;\r\n                default:\r\n                    multiplier = 1;\r\n            }\r\n            world = Utils.setArraySize(this.world, 8);\r\n            for (let i = 0, o = 0, curve = 0; i < spacesCount; i++, o += 3) {\r\n                let space = spaces[i] * multiplier;\r\n                position += space;\r\n                let p = position;\r\n\r\n                if (closed) {\r\n                    p %= pathLength;\r\n                    if (p < 0) p += pathLength;\r\n                    curve = 0;\r\n                } else if (p < 0) {\r\n                    if (prevCurve != PathConstraint.BEFORE) {\r\n                        prevCurve = PathConstraint.BEFORE;\r\n                        path.computeWorldVertices(target, 2, 4, world, 0, 2);\r\n                    }\r\n                    this.addBeforePosition(p, world, 0, out, o);\r\n                    continue;\r\n                } else if (p > pathLength) {\r\n                    if (prevCurve != PathConstraint.AFTER) {\r\n                        prevCurve = PathConstraint.AFTER;\r\n                        path.computeWorldVertices(target, verticesLength - 6, 4, world, 0, 2);\r\n                    }\r\n                    this.addAfterPosition(p - pathLength, world, 0, out, o);\r\n                    continue;\r\n                }\r\n\r\n                // Determine curve containing position.\r\n                for (;; curve++) {\r\n                    let length = lengths[curve];\r\n                    if (p > length) continue;\r\n                    if (curve == 0)\r\n                        p /= length;\r\n                    else {\r\n                        let prev = lengths[curve - 1];\r\n                        p = (p - prev) / (length - prev);\r\n                    }\r\n                    break;\r\n                }\r\n                if (curve != prevCurve) {\r\n                    prevCurve = curve;\r\n                    if (closed && curve == curveCount) {\r\n                        path.computeWorldVertices(target, verticesLength - 4, 4, world, 0, 2);\r\n                        path.computeWorldVertices(target, 0, 4, world, 4, 2);\r\n                    } else\r\n                        path.computeWorldVertices(target, curve * 6 + 2, 8, world, 0, 2);\r\n                }\r\n                this.addCurvePosition(p, world[0], world[1], world[2], world[3], world[4], world[5], world[6], world[7], out, o,\r\n                    tangents || (i > 0 && space == 0));\r\n            }\r\n            return out;\r\n        }\r\n\r\n        // World vertices.\r\n        if (closed) {\r\n            verticesLength += 2;\r\n            world = Utils.setArraySize(this.world, verticesLength);\r\n            path.computeWorldVertices(target, 2, verticesLength - 4, world, 0, 2);\r\n            path.computeWorldVertices(target, 0, 2, world, verticesLength - 4, 2);\r\n            world[verticesLength - 2] = world[0];\r\n            world[verticesLength - 1] = world[1];\r\n        } else {\r\n            curveCount--;\r\n            verticesLength -= 4;\r\n            world = Utils.setArraySize(this.world, verticesLength);\r\n            path.computeWorldVertices(target, 2, verticesLength, world, 0, 2);\r\n        }\r\n\r\n        // Curve lengths.\r\n        let curves = Utils.setArraySize(this.curves, curveCount);\r\n        let pathLength = 0;\r\n        let x1 = world[0], y1 = world[1], cx1 = 0, cy1 = 0, cx2 = 0, cy2 = 0, x2 = 0, y2 = 0;\r\n        let tmpx = 0, tmpy = 0, dddfx = 0, dddfy = 0, ddfx = 0, ddfy = 0, dfx = 0, dfy = 0;\r\n        for (let i = 0, w = 2; i < curveCount; i++, w += 6) {\r\n            cx1 = world[w];\r\n            cy1 = world[w + 1];\r\n            cx2 = world[w + 2];\r\n            cy2 = world[w + 3];\r\n            x2 = world[w + 4];\r\n            y2 = world[w + 5];\r\n            tmpx = (x1 - cx1 * 2 + cx2) * 0.1875;\r\n            tmpy = (y1 - cy1 * 2 + cy2) * 0.1875;\r\n            dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.09375;\r\n            dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.09375;\r\n            ddfx = tmpx * 2 + dddfx;\r\n            ddfy = tmpy * 2 + dddfy;\r\n            dfx = (cx1 - x1) * 0.75 + tmpx + dddfx * 0.16666667;\r\n            dfy = (cy1 - y1) * 0.75 + tmpy + dddfy * 0.16666667;\r\n            pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\r\n            dfx += ddfx;\r\n            dfy += ddfy;\r\n            ddfx += dddfx;\r\n            ddfy += dddfy;\r\n            pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\r\n            dfx += ddfx;\r\n            dfy += ddfy;\r\n            pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\r\n            dfx += ddfx + dddfx;\r\n            dfy += ddfy + dddfy;\r\n            pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\r\n            curves[i] = pathLength;\r\n            x1 = x2;\r\n            y1 = y2;\r\n        }\r\n\r\n        if (this.data.positionMode == PositionMode.Percent) position *= pathLength;\r\n\r\n        let multiplier = 0;\r\n        switch (this.data.spacingMode) {\r\n            case SpacingMode.Percent:\r\n                multiplier = pathLength;\r\n                break;\r\n            case SpacingMode.Proportional:\r\n                multiplier = pathLength / spacesCount;\r\n                break;\r\n            default:\r\n                multiplier = 1;\r\n        }\r\n\r\n        let segments = this.segments;\r\n        let curveLength = 0;\r\n        for (let i = 0, o = 0, curve = 0, segment = 0; i < spacesCount; i++, o += 3) {\r\n            let space = spaces[i] * multiplier;\r\n            position += space;\r\n            let p = position;\r\n\r\n            if (closed) {\r\n                p %= pathLength;\r\n                if (p < 0) p += pathLength;\r\n                curve = 0;\r\n            } else if (p < 0) {\r\n                this.addBeforePosition(p, world, 0, out, o);\r\n                continue;\r\n            } else if (p > pathLength) {\r\n                this.addAfterPosition(p - pathLength, world, verticesLength - 4, out, o);\r\n                continue;\r\n            }\r\n\r\n            // Determine curve containing position.\r\n            for (;; curve++) {\r\n                let length = curves[curve];\r\n                if (p > length) continue;\r\n                if (curve == 0)\r\n                    p /= length;\r\n                else {\r\n                    let prev = curves[curve - 1];\r\n                    p = (p - prev) / (length - prev);\r\n                }\r\n                break;\r\n            }\r\n\r\n            // Curve segment lengths.\r\n            if (curve != prevCurve) {\r\n                prevCurve = curve;\r\n                let ii = curve * 6;\r\n                x1 = world[ii];\r\n                y1 = world[ii + 1];\r\n                cx1 = world[ii + 2];\r\n                cy1 = world[ii + 3];\r\n                cx2 = world[ii + 4];\r\n                cy2 = world[ii + 5];\r\n                x2 = world[ii + 6];\r\n                y2 = world[ii + 7];\r\n                tmpx = (x1 - cx1 * 2 + cx2) * 0.03;\r\n                tmpy = (y1 - cy1 * 2 + cy2) * 0.03;\r\n                dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.006;\r\n                dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.006;\r\n                ddfx = tmpx * 2 + dddfx;\r\n                ddfy = tmpy * 2 + dddfy;\r\n                dfx = (cx1 - x1) * 0.3 + tmpx + dddfx * 0.16666667;\r\n                dfy = (cy1 - y1) * 0.3 + tmpy + dddfy * 0.16666667;\r\n                curveLength = Math.sqrt(dfx * dfx + dfy * dfy);\r\n                segments[0] = curveLength;\r\n                for (ii = 1; ii < 8; ii++) {\r\n                    dfx += ddfx;\r\n                    dfy += ddfy;\r\n                    ddfx += dddfx;\r\n                    ddfy += dddfy;\r\n                    curveLength += Math.sqrt(dfx * dfx + dfy * dfy);\r\n                    segments[ii] = curveLength;\r\n                }\r\n                dfx += ddfx;\r\n                dfy += ddfy;\r\n                curveLength += Math.sqrt(dfx * dfx + dfy * dfy);\r\n                segments[8] = curveLength;\r\n                dfx += ddfx + dddfx;\r\n                dfy += ddfy + dddfy;\r\n                curveLength += Math.sqrt(dfx * dfx + dfy * dfy);\r\n                segments[9] = curveLength;\r\n                segment = 0;\r\n            }\r\n\r\n            // Weight by segment length.\r\n            p *= curveLength;\r\n            for (;; segment++) {\r\n                let length = segments[segment];\r\n                if (p > length) continue;\r\n                if (segment == 0)\r\n                    p /= length;\r\n                else {\r\n                    let prev = segments[segment - 1];\r\n                    p = segment + (p - prev) / (length - prev);\r\n                }\r\n                break;\r\n            }\r\n            this.addCurvePosition(p * 0.1, x1, y1, cx1, cy1, cx2, cy2, x2, y2, out, o, tangents || (i > 0 && space == 0));\r\n        }\r\n        return out;\r\n    }\r\n\r\n    addBeforePosition (p: number, temp: Array<number>, i: number, out: Array<number>, o: number) {\r\n        let x1 = temp[i], y1 = temp[i + 1], dx = temp[i + 2] - x1, dy = temp[i + 3] - y1, r = Math.atan2(dy, dx);\r\n        out[o] = x1 + p * Math.cos(r);\r\n        out[o + 1] = y1 + p * Math.sin(r);\r\n        out[o + 2] = r;\r\n    }\r\n\r\n    addAfterPosition (p: number, temp: Array<number>, i: number, out: Array<number>, o: number) {\r\n        let x1 = temp[i + 2], y1 = temp[i + 3], dx = x1 - temp[i], dy = y1 - temp[i + 1], r = Math.atan2(dy, dx);\r\n        out[o] = x1 + p * Math.cos(r);\r\n        out[o + 1] = y1 + p * Math.sin(r);\r\n        out[o + 2] = r;\r\n    }\r\n\r\n    addCurvePosition (p: number, x1: number, y1: number, cx1: number, cy1: number, cx2: number, cy2: number, x2: number, y2: number,\r\n                      out: Array<number>, o: number, tangents: boolean) {\r\n        if (p == 0 || isNaN(p)) {\r\n            out[o] = x1;\r\n            out[o + 1] = y1;\r\n            out[o + 2] = Math.atan2(cy1 - y1, cx1 - x1);\r\n            return;\r\n        }\r\n        let tt = p * p, ttt = tt * p, u = 1 - p, uu = u * u, uuu = uu * u;\r\n        let ut = u * p, ut3 = ut * 3, uut3 = u * ut3, utt3 = ut3 * p;\r\n        let x = x1 * uuu + cx1 * uut3 + cx2 * utt3 + x2 * ttt, y = y1 * uuu + cy1 * uut3 + cy2 * utt3 + y2 * ttt;\r\n        out[o] = x;\r\n        out[o + 1] = y;\r\n        if (tangents) {\r\n            if (p < 0.001)\r\n                out[o + 2] = Math.atan2(cy1 - y1, cx1 - x1);\r\n            else\r\n                out[o + 2] = Math.atan2(y - (y1 * uu + cy1 * ut * 2 + cy2 * tt), x - (x1 * uu + cx1 * ut * 2 + cx2 * tt));\r\n        }\r\n    }\r\n}\r\n","import {Color, ISlot} from '@pixi-spine/base';\r\n\r\nimport type {Attachment} from './attachments/Attachment';\r\nimport type {Bone} from './Bone';\r\nimport type {SlotData} from './SlotData';\r\nimport type {Skeleton} from './Skeleton';\r\n\r\n/** Stores a slot's current pose. Slots organize attachments for {@link Skeleton#drawOrder} purposes and provide a place to store\r\n * state for an attachment. State cannot be stored in an attachment itself because attachments are stateless and may be shared\r\n * across multiple skeletons.\r\n * @public\r\n * */\r\nexport class Slot implements ISlot {\r\n    //this is canon\r\n    blendMode: number;\r\n    /** The slot's setup pose data. */\r\n    data: SlotData;\r\n\r\n    /** The bone this slot belongs to. */\r\n    bone: Bone;\r\n\r\n    /** The color used to tint the slot's attachment. If {@link #getDarkColor()} is set, this is used as the light color for two\r\n     * color tinting. */\r\n    color: Color;\r\n\r\n    /** The dark color used to tint the slot's attachment for two color tinting, or null if two color tinting is not used. The dark\r\n     * color's alpha is not used. */\r\n    darkColor: Color;\r\n\r\n    attachment: Attachment;\r\n\r\n    private attachmentTime: number;\r\n\r\n    attachmentState: number;\r\n\r\n    /** Values to deform the slot's attachment. For an unweighted mesh, the entries are local positions for each vertex. For a\r\n     * weighted mesh, the entries are an offset for each vertex which will be added to the mesh's local vertex positions.\r\n     *\r\n     * See {@link VertexAttachment#computeWorldVertices()} and {@link DeformTimeline}. */\r\n    deform = new Array<number>();\r\n\r\n    constructor (data: SlotData, bone: Bone) {\r\n        if (data == null) throw new Error(\"data cannot be null.\");\r\n        if (bone == null) throw new Error(\"bone cannot be null.\");\r\n        this.data = data;\r\n        this.bone = bone;\r\n        this.color = new Color();\r\n        this.darkColor = data.darkColor == null ? null : new Color();\r\n        this.setToSetupPose();\r\n\r\n        this.blendMode = this.data.blendMode;\r\n    }\r\n\r\n    /** The skeleton this slot belongs to. */\r\n    getSkeleton (): Skeleton {\r\n        return this.bone.skeleton;\r\n    }\r\n\r\n    /** The current attachment for the slot, or null if the slot has no attachment. */\r\n    getAttachment (): Attachment {\r\n        return this.attachment;\r\n    }\r\n\r\n    /** Sets the slot's attachment and, if the attachment changed, resets {@link #attachmentTime} and clears {@link #deform}.\r\n     * @param attachment May be null. */\r\n    setAttachment (attachment: Attachment) {\r\n        if (this.attachment == attachment) return;\r\n        this.attachment = attachment;\r\n        this.attachmentTime = this.bone.skeleton.time;\r\n        this.deform.length = 0;\r\n    }\r\n\r\n    setAttachmentTime (time: number) {\r\n        this.attachmentTime = this.bone.skeleton.time - time;\r\n    }\r\n\r\n    /** The time that has elapsed since the last time the attachment was set or cleared. Relies on Skeleton\r\n     * {@link Skeleton#time}. */\r\n    getAttachmentTime (): number {\r\n        return this.bone.skeleton.time - this.attachmentTime;\r\n    }\r\n\r\n    /** Sets this slot to the setup pose. */\r\n    setToSetupPose () {\r\n        this.color.setFromColor(this.data.color);\r\n        if (this.darkColor != null) this.darkColor.setFromColor(this.data.darkColor);\r\n        if (this.data.attachmentName == null)\r\n            this.attachment = null;\r\n        else {\r\n            this.attachment = null;\r\n            this.setAttachment(this.bone.skeleton.getAttachment(this.data.index, this.data.attachmentName));\r\n        }\r\n    }\r\n}\r\n","import {Updatable} from \"./Updatable\";\nimport {TransformConstraintData} from \"./TransformConstraintData\";\nimport {Bone} from \"./Bone\";\nimport {MathUtils, Vector2} from \"@pixi-spine/base\";\nimport {Skeleton} from \"./Skeleton\";\n\n/** Stores the current pose for a transform constraint. A transform constraint adjusts the world transform of the constrained\n * bones to match that of the target bone.\n *\n * See [Transform constraints](http://esotericsoftware.com/spine-transform-constraints) in the Spine User Guide.\n * @public\n * */\nexport class TransformConstraint implements Updatable {\n\n    /** The transform constraint's setup pose data. */\n    data: TransformConstraintData;\n\n    /** The bones that will be modified by this transform constraint. */\n    bones: Array<Bone>;\n\n    /** The target bone whose world transform will be copied to the constrained bones. */\n    target: Bone;\n\n    mixRotate = 0; mixX = 0; mixY = 0; mixScaleX = 0; mixScaleY = 0; mixShearY = 0;\n\n    temp = new Vector2();\n    active = false;\n\n    constructor (data: TransformConstraintData, skeleton: Skeleton) {\n        if (!data) throw new Error(\"data cannot be null.\");\n        if (!skeleton) throw new Error(\"skeleton cannot be null.\");\n        this.data = data;\n        this.mixRotate = data.mixRotate;\n        this.mixX = data.mixX;\n        this.mixY = data.mixY;\n        this.mixScaleX = data.mixScaleX;\n        this.mixScaleY = data.mixScaleY;\n        this.mixShearY = data.mixShearY;\n        this.bones = new Array<Bone>();\n        for (let i = 0; i < data.bones.length; i++)\n            this.bones.push(skeleton.findBone(data.bones[i].name));\n        this.target = skeleton.findBone(data.target.name);\n    }\n\n    isActive () {\n        return this.active;\n    }\n\n    update () {\n        if (this.mixRotate == 0 && this.mixX == 0 && this.mixY == 0 && this.mixScaleX == 0 && this.mixScaleX == 0 && this.mixShearY == 0) return;\n\n        if (this.data.local) {\n            if (this.data.relative)\n                this.applyRelativeLocal();\n            else\n                this.applyAbsoluteLocal();\n        } else {\n            if (this.data.relative)\n                this.applyRelativeWorld();\n            else\n                this.applyAbsoluteWorld();\n        }\n    }\n\n    applyAbsoluteWorld () {\n        let mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY, mixScaleX = this.mixScaleX,\n            mixScaleY = this.mixScaleY, mixShearY = this.mixShearY;\n        let translate = mixX != 0 || mixY != 0;\n\n        let target = this.target;\n        const targetMat = target.matrix;\n        let ta = targetMat.a, tb = targetMat.c, tc = targetMat.b, td = targetMat.d;\n        let degRadReflect = ta * td - tb * tc > 0 ? MathUtils.degRad : -MathUtils.degRad;\n        let offsetRotation = this.data.offsetRotation * degRadReflect;\n        let offsetShearY = this.data.offsetShearY * degRadReflect;\n\n        let bones = this.bones;\n        for (let i = 0, n = bones.length; i < n; i++) {\n            let bone = bones[i];\n            const mat = bone.matrix;\n\n            if (mixRotate != 0) {\n                let a = mat.a, b = mat.c, c = mat.b, d = mat.d;\n                let r = Math.atan2(tc, ta) - Math.atan2(c, a) + offsetRotation;\n                if (r > MathUtils.PI)\n                    r -= MathUtils.PI2;\n                else if (r < -MathUtils.PI) //\n                    r += MathUtils.PI2;\n                r *= mixRotate;\n                let cos = Math.cos(r), sin = Math.sin(r);\n                mat.a = cos * a - sin * c;\n                mat.c = cos * b - sin * d;\n                mat.b = sin * a + cos * c;\n                mat.d = sin * b + cos * d;\n            }\n\n            if (translate) {\n                let temp = this.temp;\n                target.localToWorld(temp.set(this.data.offsetX, this.data.offsetY));\n                mat.tx += (temp.x - mat.tx) * mixX;\n                mat.ty += (temp.y - mat.ty) * mixY;\n            }\n\n            if (mixScaleX != 0) {\n                let s = Math.sqrt(mat.a * mat.a + mat.b * mat.b);\n                if (s != 0) s = (s + (Math.sqrt(ta * ta + tc * tc) - s + this.data.offsetScaleX) * mixScaleX) / s;\n                mat.a *= s;\n                mat.b *= s;\n            }\n            if (mixScaleY != 0) {\n                let s = Math.sqrt(mat.c * mat.c + mat.d * mat.d);\n                if (s != 0) s = (s + (Math.sqrt(tb * tb + td * td) - s + this.data.offsetScaleY) * mixScaleY) / s;\n                mat.c *= s;\n                mat.d *= s;\n\n            }\n\n            if (mixShearY > 0) {\n                let b = mat.c, d = mat.d;\n                let by = Math.atan2(d, b);\n                let r = Math.atan2(td, tb) - Math.atan2(tc, ta) - (by - Math.atan2(mat.b, mat.a));\n                if (r > MathUtils.PI)\n                    r -= MathUtils.PI2;\n                else if (r < -MathUtils.PI) //\n                    r += MathUtils.PI2;\n                r = by + (r + offsetShearY) * mixShearY;\n                let s = Math.sqrt(b * b + d * d);\n                mat.c = Math.cos(r) * s;\n                mat.d = Math.sin(r) * s;\n\n            }\n\n            bone.updateAppliedTransform();\n        }\n    }\n\n    applyRelativeWorld () {\n        let mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY, mixScaleX = this.mixScaleX,\n            mixScaleY = this.mixScaleY, mixShearY = this.mixShearY;\n        let translate = mixX != 0 || mixY != 0;\n\n        let target = this.target;\n        let targetMat = target.matrix;\n        let ta = targetMat.a, tb = targetMat.c, tc = targetMat.b, td = targetMat.d;\n        let degRadReflect = ta * td - tb * tc > 0 ? MathUtils.degRad : -MathUtils.degRad;\n        let offsetRotation = this.data.offsetRotation * degRadReflect, offsetShearY = this.data.offsetShearY * degRadReflect;\n\n        let bones = this.bones;\n        for (let i = 0, n = bones.length; i < n; i++) {\n            let bone = bones[i];\n            const mat = bone.matrix;\n\n            if (mixRotate != 0) {\n                let a = mat.a, b = mat.c, c = mat.b, d = mat.d;\n                let r = Math.atan2(tc, ta) + offsetRotation;\n                if (r > MathUtils.PI)\n                    r -= MathUtils.PI2;\n                else if (r < -MathUtils.PI) //\n                    r += MathUtils.PI2;\n                r *= mixRotate;\n                let cos = Math.cos(r), sin = Math.sin(r);\n                mat.a = cos * a - sin * c;\n                mat.c = cos * b - sin * d;\n                mat.b = sin * a + cos * c;\n                mat.d = sin * b + cos * d;\n            }\n\n            if (translate) {\n                let temp = this.temp;\n                target.localToWorld(temp.set(this.data.offsetX, this.data.offsetY));\n                mat.tx += temp.x * mixX;\n                mat.ty += temp.y * mixY;\n            }\n\n            if (mixScaleX != 0) {\n                let s = (Math.sqrt(ta * ta + tc * tc) - 1 + this.data.offsetScaleX) * mixScaleX + 1;\n                mat.a *= s;\n                mat.b *= s;\n            }\n            if (mixScaleY != 0) {\n                let s = (Math.sqrt(tb * tb + td * td) - 1 + this.data.offsetScaleY) * mixScaleY + 1;\n                mat.c *= s;\n                mat.d *= s;\n            }\n\n            if (mixShearY > 0) {\n                let r = Math.atan2(td, tb) - Math.atan2(tc, ta);\n                if (r > MathUtils.PI)\n                    r -= MathUtils.PI2;\n                else if (r < -MathUtils.PI) //\n                    r += MathUtils.PI2;\n                let b = mat.c, d = mat.d;\n                r = Math.atan2(d, b) + (r - MathUtils.PI / 2 + offsetShearY) * mixShearY;\n                let s = Math.sqrt(b * b + d * d);\n                mat.c = Math.cos(r) * s;\n                mat.d = Math.sin(r) * s;\n            }\n\n            bone.updateAppliedTransform();\n        }\n    }\n\n    applyAbsoluteLocal () {\n        let mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY, mixScaleX = this.mixScaleX,\n            mixScaleY = this.mixScaleY, mixShearY = this.mixShearY;\n\n        let target = this.target;\n\n        let bones = this.bones;\n        for (let i = 0, n = bones.length; i < n; i++) {\n            let bone = bones[i];\n\n            let rotation = bone.arotation;\n            if (mixRotate != 0) {\n                let r = target.arotation - rotation + this.data.offsetRotation;\n                r -= (16384 - ((16384.499999999996 - r / 360) | 0)) * 360;\n                rotation += r * mixRotate;\n            }\n\n            let x = bone.ax, y = bone.ay;\n            x += (target.ax - x + this.data.offsetX) * mixX;\n            y += (target.ay - y + this.data.offsetY) * mixY;\n\n            let scaleX = bone.ascaleX, scaleY = bone.ascaleY;\n            if (mixScaleX != 0 && scaleX != 0)\n                scaleX = (scaleX + (target.ascaleX - scaleX + this.data.offsetScaleX) * mixScaleX) / scaleX;\n            if (mixScaleY != 0 && scaleY != 0)\n                scaleY = (scaleY + (target.ascaleY - scaleY + this.data.offsetScaleY) * mixScaleY) / scaleY;\n\n            let shearY = bone.ashearY;\n            if (mixShearY != 0) {\n                let r = target.ashearY - shearY + this.data.offsetShearY;\n                r -= (16384 - ((16384.499999999996 - r / 360) | 0)) * 360;\n                shearY += r * mixShearY;\n            }\n\n            bone.updateWorldTransformWith(x, y, rotation, scaleX, scaleY, bone.ashearX, shearY);\n        }\n    }\n\n    applyRelativeLocal () {\n        let mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY, mixScaleX = this.mixScaleX,\n            mixScaleY = this.mixScaleY, mixShearY = this.mixShearY;\n\n        let target = this.target;\n\n        let bones = this.bones;\n        for (let i = 0, n = bones.length; i < n; i++) {\n            let bone = bones[i];\n\n            let rotation = bone.arotation + (target.arotation + this.data.offsetRotation) * mixRotate;\n            let x = bone.ax + (target.ax + this.data.offsetX) * mixX;\n            let y = bone.ay + (target.ay + this.data.offsetY) * mixY;\n            let scaleX = (bone.ascaleX * ((target.ascaleX - 1 + this.data.offsetScaleX) * mixScaleX) + 1);\n            let scaleY = (bone.ascaleY * ((target.ascaleY - 1 + this.data.offsetScaleY) * mixScaleY) + 1);\n            let shearY = bone.ashearY + (target.ashearY + this.data.offsetShearY) * mixShearY;\n\n            bone.updateWorldTransformWith(x, y, rotation, scaleX, scaleY, bone.ashearX, shearY);\n        }\n    }\n}\n","import {Attachment, RegionAttachment, MeshAttachment, PathAttachment} from './attachments';\nimport {Bone} from \"./Bone\";\nimport {Slot} from \"./Slot\";\nimport {Updatable} from \"./Updatable\";\nimport {SkeletonData} from \"./SkeletonData\";\nimport {IkConstraint} from \"./IkConstraint\";\nimport {TransformConstraint} from \"./TransformConstraint\";\nimport {PathConstraint} from \"./PathConstraint\";\nimport {Skin} from \"./Skin\";\nimport {Color, MathUtils, settings, Utils, Vector2, ISkeleton} from \"@pixi-spine/base\";\n\n/** Stores the current pose for a skeleton.\n *\n * See [Instance objects](http://esotericsoftware.com/spine-runtime-architecture#Instance-objects) in the Spine Runtimes Guide.\n * @public\n * */\nexport class Skeleton implements ISkeleton<Bone, Slot> {\n    /** The skeleton's setup pose data. */\n    data: SkeletonData;\n\n    /** The skeleton's bones, sorted parent first. The root bone is always the first bone. */\n    bones: Array<Bone>;\n\n    /** The skeleton's slots. */\n    slots: Array<Slot>;\n\n    /** The skeleton's slots in the order they should be drawn. The returned array may be modified to change the draw order. */\n    drawOrder: Array<Slot>;\n\n    /** The skeleton's IK constraints. */\n    ikConstraints: Array<IkConstraint>;\n\n    /** The skeleton's transform constraints. */\n    transformConstraints: Array<TransformConstraint>;\n\n    /** The skeleton's path constraints. */\n    pathConstraints: Array<PathConstraint>;\n\n    /** The list of bones and constraints, sorted in the order they should be updated, as computed by {@link #updateCache()}. */\n    _updateCache = new Array<Updatable>();\n\n    /** The skeleton's current skin. May be null. */\n    skin: Skin;\n\n    /** The color to tint all the skeleton's attachments. */\n    color: Color;\n\n    /** Returns the skeleton's time. This can be used for tracking, such as with Slot {@link Slot#attachmentTime}.\n     * <p>\n     * See {@link #update()}. */\n    time = 0;\n\n    /** Scales the entire skeleton on the X axis. This affects all bones, even if the bone's transform mode disallows scale\n     * inheritance. */\n    scaleX = 1;\n\n    /** Scales the entire skeleton on the Y axis. This affects all bones, even if the bone's transform mode disallows scale\n     * inheritance. */\n    scaleY = 1;\n\n    /** Sets the skeleton X position, which is added to the root bone worldX position. */\n    x = 0;\n\n    /** Sets the skeleton Y position, which is added to the root bone worldY position. */\n    y = 0;\n\n    constructor (data: SkeletonData) {\n        if (!data) throw new Error(\"data cannot be null.\");\n        this.data = data;\n\n        this.bones = new Array<Bone>();\n        for (let i = 0; i < data.bones.length; i++) {\n            let boneData = data.bones[i];\n            let bone: Bone;\n            if (!boneData.parent)\n                bone = new Bone(boneData, this, null);\n            else {\n                let parent = this.bones[boneData.parent.index];\n                bone = new Bone(boneData, this, parent);\n                parent.children.push(bone);\n            }\n            this.bones.push(bone);\n        }\n\n        this.slots = new Array<Slot>();\n        this.drawOrder = new Array<Slot>();\n        for (let i = 0; i < data.slots.length; i++) {\n            let slotData = data.slots[i];\n            let bone = this.bones[slotData.boneData.index];\n            let slot = new Slot(slotData, bone);\n            this.slots.push(slot);\n            this.drawOrder.push(slot);\n        }\n\n        this.ikConstraints = new Array<IkConstraint>();\n        for (let i = 0; i < data.ikConstraints.length; i++) {\n            let ikConstraintData = data.ikConstraints[i];\n            this.ikConstraints.push(new IkConstraint(ikConstraintData, this));\n        }\n\n        this.transformConstraints = new Array<TransformConstraint>();\n        for (let i = 0; i < data.transformConstraints.length; i++) {\n            let transformConstraintData = data.transformConstraints[i];\n            this.transformConstraints.push(new TransformConstraint(transformConstraintData, this));\n        }\n\n        this.pathConstraints = new Array<PathConstraint>();\n        for (let i = 0; i < data.pathConstraints.length; i++) {\n            let pathConstraintData = data.pathConstraints[i];\n            this.pathConstraints.push(new PathConstraint(pathConstraintData, this));\n        }\n\n        this.color = new Color(1, 1, 1, 1);\n        this.updateCache();\n    }\n\n    /** Caches information about bones and constraints. Must be called if the {@link #getSkin()} is modified or if bones,\n     * constraints, or weighted path attachments are added or removed. */\n    updateCache () {\n        let updateCache = this._updateCache;\n        updateCache.length = 0;\n\n        let bones = this.bones;\n        for (let i = 0, n = bones.length; i < n; i++) {\n            let bone = bones[i];\n            bone.sorted = bone.data.skinRequired;\n            bone.active = !bone.sorted;\n        }\n\n        if (this.skin) {\n            let skinBones = this.skin.bones;\n            for (let i = 0, n = this.skin.bones.length; i < n; i++) {\n                let bone = this.bones[skinBones[i].index];\n                do {\n                    bone.sorted = false;\n                    bone.active = true;\n                    bone = bone.parent;\n                } while (bone);\n            }\n        }\n\n        // IK first, lowest hierarchy depth first.\n        let ikConstraints = this.ikConstraints;\n        let transformConstraints = this.transformConstraints;\n        let pathConstraints = this.pathConstraints;\n        let ikCount = ikConstraints.length, transformCount = transformConstraints.length, pathCount = pathConstraints.length;\n        let constraintCount = ikCount + transformCount + pathCount;\n\n        outer:\n            for (let i = 0; i < constraintCount; i++) {\n                for (let ii = 0; ii < ikCount; ii++) {\n                    let constraint = ikConstraints[ii];\n                    if (constraint.data.order == i) {\n                        this.sortIkConstraint(constraint);\n                        continue outer;\n                    }\n                }\n                for (let ii = 0; ii < transformCount; ii++) {\n                    let constraint = transformConstraints[ii];\n                    if (constraint.data.order == i) {\n                        this.sortTransformConstraint(constraint);\n                        continue outer;\n                    }\n                }\n                for (let ii = 0; ii < pathCount; ii++) {\n                    let constraint = pathConstraints[ii];\n                    if (constraint.data.order == i) {\n                        this.sortPathConstraint(constraint);\n                        continue outer;\n                    }\n                }\n            }\n\n        for (let i = 0, n = bones.length; i < n; i++)\n            this.sortBone(bones[i]);\n    }\n\n    sortIkConstraint (constraint: IkConstraint) {\n        constraint.active = constraint.target.isActive() && (!constraint.data.skinRequired || (this.skin && Utils.contains(this.skin.constraints, constraint.data, true)));\n        if (!constraint.active) return;\n\n        let target = constraint.target;\n        this.sortBone(target);\n\n        let constrained = constraint.bones;\n        let parent = constrained[0];\n        this.sortBone(parent);\n\n        if (constrained.length == 1) {\n            this._updateCache.push(constraint);\n            this.sortReset(parent.children);\n        } else {\n            let child = constrained[constrained.length - 1];\n            this.sortBone(child);\n\n            this._updateCache.push(constraint);\n\n            this.sortReset(parent.children);\n            child.sorted = true;\n        }\n    }\n\n    sortPathConstraint (constraint: PathConstraint) {\n        constraint.active = constraint.target.bone.isActive() && (!constraint.data.skinRequired || (this.skin && Utils.contains(this.skin.constraints, constraint.data, true)));\n        if (!constraint.active) return;\n\n        let slot = constraint.target;\n        let slotIndex = slot.data.index;\n        let slotBone = slot.bone;\n        if (this.skin) this.sortPathConstraintAttachment(this.skin, slotIndex, slotBone);\n        if (this.data.defaultSkin && this.data.defaultSkin != this.skin)\n            this.sortPathConstraintAttachment(this.data.defaultSkin, slotIndex, slotBone);\n        for (let i = 0, n = this.data.skins.length; i < n; i++)\n            this.sortPathConstraintAttachment(this.data.skins[i], slotIndex, slotBone);\n\n        let attachment = slot.getAttachment();\n        if (attachment instanceof PathAttachment) this.sortPathConstraintAttachmentWith(attachment, slotBone);\n\n        let constrained = constraint.bones;\n        let boneCount = constrained.length;\n        for (let i = 0; i < boneCount; i++)\n            this.sortBone(constrained[i]);\n\n        this._updateCache.push(constraint);\n\n        for (let i = 0; i < boneCount; i++)\n            this.sortReset(constrained[i].children);\n        for (let i = 0; i < boneCount; i++)\n            constrained[i].sorted = true;\n    }\n\n    sortTransformConstraint (constraint: TransformConstraint) {\n        constraint.active = constraint.target.isActive() && (!constraint.data.skinRequired || (this.skin && Utils.contains(this.skin.constraints, constraint.data, true)));\n        if (!constraint.active) return;\n\n        this.sortBone(constraint.target);\n\n        let constrained = constraint.bones;\n        let boneCount = constrained.length;\n        if (constraint.data.local) {\n            for (let i = 0; i < boneCount; i++) {\n                let child = constrained[i];\n                this.sortBone(child.parent);\n                this.sortBone(child);\n            }\n        } else {\n            for (let i = 0; i < boneCount; i++) {\n                this.sortBone(constrained[i]);\n            }\n        }\n\n        this._updateCache.push(constraint);\n\n        for (let i = 0; i < boneCount; i++)\n            this.sortReset(constrained[i].children);\n        for (let i = 0; i < boneCount; i++)\n            constrained[i].sorted = true;\n    }\n\n    sortPathConstraintAttachment (skin: Skin, slotIndex: number, slotBone: Bone) {\n        let attachments = skin.attachments[slotIndex];\n        if (!attachments) return;\n        for (let key in attachments) {\n            this.sortPathConstraintAttachmentWith(attachments[key], slotBone);\n        }\n    }\n\n    sortPathConstraintAttachmentWith (attachment: Attachment, slotBone: Bone) {\n        if (!(attachment instanceof PathAttachment)) return;\n        let pathBones = (<PathAttachment>attachment).bones;\n        if (!pathBones)\n            this.sortBone(slotBone);\n        else {\n            let bones = this.bones;\n            for (let i = 0, n = pathBones.length; i < n;) {\n                let nn = pathBones[i++];\n                nn += i;\n                while (i < nn)\n                    this.sortBone(bones[pathBones[i++]]);\n            }\n        }\n    }\n\n    sortBone (bone: Bone) {\n        if (bone.sorted) return;\n        let parent = bone.parent;\n        if (parent) this.sortBone(parent);\n        bone.sorted = true;\n        this._updateCache.push(bone);\n    }\n\n    sortReset (bones: Array<Bone>) {\n        for (let i = 0, n = bones.length; i < n; i++) {\n            let bone = bones[i];\n            if (!bone.active) continue;\n            if (bone.sorted) this.sortReset(bone.children);\n            bone.sorted = false;\n        }\n    }\n\n    /** Updates the world transform for each bone and applies all constraints.\n     *\n     * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\n     * Runtimes Guide. */\n    updateWorldTransform () {\n        let bones = this.bones;\n        for (let i = 0, n = bones.length; i < n; i++) {\n            let bone = bones[i];\n            bone.ax = bone.x;\n            bone.ay = bone.y;\n            bone.arotation = bone.rotation;\n            bone.ascaleX = bone.scaleX;\n            bone.ascaleY = bone.scaleY;\n            bone.ashearX = bone.shearX;\n            bone.ashearY = bone.shearY;\n        }\n\n        let updateCache = this._updateCache;\n        for (let i = 0, n = updateCache.length; i < n; i++)\n            updateCache[i].update();\n    }\n\n    updateWorldTransformWith (parent: Bone) {\n        // Apply the parent bone transform to the root bone. The root bone always inherits scale, rotation and reflection.\n        let rootBone = this.getRootBone();\n        let pa = parent.matrix.a, pb = parent.matrix.c, pc = parent.matrix.b, pd = parent.matrix.d;\n        rootBone.matrix.tx = pa * this.x + pb * this.y + parent.worldX;\n        rootBone.matrix.ty = pc * this.x + pd * this.y + parent.worldY;\n\n        let rotationY = rootBone.rotation + 90 + rootBone.shearY;\n        let la = MathUtils.cosDeg(rootBone.rotation + rootBone.shearX) * rootBone.scaleX;\n        let lb = MathUtils.cosDeg(rotationY) * rootBone.scaleY;\n        let lc = MathUtils.sinDeg(rootBone.rotation + rootBone.shearX) * rootBone.scaleX;\n        let ld = MathUtils.sinDeg(rotationY) * rootBone.scaleY;\n\n        const sx = this.scaleX;\n        const sy = settings.yDown? -this.scaleY : this.scaleY;\n        rootBone.matrix.a = (pa * la + pb * lc) * sx;\n        rootBone.matrix.c = (pa * lb + pb * ld) * sx;\n        rootBone.matrix.b = (pc * la + pd * lc) * sy;\n        rootBone.matrix.d = (pc * lb + pd * ld) * sy;\n\n        // Update everything except root bone.\n        let updateCache = this._updateCache;\n        for (let i = 0, n = updateCache.length; i < n; i++) {\n            let updatable = updateCache[i];\n            if (updatable != rootBone) updatable.update();\n        }\n    }\n\n    /** Sets the bones, constraints, and slots to their setup pose values. */\n    setToSetupPose () {\n        this.setBonesToSetupPose();\n        this.setSlotsToSetupPose();\n    }\n\n    /** Sets the bones and constraints to their setup pose values. */\n    setBonesToSetupPose () {\n        let bones = this.bones;\n        for (let i = 0, n = bones.length; i < n; i++)\n            bones[i].setToSetupPose();\n\n        let ikConstraints = this.ikConstraints;\n        for (let i = 0, n = ikConstraints.length; i < n; i++) {\n            let constraint = ikConstraints[i];\n            constraint.mix = constraint.data.mix;\n            constraint.softness = constraint.data.softness;\n            constraint.bendDirection = constraint.data.bendDirection;\n            constraint.compress = constraint.data.compress;\n            constraint.stretch = constraint.data.stretch;\n        }\n\n        let transformConstraints = this.transformConstraints;\n        for (let i = 0, n = transformConstraints.length; i < n; i++) {\n            let constraint = transformConstraints[i];\n            let data = constraint.data;\n            constraint.mixRotate = data.mixRotate;\n            constraint.mixX = data.mixX;\n            constraint.mixY = data.mixY;\n            constraint.mixScaleX = data.mixScaleX;\n            constraint.mixScaleY = data.mixScaleY;\n            constraint.mixShearY = data.mixShearY;\n        }\n\n        let pathConstraints = this.pathConstraints;\n        for (let i = 0, n = pathConstraints.length; i < n; i++) {\n            let constraint = pathConstraints[i];\n            let data = constraint.data;\n            constraint.position = data.position;\n            constraint.spacing = data.spacing;\n            constraint.mixRotate = data.mixRotate;\n            constraint.mixX = data.mixX;\n            constraint.mixY = data.mixY;\n        }\n    }\n\n    /** Sets the slots and draw order to their setup pose values. */\n    setSlotsToSetupPose () {\n        let slots = this.slots;\n        Utils.arrayCopy(slots, 0, this.drawOrder, 0, slots.length);\n        for (let i = 0, n = slots.length; i < n; i++)\n            slots[i].setToSetupPose();\n    }\n\n    /** @returns May return null. */\n    getRootBone () {\n        if (this.bones.length == 0) return null;\n        return this.bones[0];\n    }\n\n    /** @returns May be null. */\n    findBone (boneName: string) {\n        if (!boneName) throw new Error(\"boneName cannot be null.\");\n        let bones = this.bones;\n        for (let i = 0, n = bones.length; i < n; i++) {\n            let bone = bones[i];\n            if (bone.data.name == boneName) return bone;\n        }\n        return null;\n    }\n\n    /** @returns -1 if the bone was not found. */\n    findBoneIndex (boneName: string) {\n        if (!boneName) throw new Error(\"boneName cannot be null.\");\n        let bones = this.bones;\n        for (let i = 0, n = bones.length; i < n; i++)\n            if (bones[i].data.name == boneName) return i;\n        return -1;\n    }\n\n    /** Finds a slot by comparing each slot's name. It is more efficient to cache the results of this method than to call it\n     * repeatedly.\n     * @returns May be null. */\n    findSlot (slotName: string) {\n        if (!slotName) throw new Error(\"slotName cannot be null.\");\n        let slots = this.slots;\n        for (let i = 0, n = slots.length; i < n; i++) {\n            let slot = slots[i];\n            if (slot.data.name == slotName) return slot;\n        }\n        return null;\n    }\n\n    /** @returns -1 if the bone was not found. */\n    findSlotIndex (slotName: string) {\n        if (!slotName) throw new Error(\"slotName cannot be null.\");\n        let slots = this.slots;\n        for (let i = 0, n = slots.length; i < n; i++)\n            if (slots[i].data.name == slotName) return i;\n        return -1;\n    }\n\n    /** Sets a skin by name.\n     *\n     * See {@link #setSkin()}. */\n    setSkinByName (skinName: string) {\n        let skin = this.data.findSkin(skinName);\n        if (!skin) throw new Error(\"Skin not found: \" + skinName);\n        this.setSkin(skin);\n    }\n\n    /** Sets the skin used to look up attachments before looking in the {@link SkeletonData#defaultSkin default skin}. If the\n     * skin is changed, {@link #updateCache()} is called.\n     *\n     * Attachments from the new skin are attached if the corresponding attachment from the old skin was attached. If there was no\n     * old skin, each slot's setup mode attachment is attached from the new skin.\n     *\n     * After changing the skin, the visible attachments can be reset to those attached in the setup pose by calling\n     * {@link #setSlotsToSetupPose()}. Also, often {@link AnimationState#apply()} is called before the next time the\n     * skeleton is rendered to allow any attachment keys in the current animation(s) to hide or show attachments from the new skin.\n     * @param newSkin May be null. */\n    setSkin (newSkin: Skin) {\n        if (newSkin == this.skin) return;\n        if (newSkin) {\n            if (this.skin)\n                newSkin.attachAll(this, this.skin);\n            else {\n                let slots = this.slots;\n                for (let i = 0, n = slots.length; i < n; i++) {\n                    let slot = slots[i];\n                    let name = slot.data.attachmentName;\n                    if (name) {\n                        let attachment: Attachment = newSkin.getAttachment(i, name);\n                        if (attachment) slot.setAttachment(attachment);\n                    }\n                }\n            }\n        }\n        this.skin = newSkin;\n        this.updateCache();\n    }\n\n\n    /** Finds an attachment by looking in the {@link #skin} and {@link SkeletonData#defaultSkin} using the slot name and attachment\n     * name.\n     *\n     * See {@link #getAttachment()}.\n     * @returns May be null. */\n    getAttachmentByName (slotName: string, attachmentName: string): Attachment {\n        return this.getAttachment(this.data.findSlotIndex(slotName), attachmentName);\n    }\n\n    /** Finds an attachment by looking in the {@link #skin} and {@link SkeletonData#defaultSkin} using the slot index and\n     * attachment name. First the skin is checked and if the attachment was not found, the default skin is checked.\n     *\n     * See [Runtime skins](http://esotericsoftware.com/spine-runtime-skins) in the Spine Runtimes Guide.\n     * @returns May be null. */\n    getAttachment (slotIndex: number, attachmentName: string): Attachment {\n        if (!attachmentName) throw new Error(\"attachmentName cannot be null.\");\n        if (this.skin) {\n            let attachment: Attachment = this.skin.getAttachment(slotIndex, attachmentName);\n            if (attachment) return attachment;\n        }\n        if (this.data.defaultSkin) return this.data.defaultSkin.getAttachment(slotIndex, attachmentName);\n        return null;\n    }\n\n    /** A convenience method to set an attachment by finding the slot with {@link #findSlot()}, finding the attachment with\n     * {@link #getAttachment()}, then setting the slot's {@link Slot#attachment}.\n     * @param attachmentName May be null to clear the slot's attachment. */\n    setAttachment (slotName: string, attachmentName: string) {\n        if (!slotName) throw new Error(\"slotName cannot be null.\");\n        let slots = this.slots;\n        for (let i = 0, n = slots.length; i < n; i++) {\n            let slot = slots[i];\n            if (slot.data.name == slotName) {\n                let attachment: Attachment = null;\n                if (attachmentName) {\n                    attachment = this.getAttachment(i, attachmentName);\n                    if (!attachment) throw new Error(\"Attachment not found: \" + attachmentName + \", for slot: \" + slotName);\n                }\n                slot.setAttachment(attachment);\n                return;\n            }\n        }\n        throw new Error(\"Slot not found: \" + slotName);\n    }\n\n\n    /** Finds an IK constraint by comparing each IK constraint's name. It is more efficient to cache the results of this method\n     * than to call it repeatedly.\n     * @return May be null. */\n    findIkConstraint (constraintName: string) {\n        if (!constraintName) throw new Error(\"constraintName cannot be null.\");\n        let ikConstraints = this.ikConstraints;\n        for (let i = 0, n = ikConstraints.length; i < n; i++) {\n            let ikConstraint = ikConstraints[i];\n            if (ikConstraint.data.name == constraintName) return ikConstraint;\n        }\n        return null;\n    }\n\n    /** Finds a transform constraint by comparing each transform constraint's name. It is more efficient to cache the results of\n     * this method than to call it repeatedly.\n     * @return May be null. */\n    findTransformConstraint (constraintName: string) {\n        if (!constraintName) throw new Error(\"constraintName cannot be null.\");\n        let transformConstraints = this.transformConstraints;\n        for (let i = 0, n = transformConstraints.length; i < n; i++) {\n            let constraint = transformConstraints[i];\n            if (constraint.data.name == constraintName) return constraint;\n        }\n        return null;\n    }\n\n    /** Finds a path constraint by comparing each path constraint's name. It is more efficient to cache the results of this method\n     * than to call it repeatedly.\n     * @return May be null. */\n    findPathConstraint (constraintName: string) {\n        if (!constraintName) throw new Error(\"constraintName cannot be null.\");\n        let pathConstraints = this.pathConstraints;\n        for (let i = 0, n = pathConstraints.length; i < n; i++) {\n            let constraint = pathConstraints[i];\n            if (constraint.data.name == constraintName) return constraint;\n        }\n        return null;\n    }\n\n    /** Returns the axis aligned bounding box (AABB) of the region and mesh attachments for the current pose.\n     * @param offset An output value, the distance from the skeleton origin to the bottom left corner of the AABB.\n     * @param size An output value, the width and height of the AABB.\n     * @param temp Working memory to temporarily store attachments' computed world vertices. */\n    getBounds (offset: Vector2, size: Vector2, temp: Array<number> = new Array<number>(2)) {\n        if (!offset) throw new Error(\"offset cannot be null.\");\n        if (!size) throw new Error(\"size cannot be null.\");\n        let drawOrder = this.drawOrder;\n        let minX = Number.POSITIVE_INFINITY, minY = Number.POSITIVE_INFINITY, maxX = Number.NEGATIVE_INFINITY, maxY = Number.NEGATIVE_INFINITY;\n        for (let i = 0, n = drawOrder.length; i < n; i++) {\n            let slot = drawOrder[i];\n            if (!slot.bone.active) continue;\n            let verticesLength = 0;\n            let vertices: ArrayLike<number> = null;\n            let attachment = slot.getAttachment();\n            if (attachment instanceof RegionAttachment) {\n                verticesLength = 8;\n                vertices = Utils.setArraySize(temp, verticesLength, 0);\n                (<RegionAttachment>attachment).computeWorldVertices(slot.bone, vertices, 0, 2);\n            } else if (attachment instanceof MeshAttachment) {\n                let mesh = (<MeshAttachment>attachment);\n                verticesLength = mesh.worldVerticesLength;\n                vertices = Utils.setArraySize(temp, verticesLength, 0);\n                mesh.computeWorldVertices(slot, 0, verticesLength, vertices, 0, 2);\n            }\n            if (vertices) {\n                for (let ii = 0, nn = vertices.length; ii < nn; ii += 2) {\n                    let x = vertices[ii], y = vertices[ii + 1];\n                    minX = Math.min(minX, x);\n                    minY = Math.min(minY, y);\n                    maxX = Math.max(maxX, x);\n                    maxY = Math.max(maxY, y);\n                }\n            }\n        }\n        offset.set(minX, minY);\n        size.set(maxX - minX, maxY - minY);\n    }\n\n    /** Increments the skeleton's {@link #time}. */\n    update (delta: number) {\n        this.time += delta;\n    }\n\n    get flipX(): boolean {\n        return this.scaleX == -1;\n    }\n\n    set flipX(value: boolean) {\n        if (!Skeleton.deprecatedWarning1) {\n            Skeleton.deprecatedWarning1 = true;\n            console.warn(\"Spine Deprecation Warning: `Skeleton.flipX/flipY` was deprecated, please use scaleX/scaleY\");\n        }\n        this.scaleX = value ? 1.0 : -1.0;\n    }\n\n    get flipY(): boolean {\n        return this.scaleY == -1;\n    }\n\n    set flipY(value: boolean) {\n        if (!Skeleton.deprecatedWarning1) {\n            Skeleton.deprecatedWarning1 = true;\n            console.warn(\"Spine Deprecation Warning: `Skeleton.flipX/flipY` was deprecated, please use scaleX/scaleY\");\n        }\n        this.scaleY = value ? 1.0 : -1.0;\n    }\n\n    private static deprecatedWarning1: boolean = false;\n}\n","import type {Animation} from \"./Animation\";\r\nimport {BoneData} from \"./BoneData\";\r\nimport {SlotData} from \"./SlotData\";\r\nimport {Skin} from \"./Skin\";\r\nimport {IkConstraintData} from \"./IkConstraintData\";\r\nimport {EventData} from \"./EventData\";\r\nimport {TransformConstraintData} from \"./TransformConstraintData\";\r\nimport {PathConstraintData} from \"./PathConstraintData\";\r\n\r\n/** Stores the setup pose and all of the stateless data for a skeleton.\r\n *\r\n * See [Data objects](http://esotericsoftware.com/spine-runtime-architecture#Data-objects) in the Spine Runtimes\r\n * Guide.\r\n * @public\r\n * */\r\nexport class SkeletonData {\r\n\r\n    /** The skeleton's name, which by default is the name of the skeleton data file, if possible. May be null. */\r\n    name: string;\r\n\r\n    /** The skeleton's bones, sorted parent first. The root bone is always the first bone. */\r\n    bones = new Array<BoneData>(); // Ordered parents first.\r\n\r\n    /** The skeleton's slots. */\r\n    slots = new Array<SlotData>(); // Setup pose draw order.\r\n    skins = new Array<Skin>();\r\n\r\n    /** The skeleton's default skin. By default this skin contains all attachments that were not in a skin in Spine.\r\n     *\r\n     * See {@link Skeleton#getAttachmentByName()}.\r\n     * May be null. */\r\n    defaultSkin: Skin;\r\n\r\n    /** The skeleton's events. */\r\n    events = new Array<EventData>();\r\n\r\n    /** The skeleton's animations. */\r\n    animations = new Array<Animation>();\r\n\r\n    /** The skeleton's IK constraints. */\r\n    ikConstraints = new Array<IkConstraintData>();\r\n\r\n    /** The skeleton's transform constraints. */\r\n    transformConstraints = new Array<TransformConstraintData>();\r\n\r\n    /** The skeleton's path constraints. */\r\n    pathConstraints = new Array<PathConstraintData>();\r\n\r\n    /** The X coordinate of the skeleton's axis aligned bounding box in the setup pose. */\r\n    x: number;\r\n\r\n    /** The Y coordinate of the skeleton's axis aligned bounding box in the setup pose. */\r\n    y: number;\r\n\r\n    /** The width of the skeleton's axis aligned bounding box in the setup pose. */\r\n    width: number;\r\n\r\n    /** The height of the skeleton's axis aligned bounding box in the setup pose. */\r\n    height: number;\r\n\r\n    /** The Spine version used to export the skeleton data, or null. */\r\n    version: string;\r\n\r\n    /** The skeleton data hash. This value will change if any of the skeleton data has changed. May be null. */\r\n    hash: string;\r\n\r\n    // Nonessential\r\n    /** The dopesheet FPS in Spine. Available only when nonessential data was exported. */\r\n    fps = 0;\r\n\r\n    /** The path to the images directory as defined in Spine. Available only when nonessential data was exported. May be null. */\r\n    imagesPath: string;\r\n\r\n    /** The path to the audio directory as defined in Spine. Available only when nonessential data was exported. May be null. */\r\n    audioPath: string;\r\n\r\n    /** Finds a bone by comparing each bone's name. It is more efficient to cache the results of this method than to call it\r\n     * multiple times.\r\n     * @returns May be null. */\r\n    findBone (boneName: string) {\r\n        if (!boneName) throw new Error(\"boneName cannot be null.\");\r\n        let bones = this.bones;\r\n        for (let i = 0, n = bones.length; i < n; i++) {\r\n            let bone = bones[i];\r\n            if (bone.name == boneName) return bone;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    findBoneIndex (boneName: string) {\r\n        if (!boneName) throw new Error(\"boneName cannot be null.\");\r\n        let bones = this.bones;\r\n        for (let i = 0, n = bones.length; i < n; i++)\r\n            if (bones[i].name == boneName) return i;\r\n        return -1;\r\n    }\r\n\r\n    /** Finds a slot by comparing each slot's name. It is more efficient to cache the results of this method than to call it\r\n     * multiple times.\r\n     * @returns May be null. */\r\n    findSlot (slotName: string) {\r\n        if (!slotName) throw new Error(\"slotName cannot be null.\");\r\n        let slots = this.slots;\r\n        for (let i = 0, n = slots.length; i < n; i++) {\r\n            let slot = slots[i];\r\n            if (slot.name == slotName) return slot;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    findSlotIndex (slotName: string) {\r\n        if (!slotName) throw new Error(\"slotName cannot be null.\");\r\n        let slots = this.slots;\r\n        for (let i = 0, n = slots.length; i < n; i++)\r\n            if (slots[i].name == slotName) return i;\r\n        return -1;\r\n    }\r\n\r\n    /** Finds a skin by comparing each skin's name. It is more efficient to cache the results of this method than to call it\r\n     * multiple times.\r\n     * @returns May be null. */\r\n    findSkin (skinName: string) {\r\n        if (!skinName) throw new Error(\"skinName cannot be null.\");\r\n        let skins = this.skins;\r\n        for (let i = 0, n = skins.length; i < n; i++) {\r\n            let skin = skins[i];\r\n            if (skin.name == skinName) return skin;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /** Finds an event by comparing each events's name. It is more efficient to cache the results of this method than to call it\r\n     * multiple times.\r\n     * @returns May be null. */\r\n    findEvent (eventDataName: string) {\r\n        if (!eventDataName) throw new Error(\"eventDataName cannot be null.\");\r\n        let events = this.events;\r\n        for (let i = 0, n = events.length; i < n; i++) {\r\n            let event = events[i];\r\n            if (event.name == eventDataName) return event;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /** Finds an animation by comparing each animation's name. It is more efficient to cache the results of this method than to\r\n     * call it multiple times.\r\n     * @returns May be null. */\r\n    findAnimation (animationName: string) {\r\n        if (!animationName) throw new Error(\"animationName cannot be null.\");\r\n        let animations = this.animations;\r\n        for (let i = 0, n = animations.length; i < n; i++) {\r\n            let animation = animations[i];\r\n            if (animation.name == animationName) return animation;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /** Finds an IK constraint by comparing each IK constraint's name. It is more efficient to cache the results of this method\r\n     * than to call it multiple times.\r\n     * @return May be null. */\r\n    findIkConstraint (constraintName: string) {\r\n        if (!constraintName) throw new Error(\"constraintName cannot be null.\");\r\n        let ikConstraints = this.ikConstraints;\r\n        for (let i = 0, n = ikConstraints.length; i < n; i++) {\r\n            let constraint = ikConstraints[i];\r\n            if (constraint.name == constraintName) return constraint;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /** Finds a transform constraint by comparing each transform constraint's name. It is more efficient to cache the results of\r\n     * this method than to call it multiple times.\r\n     * @return May be null. */\r\n    findTransformConstraint (constraintName: string) {\r\n        if (!constraintName) throw new Error(\"constraintName cannot be null.\");\r\n        let transformConstraints = this.transformConstraints;\r\n        for (let i = 0, n = transformConstraints.length; i < n; i++) {\r\n            let constraint = transformConstraints[i];\r\n            if (constraint.name == constraintName) return constraint;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /** Finds a path constraint by comparing each path constraint's name. It is more efficient to cache the results of this method\r\n     * than to call it multiple times.\r\n     * @return May be null. */\r\n    findPathConstraint (constraintName: string) {\r\n        if (!constraintName) throw new Error(\"constraintName cannot be null.\");\r\n        let pathConstraints = this.pathConstraints;\r\n        for (let i = 0, n = pathConstraints.length; i < n; i++) {\r\n            let constraint = pathConstraints[i];\r\n            if (constraint.name == constraintName) return constraint;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    findPathConstraintIndex (pathConstraintName: string) {\r\n        if (pathConstraintName == null) throw new Error(\"pathConstraintName cannot be null.\");\r\n        let pathConstraints = this.pathConstraints;\r\n        for (let i = 0, n = pathConstraints.length; i < n; i++)\r\n            if (pathConstraints[i].name == pathConstraintName) return i;\r\n        return -1;\r\n    }\r\n}\r\n","import {Color} from '@pixi-spine/base';\r\n\r\nimport type {ISlotData} from '@pixi-spine/base';\r\nimport type {BLEND_MODES} from '@pixi/constants';\r\nimport {BoneData} from \"./BoneData\";\r\n\r\n/** Stores the setup pose for a {@link Slot}.\r\n * @public\r\n * */\r\nexport class SlotData implements ISlotData {\r\n\r\n    /** The index of the slot in {@link Skeleton#getSlots()}. */\r\n    index: number;\r\n\r\n    /** The name of the slot, which is unique across all slots in the skeleton. */\r\n    name: string;\r\n\r\n    /** The bone this slot belongs to. */\r\n    boneData: BoneData;\r\n\r\n    /** The color used to tint the slot's attachment. If {@link #getDarkColor()} is set, this is used as the light color for two\r\n     * color tinting. */\r\n    color = new Color(1, 1, 1, 1);\r\n\r\n    /** The dark color used to tint the slot's attachment for two color tinting, or null if two color tinting is not used. The dark\r\n     * color's alpha is not used. */\r\n    darkColor: Color;\r\n\r\n    /** The name of the attachment that is visible for this slot in the setup pose, or null if no attachment is visible. */\r\n    attachmentName: string;\r\n\r\n    /** The blend mode for drawing the slot's attachment. */\r\n    blendMode: BLEND_MODES;\r\n\r\n    constructor (index: number, name: string, boneData: BoneData) {\r\n        if (index < 0) throw new Error(\"index must be >= 0.\");\r\n        if (!name) throw new Error(\"name cannot be null.\");\r\n        if (!boneData) throw new Error(\"boneData cannot be null.\");\r\n        this.index = index;\r\n        this.name = name;\r\n        this.boneData = boneData;\r\n    }\r\n}\r\n\r\n","import {BoneData} from './BoneData';\r\nimport {ConstraintData} from './ConstraintData';\r\n\r\n/** Stores the setup pose for a {@link TransformConstraint}.\r\n *\r\n * See [Transform constraints](http://esotericsoftware.com/spine-transform-constraints) in the Spine User Guide.\r\n * @public\r\n * */\r\nexport class TransformConstraintData extends ConstraintData {\r\n\r\n    /** The bones that will be modified by this transform constraint. */\r\n    bones = new Array<BoneData>();\r\n\r\n    /** The target bone whose world transform will be copied to the constrained bones. */\r\n    target: BoneData;\r\n\r\n    mixRotate = 0;\r\n    mixX = 0;\r\n    mixY = 0;\r\n    mixScaleX = 0;\r\n    mixScaleY = 0;\r\n    mixShearY = 0;\r\n\r\n    /** An offset added to the constrained bone rotation. */\r\n    offsetRotation = 0;\r\n\r\n    /** An offset added to the constrained bone X translation. */\r\n    offsetX = 0;\r\n\r\n    /** An offset added to the constrained bone Y translation. */\r\n    offsetY = 0;\r\n\r\n    /** An offset added to the constrained bone scaleX. */\r\n    offsetScaleX = 0;\r\n\r\n    /** An offset added to the constrained bone scaleY. */\r\n    offsetScaleY = 0;\r\n\r\n    /** An offset added to the constrained bone shearY. */\r\n    offsetShearY = 0;\r\n\r\n    relative = false;\r\n    local = false;\r\n\r\n    constructor (name: string) {\r\n        super(name, 0, false);\r\n    }\r\n}\r\n","import {Attachment, MeshAttachment} from './attachments';\r\nimport {BoneData} from \"./BoneData\";\r\nimport {ConstraintData} from \"./ConstraintData\";\r\nimport {Skeleton} from \"./Skeleton\";\r\n\r\nimport type {Map} from '@pixi-spine/base';\r\n\r\n/** Stores an entry in the skin consisting of the slot index, name, and attachment\r\n * @public\r\n * **/\r\nexport class SkinEntry {\r\n    constructor(public slotIndex: number, public name: string, public attachment: Attachment) { }\r\n}\r\n\r\n/** Stores attachments by slot index and attachment name.\r\n *\r\n * See SkeletonData {@link SkeletonData#defaultSkin}, Skeleton {@link Skeleton#skin}, and\r\n * [Runtime skins](http://esotericsoftware.com/spine-runtime-skins) in the Spine Runtimes Guide.\r\n * @public\r\n * */\r\nexport class Skin {\r\n    /** The skin's name, which is unique across all skins in the skeleton. */\r\n    name: string;\r\n\r\n    attachments = new Array<Map<Attachment>>();\r\n    bones = Array<BoneData>();\r\n    constraints = new Array<ConstraintData>();\r\n\r\n    constructor (name: string) {\r\n        if (!name) throw new Error(\"name cannot be null.\");\r\n        this.name = name;\r\n    }\r\n\r\n    /** Adds an attachment to the skin for the specified slot index and name. */\r\n    setAttachment (slotIndex: number, name: string, attachment: Attachment) {\r\n        if (!attachment) throw new Error(\"attachment cannot be null.\");\r\n        let attachments = this.attachments;\r\n        if (slotIndex >= attachments.length) attachments.length = slotIndex + 1;\r\n        if (!attachments[slotIndex]) attachments[slotIndex] = { };\r\n        attachments[slotIndex][name] = attachment;\r\n    }\r\n\r\n    /** Adds all attachments, bones, and constraints from the specified skin to this skin. */\r\n    addSkin (skin: Skin) {\r\n        for(let i = 0; i < skin.bones.length; i++) {\r\n            let bone = skin.bones[i];\r\n            let contained = false;\r\n            for (let ii = 0; ii < this.bones.length; ii++) {\r\n                if (this.bones[ii] == bone) {\r\n                    contained = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!contained) this.bones.push(bone);\r\n        }\r\n\r\n        for(let i = 0; i < skin.constraints.length; i++) {\r\n            let constraint = skin.constraints[i];\r\n            let contained = false;\r\n            for (let ii = 0; ii < this.constraints.length; ii++) {\r\n                if (this.constraints[ii] == constraint) {\r\n                    contained = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!contained) this.constraints.push(constraint);\r\n        }\r\n\r\n        let attachments = skin.getAttachments();\r\n        for (let i = 0; i < attachments.length; i++) {\r\n            var attachment = attachments[i];\r\n            this.setAttachment(attachment.slotIndex, attachment.name, attachment.attachment);\r\n        }\r\n    }\r\n\r\n    /** Adds all bones and constraints and copies of all attachments from the specified skin to this skin. Mesh attachments are not\r\n     * copied, instead a new linked mesh is created. The attachment copies can be modified without affecting the originals. */\r\n    copySkin (skin: Skin) {\r\n        for(let i = 0; i < skin.bones.length; i++) {\r\n            let bone = skin.bones[i];\r\n            let contained = false;\r\n            for (let ii = 0; ii < this.bones.length; ii++) {\r\n                if (this.bones[ii] == bone) {\r\n                    contained = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!contained) this.bones.push(bone);\r\n        }\r\n\r\n        for(let i = 0; i < skin.constraints.length; i++) {\r\n            let constraint = skin.constraints[i];\r\n            let contained = false;\r\n            for (let ii = 0; ii < this.constraints.length; ii++) {\r\n                if (this.constraints[ii] == constraint) {\r\n                    contained = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!contained) this.constraints.push(constraint);\r\n        }\r\n\r\n        let attachments = skin.getAttachments();\r\n        for (let i = 0; i < attachments.length; i++) {\r\n            var attachment = attachments[i];\r\n            if (!attachment.attachment) continue;\r\n            if (attachment.attachment instanceof MeshAttachment) {\r\n                attachment.attachment = attachment.attachment.newLinkedMesh();\r\n                this.setAttachment(attachment.slotIndex, attachment.name, attachment.attachment);\r\n            } else {\r\n                attachment.attachment = attachment.attachment.copy();\r\n                this.setAttachment(attachment.slotIndex, attachment.name, attachment.attachment);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Returns the attachment for the specified slot index and name, or null. */\r\n    getAttachment (slotIndex: number, name: string): Attachment {\r\n        let dictionary = this.attachments[slotIndex];\r\n        return dictionary ? dictionary[name] : null;\r\n    }\r\n\r\n    /** Removes the attachment in the skin for the specified slot index and name, if any. */\r\n    removeAttachment (slotIndex: number, name: string) {\r\n        let dictionary = this.attachments[slotIndex];\r\n        if (dictionary) dictionary[name] = null;\r\n    }\r\n\r\n    /** Returns all attachments in this skin. */\r\n    getAttachments (): Array<SkinEntry> {\r\n        let entries = new Array<SkinEntry>();\r\n        for (var i = 0; i < this.attachments.length; i++) {\r\n            let slotAttachments = this.attachments[i];\r\n            if (slotAttachments) {\r\n                for (let name in slotAttachments) {\r\n                    let attachment = slotAttachments[name];\r\n                    if (attachment) entries.push(new SkinEntry(i, name, attachment));\r\n                }\r\n            }\r\n        }\r\n        return entries;\r\n    }\r\n\r\n    /** Returns all attachments in this skin for the specified slot index. */\r\n    getAttachmentsForSlot (slotIndex: number, attachments: Array<SkinEntry>) {\r\n        let slotAttachments = this.attachments[slotIndex];\r\n        if (slotAttachments) {\r\n            for (let name in slotAttachments) {\r\n                let attachment = slotAttachments[name];\r\n                if (attachment) attachments.push(new SkinEntry(slotIndex, name, attachment));\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Clears all attachments, bones, and constraints. */\r\n    clear () {\r\n        this.attachments.length = 0;\r\n        this.bones.length = 0;\r\n        this.constraints.length = 0;\r\n    }\r\n\r\n    /** Attach each attachment in this skin if the corresponding attachment in the old skin is currently attached. */\r\n    attachAll (skeleton: Skeleton, oldSkin: Skin) {\r\n        let slotIndex = 0;\r\n        for (let i = 0; i < skeleton.slots.length; i++) {\r\n            let slot = skeleton.slots[i];\r\n            let slotAttachment = slot.getAttachment();\r\n            if (slotAttachment && slotIndex < oldSkin.attachments.length) {\r\n                let dictionary = oldSkin.attachments[slotIndex];\r\n                for (let key in dictionary) {\r\n                    let skinAttachment:Attachment = dictionary[key];\r\n                    if (slotAttachment == skinAttachment) {\r\n                        let attachment = this.getAttachment(slotIndex, key);\r\n                        if (attachment) slot.setAttachment(attachment);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            slotIndex++;\r\n        }\r\n    }\r\n}\r\n","import type {Attachment, AttachmentLoader, MeshAttachment, VertexAttachment} from './attachments';\r\nimport {\r\n    AlphaTimeline, Animation,\r\n    AttachmentTimeline, CurveTimeline, CurveTimeline1, CurveTimeline2, DeformTimeline, DrawOrderTimeline, EventTimeline,\r\n    IkConstraintTimeline,\r\n    PathConstraintMixTimeline,\r\n    PathConstraintPositionTimeline,\r\n    PathConstraintSpacingTimeline, RGB2Timeline, RGBA2Timeline, RGBATimeline, RGBTimeline,\r\n    RotateTimeline,\r\n    ScaleTimeline, ScaleXTimeline, ScaleYTimeline,\r\n    ShearTimeline, ShearXTimeline, ShearYTimeline,\r\n    Timeline,\r\n    TransformConstraintTimeline,\r\n    TranslateTimeline, TranslateXTimeline, TranslateYTimeline\r\n} from './Animation';\r\nimport {Event} from './Event';\r\nimport {SkeletonData} from './SkeletonData';\r\nimport {SlotData} from './SlotData';\r\nimport {BoneData} from './BoneData';\r\nimport {IkConstraintData} from './IkConstraintData';\r\nimport {TransformConstraintData} from './TransformConstraintData';\r\nimport {PathConstraintData, PositionMode, SpacingMode} from './PathConstraintData';\r\nimport {Skin} from './Skin';\r\nimport {EventData} from './EventData';\r\nimport {AttachmentType, BinaryInput, Color, Utils} from '@pixi-spine/base';\r\nimport {BLEND_MODES} from '@pixi/constants';\r\n\r\n/** Loads skeleton data in the Spine binary format.\r\n *\r\n * See [Spine binary format](http://esotericsoftware.com/spine-binary-format) and\r\n * [JSON and binary data](http://esotericsoftware.com/spine-loading-skeleton-data#JSON-and-binary-data) in the Spine\r\n * Runtimes Guide.\r\n * @public\r\n * */\r\nexport class SkeletonBinary {\r\n    static BlendModeValues = [ BLEND_MODES.NORMAL, BLEND_MODES.ADD, BLEND_MODES.MULTIPLY, BLEND_MODES.SCREEN];\r\n    /** Scales bone positions, image sizes, and translations as they are loaded. This allows different size images to be used at\r\n     * runtime than were used in Spine.\r\n     *\r\n     * See [Scaling](http://esotericsoftware.com/spine-loading-skeleton-data#Scaling) in the Spine Runtimes Guide. */\r\n    scale = 1;\r\n\r\n    attachmentLoader: AttachmentLoader;\r\n    private linkedMeshes = new Array<LinkedMesh>();\r\n\r\n    constructor (attachmentLoader: AttachmentLoader) {\r\n        this.attachmentLoader = attachmentLoader;\r\n    }\r\n\r\n    readSkeletonData (binary: Uint8Array): SkeletonData {\r\n        let scale = this.scale;\r\n\r\n        let skeletonData = new SkeletonData();\r\n        skeletonData.name = \"\"; // BOZO\r\n\r\n        let input = new BinaryInput(binary);\r\n\r\n        let lowHash = input.readInt32();\r\n        let highHash = input.readInt32();\r\n        skeletonData.hash = highHash == 0 && lowHash == 0 ? null : highHash.toString(16) + lowHash.toString(16);\r\n        skeletonData.version = input.readString();\r\n        if (skeletonData.version.substr(0, 3) !== '4.0')\r\n        {\r\n            let error = `Spine 4.0 loader cant load version ${skeletonData.version}. Please configure your pixi-spine bundle`;\r\n            console.error(error);\r\n        }\r\n        skeletonData.x = input.readFloat();\r\n        skeletonData.y = input.readFloat();\r\n        skeletonData.width = input.readFloat();\r\n        skeletonData.height = input.readFloat();\r\n\r\n        let nonessential = input.readBoolean();\r\n        if (nonessential) {\r\n            skeletonData.fps = input.readFloat();\r\n\r\n            skeletonData.imagesPath = input.readString();\r\n            skeletonData.audioPath = input.readString();\r\n        }\r\n\r\n        let n = 0;\r\n        // Strings.\r\n        n = input.readInt(true)\r\n        for (let i = 0; i < n; i++)\r\n            input.strings.push(input.readString());\r\n\r\n        // Bones.\r\n        n = input.readInt(true)\r\n        for (let i = 0; i < n; i++) {\r\n            let name = input.readString();\r\n            let parent = i == 0 ? null : skeletonData.bones[input.readInt(true)];\r\n            let data = new BoneData(i, name, parent);\r\n            data.rotation = input.readFloat();\r\n            data.x = input.readFloat() * scale;\r\n            data.y = input.readFloat() * scale;\r\n            data.scaleX = input.readFloat();\r\n            data.scaleY = input.readFloat();\r\n            data.shearX = input.readFloat();\r\n            data.shearY = input.readFloat();\r\n            data.length = input.readFloat() * scale;\r\n            data.transformMode = input.readInt(true);\r\n            data.skinRequired = input.readBoolean();\r\n            if (nonessential) Color.rgba8888ToColor(data.color, input.readInt32());\r\n            skeletonData.bones.push(data);\r\n        }\r\n\r\n        // Slots.\r\n        n = input.readInt(true);\r\n        for (let i = 0; i < n; i++) {\r\n            let slotName = input.readString();\r\n            let boneData = skeletonData.bones[input.readInt(true)];\r\n            let data = new SlotData(i, slotName, boneData);\r\n            Color.rgba8888ToColor(data.color, input.readInt32());\r\n\r\n            let darkColor = input.readInt32();\r\n            if (darkColor != -1) Color.rgb888ToColor(data.darkColor = new Color(), darkColor);\r\n\r\n            data.attachmentName = input.readStringRef();\r\n            data.blendMode = SkeletonBinary.BlendModeValues[input.readInt(true)];\r\n            skeletonData.slots.push(data);\r\n        }\r\n\r\n        // IK constraints.\r\n        n = input.readInt(true);\r\n        for (let i = 0, nn; i < n; i++) {\r\n            let data = new IkConstraintData(input.readString());\r\n            data.order = input.readInt(true);\r\n            data.skinRequired = input.readBoolean();\r\n            nn = input.readInt(true);\r\n            for (let ii = 0; ii < nn; ii++)\r\n                data.bones.push(skeletonData.bones[input.readInt(true)]);\r\n            data.target = skeletonData.bones[input.readInt(true)];\r\n            data.mix = input.readFloat();\r\n            data.softness = input.readFloat() * scale;\r\n            data.bendDirection = input.readByte();\r\n            data.compress = input.readBoolean();\r\n            data.stretch = input.readBoolean();\r\n            data.uniform = input.readBoolean();\r\n            skeletonData.ikConstraints.push(data);\r\n        }\r\n\r\n        // Transform constraints.\r\n        n = input.readInt(true);\r\n        for (let i = 0, nn; i < n; i++) {\r\n            let data = new TransformConstraintData(input.readString());\r\n            data.order = input.readInt(true);\r\n            data.skinRequired = input.readBoolean();\r\n            nn = input.readInt(true);\r\n            for (let ii = 0; ii < nn; ii++)\r\n                data.bones.push(skeletonData.bones[input.readInt(true)]);\r\n            data.target = skeletonData.bones[input.readInt(true)];\r\n            data.local = input.readBoolean();\r\n            data.relative = input.readBoolean();\r\n            data.offsetRotation = input.readFloat();\r\n            data.offsetX = input.readFloat() * scale;\r\n            data.offsetY = input.readFloat() * scale;\r\n            data.offsetScaleX = input.readFloat();\r\n            data.offsetScaleY = input.readFloat();\r\n            data.offsetShearY = input.readFloat();\r\n            data.mixRotate = input.readFloat();\r\n            data.mixX = input.readFloat();\r\n            data.mixY = input.readFloat();\r\n            data.mixScaleX = input.readFloat();\r\n            data.mixScaleY = input.readFloat();\r\n            data.mixShearY = input.readFloat();\r\n            skeletonData.transformConstraints.push(data);\r\n        }\r\n\r\n        // Path constraints.\r\n        n = input.readInt(true);\r\n        for (let i = 0, nn; i < n; i++) {\r\n            let data = new PathConstraintData(input.readString());\r\n            data.order = input.readInt(true);\r\n            data.skinRequired = input.readBoolean();\r\n            nn = input.readInt(true);\r\n            for (let ii = 0; ii < nn; ii++)\r\n                data.bones.push(skeletonData.bones[input.readInt(true)]);\r\n            data.target = skeletonData.slots[input.readInt(true)];\r\n            data.positionMode = input.readInt(true);\r\n            data.spacingMode = input.readInt(true);\r\n            data.rotateMode = input.readInt(true);\r\n            data.offsetRotation = input.readFloat();\r\n            data.position = input.readFloat();\r\n            if (data.positionMode == PositionMode.Fixed) data.position *= scale;\r\n            data.spacing = input.readFloat();\r\n            if (data.spacingMode == SpacingMode.Length || data.spacingMode == SpacingMode.Fixed) data.spacing *= scale;\r\n            data.mixRotate = input.readFloat();\r\n            data.mixX = input.readFloat();\r\n            data.mixY = input.readFloat();\r\n            skeletonData.pathConstraints.push(data);\r\n        }\r\n\r\n        // Default skin.\r\n        let defaultSkin = this.readSkin(input, skeletonData, true, nonessential);\r\n        if (defaultSkin) {\r\n            skeletonData.defaultSkin = defaultSkin;\r\n            skeletonData.skins.push(defaultSkin);\r\n        }\r\n\r\n        // Skins.\r\n        {\r\n            let i = skeletonData.skins.length;\r\n            Utils.setArraySize(skeletonData.skins, n = i + input.readInt(true));\r\n            for (; i < n; i++)\r\n                skeletonData.skins[i] = this.readSkin(input, skeletonData, false, nonessential);\r\n        }\r\n\r\n        // Linked meshes.\r\n        n = this.linkedMeshes.length;\r\n        for (let i = 0; i < n; i++) {\r\n            let linkedMesh = this.linkedMeshes[i];\r\n            let skin = !linkedMesh.skin ? skeletonData.defaultSkin : skeletonData.findSkin(linkedMesh.skin);\r\n            let parent = skin.getAttachment(linkedMesh.slotIndex, linkedMesh.parent);\r\n            linkedMesh.mesh.deformAttachment = linkedMesh.inheritDeform ? parent as VertexAttachment : linkedMesh.mesh;\r\n            linkedMesh.mesh.setParentMesh(parent as MeshAttachment);\r\n            // linkedMesh.mesh.updateUVs();\r\n        }\r\n        this.linkedMeshes.length = 0;\r\n\r\n        // Events.\r\n        n = input.readInt(true);\r\n        for (let i = 0; i < n; i++) {\r\n            let data = new EventData(input.readStringRef());\r\n            data.intValue = input.readInt(false);\r\n            data.floatValue = input.readFloat();\r\n            data.stringValue = input.readString();\r\n            data.audioPath = input.readString();\r\n            if (data.audioPath) {\r\n                data.volume = input.readFloat();\r\n                data.balance = input.readFloat();\r\n            }\r\n            skeletonData.events.push(data);\r\n        }\r\n\r\n        // Animations.\r\n        n = input.readInt(true);\r\n        for (let i = 0; i < n; i++)\r\n            skeletonData.animations.push(this.readAnimation(input, input.readString(), skeletonData));\r\n        return skeletonData;\r\n    }\r\n\r\n    private readSkin (input: BinaryInput, skeletonData: SkeletonData, defaultSkin: boolean, nonessential: boolean): Skin {\r\n        let skin = null;\r\n        let slotCount = 0;\r\n\r\n        if (defaultSkin) {\r\n            slotCount = input.readInt(true)\r\n            if (slotCount == 0) return null;\r\n            skin = new Skin(\"default\");\r\n        } else {\r\n            skin = new Skin(input.readStringRef());\r\n            skin.bones.length = input.readInt(true);\r\n            for (let i = 0, n = skin.bones.length; i < n; i++)\r\n                skin.bones[i] = skeletonData.bones[input.readInt(true)];\r\n\r\n            for (let i = 0, n = input.readInt(true); i < n; i++)\r\n                skin.constraints.push(skeletonData.ikConstraints[input.readInt(true)]);\r\n            for (let i = 0, n = input.readInt(true); i < n; i++)\r\n                skin.constraints.push(skeletonData.transformConstraints[input.readInt(true)]);\r\n            for (let i = 0, n = input.readInt(true); i < n; i++)\r\n                skin.constraints.push(skeletonData.pathConstraints[input.readInt(true)]);\r\n\r\n            slotCount = input.readInt(true);\r\n        }\r\n\r\n        for (let i = 0; i < slotCount; i++) {\r\n            let slotIndex = input.readInt(true);\r\n            for (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\r\n                let name = input.readStringRef();\r\n                let attachment = this.readAttachment(input, skeletonData, skin, slotIndex, name, nonessential);\r\n                if (attachment) skin.setAttachment(slotIndex, name, attachment);\r\n            }\r\n        }\r\n        return skin;\r\n    }\r\n\r\n    private readAttachment(input: BinaryInput, skeletonData: SkeletonData, skin: Skin, slotIndex: number, attachmentName: string, nonessential: boolean): Attachment {\r\n        let scale = this.scale;\r\n\r\n        let name = input.readStringRef();\r\n        if (!name) name = attachmentName;\r\n\r\n        switch (input.readByte()) {\r\n            case AttachmentType.Region: {\r\n                let path = input.readStringRef();\r\n                let rotation = input.readFloat();\r\n                let x = input.readFloat();\r\n                let y = input.readFloat();\r\n                let scaleX = input.readFloat();\r\n                let scaleY = input.readFloat();\r\n                let width = input.readFloat();\r\n                let height = input.readFloat();\r\n                let color = input.readInt32();\r\n\r\n                if (!path) path = name;\r\n                let region = this.attachmentLoader.newRegionAttachment(skin, name, path);\r\n                if (!region) return null;\r\n                region.path = path;\r\n                region.x = x * scale;\r\n                region.y = y * scale;\r\n                region.scaleX = scaleX;\r\n                region.scaleY = scaleY;\r\n                region.rotation = rotation;\r\n                region.width = width * scale;\r\n                region.height = height * scale;\r\n                Color.rgba8888ToColor(region.color, color);\r\n                // region.updateOffset();\r\n                return region;\r\n            }\r\n            case AttachmentType.BoundingBox: {\r\n                let vertexCount = input.readInt(true);\r\n                let vertices = this.readVertices(input, vertexCount);\r\n                let color = nonessential ? input.readInt32() : 0;\r\n\r\n                let box = this.attachmentLoader.newBoundingBoxAttachment(skin, name);\r\n                if (!box) return null;\r\n                box.worldVerticesLength = vertexCount << 1;\r\n                box.vertices = vertices.vertices;\r\n                box.bones = vertices.bones;\r\n                if (nonessential) Color.rgba8888ToColor(box.color, color);\r\n                return box;\r\n            }\r\n            case AttachmentType.Mesh: {\r\n                let path = input.readStringRef();\r\n                let color = input.readInt32();\r\n                let vertexCount = input.readInt(true);\r\n                let uvs = this.readFloatArray(input, vertexCount << 1, 1);\r\n                let triangles = this.readShortArray(input);\r\n                let vertices = this.readVertices(input, vertexCount);\r\n                let hullLength = input.readInt(true);\r\n                let edges = null;\r\n                let width = 0, height = 0;\r\n                if (nonessential) {\r\n                    edges = this.readShortArray(input);\r\n                    width = input.readFloat();\r\n                    height = input.readFloat();\r\n                }\r\n\r\n                if (!path) path = name;\r\n                let mesh = this.attachmentLoader.newMeshAttachment(skin, name, path);\r\n                if (!mesh) return null;\r\n                mesh.path = path;\r\n                Color.rgba8888ToColor(mesh.color, color);\r\n                mesh.bones = vertices.bones;\r\n                mesh.vertices = vertices.vertices;\r\n                mesh.worldVerticesLength = vertexCount << 1;\r\n                mesh.triangles = triangles;\r\n                mesh.regionUVs = new Float32Array(uvs);\r\n                // mesh.updateUVs();\r\n                mesh.hullLength = hullLength << 1;\r\n                if (nonessential) {\r\n                    mesh.edges = edges;\r\n                    mesh.width = width * scale;\r\n                    mesh.height = height * scale;\r\n                }\r\n                return mesh;\r\n            }\r\n            case AttachmentType.LinkedMesh: {\r\n                let path = input.readStringRef();\r\n                let color = input.readInt32();\r\n                let skinName = input.readStringRef();\r\n                let parent = input.readStringRef();\r\n                let inheritDeform = input.readBoolean();\r\n                let width = 0, height = 0;\r\n                if (nonessential) {\r\n                    width = input.readFloat();\r\n                    height = input.readFloat();\r\n                }\r\n\r\n                if (!path) path = name;\r\n                let mesh = this.attachmentLoader.newMeshAttachment(skin, name, path);\r\n                if (!mesh) return null;\r\n                mesh.path = path;\r\n                Color.rgba8888ToColor(mesh.color, color);\r\n                if (nonessential) {\r\n                    mesh.width = width * scale;\r\n                    mesh.height = height * scale;\r\n                }\r\n                this.linkedMeshes.push(new LinkedMesh(mesh, skinName, slotIndex, parent, inheritDeform));\r\n                return mesh;\r\n            }\r\n            case AttachmentType.Path: {\r\n                let closed = input.readBoolean();\r\n                let constantSpeed = input.readBoolean();\r\n                let vertexCount = input.readInt(true);\r\n                let vertices = this.readVertices(input, vertexCount);\r\n                let lengths = Utils.newArray(vertexCount / 3, 0);\r\n                for (let i = 0, n = lengths.length; i < n; i++)\r\n                    lengths[i] = input.readFloat() * scale;\r\n                let color = nonessential ? input.readInt32() : 0;\r\n\r\n                let path = this.attachmentLoader.newPathAttachment(skin, name);\r\n                if (!path) return null;\r\n                path.closed = closed;\r\n                path.constantSpeed = constantSpeed;\r\n                path.worldVerticesLength = vertexCount << 1;\r\n                path.vertices = vertices.vertices;\r\n                path.bones = vertices.bones;\r\n                path.lengths = lengths;\r\n                if (nonessential) Color.rgba8888ToColor(path.color, color);\r\n                return path;\r\n            }\r\n            case AttachmentType.Point: {\r\n                let rotation = input.readFloat();\r\n                let x = input.readFloat();\r\n                let y = input.readFloat();\r\n                let color = nonessential ? input.readInt32() : 0;\r\n\r\n                let point = this.attachmentLoader.newPointAttachment(skin, name);\r\n                if (!point) return null;\r\n                point.x = x * scale;\r\n                point.y = y * scale;\r\n                point.rotation = rotation;\r\n                if (nonessential) Color.rgba8888ToColor(point.color, color);\r\n                return point;\r\n            }\r\n            case AttachmentType.Clipping: {\r\n                let endSlotIndex = input.readInt(true);\r\n                let vertexCount = input.readInt(true);\r\n                let vertices = this.readVertices(input, vertexCount);\r\n                let color = nonessential ? input.readInt32() : 0;\r\n\r\n                let clip = this.attachmentLoader.newClippingAttachment(skin, name);\r\n                if (!clip) return null;\r\n                clip.endSlot = skeletonData.slots[endSlotIndex];\r\n                clip.worldVerticesLength = vertexCount << 1;\r\n                clip.vertices = vertices.vertices;\r\n                clip.bones = vertices.bones;\r\n                if (nonessential) Color.rgba8888ToColor(clip.color, color);\r\n                return clip;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private readVertices (input: BinaryInput, vertexCount: number): Vertices {\r\n        let scale = this.scale;\r\n        let verticesLength = vertexCount << 1;\r\n        let vertices = new Vertices();\r\n        if (!input.readBoolean()) {\r\n            vertices.vertices = this.readFloatArray(input, verticesLength, scale);\r\n            return vertices;\r\n        }\r\n        let weights = new Array<number>();\r\n        let bonesArray = new Array<number>();\r\n        for (let i = 0; i < vertexCount; i++) {\r\n            let boneCount = input.readInt(true);\r\n            bonesArray.push(boneCount);\r\n            for (let ii = 0; ii < boneCount; ii++) {\r\n                bonesArray.push(input.readInt(true));\r\n                weights.push(input.readFloat() * scale);\r\n                weights.push(input.readFloat() * scale);\r\n                weights.push(input.readFloat());\r\n            }\r\n        }\r\n        vertices.vertices = Utils.toFloatArray(weights);\r\n        vertices.bones = bonesArray;\r\n        return vertices;\r\n    }\r\n\r\n    private readFloatArray (input: BinaryInput, n: number, scale: number): number[] {\r\n        let array = new Array<number>(n);\r\n        if (scale == 1) {\r\n            for (let i = 0; i < n; i++)\r\n                array[i] = input.readFloat();\r\n        } else {\r\n            for (let i = 0; i < n; i++)\r\n                array[i] = input.readFloat() * scale;\r\n        }\r\n        return array;\r\n    }\r\n\r\n    private readShortArray (input: BinaryInput): number[] {\r\n        let n = input.readInt(true);\r\n        let array = new Array<number>(n);\r\n        for (let i = 0; i < n; i++)\r\n            array[i] = input.readShort();\r\n        return array;\r\n    }\r\n\r\n    private readAnimation (input: BinaryInput, name: string, skeletonData: SkeletonData): Animation {\r\n        input.readInt(true); // Number of timelines.\r\n        let timelines = new Array<Timeline>();\r\n        let scale = this.scale;\r\n\r\n        // Slot timelines.\r\n        for (let i = 0, n = input.readInt(true); i < n; i++) {\r\n            let slotIndex = input.readInt(true);\r\n            for (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\r\n                let timelineType = input.readByte();\r\n                let frameCount = input.readInt(true);\r\n                let frameLast = frameCount - 1;\r\n                switch (timelineType) {\r\n                    case SLOT_ATTACHMENT: {\r\n                        let timeline = new AttachmentTimeline(frameCount, slotIndex);\r\n                        for (let frame = 0; frame < frameCount; frame++)\r\n                            timeline.setFrame(frame, input.readFloat(), input.readStringRef());\r\n                        timelines.push(timeline);\r\n                        break;\r\n                    }\r\n                    case SLOT_RGBA: {\r\n                        let bezierCount = input.readInt(true);\r\n                        let timeline = new RGBATimeline(frameCount, bezierCount, slotIndex);\r\n\r\n                        let time = input.readFloat();\r\n                        let r = input.readUnsignedByte() / 255.0;\r\n                        let g = input.readUnsignedByte() / 255.0;\r\n                        let b = input.readUnsignedByte() / 255.0;\r\n                        let a = input.readUnsignedByte() / 255.0;\r\n\r\n                        for (let frame = 0, bezier = 0;; frame++) {\r\n                            timeline.setFrame(frame, time, r, g, b, a);\r\n                            if (frame == frameLast) break;\r\n\r\n                            let time2 = input.readFloat();\r\n                            let r2 = input.readUnsignedByte() / 255.0;\r\n                            let g2 = input.readUnsignedByte() / 255.0;\r\n                            let b2 = input.readUnsignedByte() / 255.0;\r\n                            let a2 = input.readUnsignedByte() / 255.0;\r\n\r\n                            switch (input.readByte()) {\r\n                                case CURVE_STEPPED:\r\n                                    timeline.setStepped(frame);\r\n                                    break;\r\n                                case CURVE_BEZIER:\r\n                                    setBezier(input, timeline, bezier++, frame, 0, time, time2, r, r2, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 1, time, time2, g, g2, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 2, time, time2, b, b2, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 3, time, time2, a, a2, 1);\r\n                            }\r\n                            time = time2;\r\n                            r = r2;\r\n                            g = g2;\r\n                            b = b2;\r\n                            a = a2;\r\n                        }\r\n                        timelines.push(timeline);\r\n                        break;\r\n                    }\r\n                    case SLOT_RGB: {\r\n                        let bezierCount = input.readInt(true);\r\n                        let timeline = new RGBTimeline(frameCount, bezierCount, slotIndex);\r\n\r\n                        let time = input.readFloat();\r\n                        let r = input.readUnsignedByte() / 255.0;\r\n                        let g = input.readUnsignedByte() / 255.0;\r\n                        let b = input.readUnsignedByte() / 255.0;\r\n\r\n                        for (let frame = 0, bezier = 0;; frame++) {\r\n                            timeline.setFrame(frame, time, r, g, b);\r\n                            if (frame == frameLast) break;\r\n\r\n                            let time2 = input.readFloat();\r\n                            let r2 = input.readUnsignedByte() / 255.0;\r\n                            let g2 = input.readUnsignedByte() / 255.0;\r\n                            let b2 = input.readUnsignedByte() / 255.0;\r\n\r\n                            switch (input.readByte()) {\r\n                                case CURVE_STEPPED:\r\n                                    timeline.setStepped(frame);\r\n                                    break;\r\n                                case CURVE_BEZIER:\r\n                                    setBezier(input, timeline, bezier++, frame, 0, time, time2, r, r2, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 1, time, time2, g, g2, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 2, time, time2, b, b2, 1);\r\n                            }\r\n                            time = time2;\r\n                            r = r2;\r\n                            g = g2;\r\n                            b = b2;\r\n                        }\r\n                        timelines.push(timeline);\r\n                        break;\r\n                    }\r\n                    case SLOT_RGBA2: {\r\n                        let bezierCount = input.readInt(true);\r\n                        let timeline = new RGBA2Timeline(frameCount, bezierCount, slotIndex);\r\n\r\n                        let time = input.readFloat();\r\n                        let r = input.readUnsignedByte() / 255.0;\r\n                        let g = input.readUnsignedByte() / 255.0;\r\n                        let b = input.readUnsignedByte() / 255.0;\r\n                        let a = input.readUnsignedByte() / 255.0;\r\n                        let r2 = input.readUnsignedByte() / 255.0;\r\n                        let g2 = input.readUnsignedByte() / 255.0;\r\n                        let b2 = input.readUnsignedByte() / 255.0;\r\n\r\n                        for (let frame = 0, bezier = 0;; frame++) {\r\n                            timeline.setFrame(frame, time, r, g, b, a, r2, g2, b2);\r\n                            if (frame == frameLast) break;\r\n                            let time2 = input.readFloat();\r\n                            let nr = input.readUnsignedByte() / 255.0;\r\n                            let ng = input.readUnsignedByte() / 255.0;\r\n                            let nb = input.readUnsignedByte() / 255.0;\r\n                            let na = input.readUnsignedByte() / 255.0;\r\n                            let nr2 = input.readUnsignedByte() / 255.0;\r\n                            let ng2 = input.readUnsignedByte() / 255.0;\r\n                            let nb2 = input.readUnsignedByte() / 255.0;\r\n\r\n                            switch (input.readByte()) {\r\n                                case CURVE_STEPPED:\r\n                                    timeline.setStepped(frame);\r\n                                    break;\r\n                                case CURVE_BEZIER:\r\n                                    setBezier(input, timeline, bezier++, frame, 0, time, time2, r, nr, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 1, time, time2, g, ng, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 2, time, time2, b, nb, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 3, time, time2, a, na, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 4, time, time2, r2, nr2, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 5, time, time2, g2, ng2, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 6, time, time2, b2, nb2, 1);\r\n                            }\r\n                            time = time2;\r\n                            r = nr;\r\n                            g = ng;\r\n                            b = nb;\r\n                            a = na;\r\n                            r2 = nr2;\r\n                            g2 = ng2;\r\n                            b2 = nb2;\r\n                        }\r\n                        timelines.push(timeline);\r\n                        break;\r\n                    }\r\n                    case SLOT_RGB2: {\r\n                        let bezierCount = input.readInt(true);\r\n                        let timeline = new RGB2Timeline(frameCount, bezierCount, slotIndex);\r\n\r\n                        let time = input.readFloat();\r\n                        let r = input.readUnsignedByte() / 255.0;\r\n                        let g = input.readUnsignedByte() / 255.0;\r\n                        let b = input.readUnsignedByte() / 255.0;\r\n                        let r2 = input.readUnsignedByte() / 255.0;\r\n                        let g2 = input.readUnsignedByte() / 255.0;\r\n                        let b2 = input.readUnsignedByte() / 255.0;\r\n\r\n                        for (let frame = 0, bezier = 0;; frame++) {\r\n                            timeline.setFrame(frame, time, r, g, b, r2, g2, b2);\r\n                            if (frame == frameLast) break;\r\n                            let time2 = input.readFloat();\r\n                            let nr = input.readUnsignedByte() / 255.0;\r\n                            let ng = input.readUnsignedByte() / 255.0;\r\n                            let nb = input.readUnsignedByte() / 255.0;\r\n                            let nr2 = input.readUnsignedByte() / 255.0;\r\n                            let ng2 = input.readUnsignedByte() / 255.0;\r\n                            let nb2 = input.readUnsignedByte() / 255.0;\r\n\r\n                            switch (input.readByte()) {\r\n                                case CURVE_STEPPED:\r\n                                    timeline.setStepped(frame);\r\n                                    break;\r\n                                case CURVE_BEZIER:\r\n                                    setBezier(input, timeline, bezier++, frame, 0, time, time2, r, nr, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 1, time, time2, g, ng, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 2, time, time2, b, nb, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 3, time, time2, r2, nr2, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 4, time, time2, g2, ng2, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 5, time, time2, b2, nb2, 1);\r\n                            }\r\n                            time = time2;\r\n                            r = nr;\r\n                            g = ng;\r\n                            b = nb;\r\n                            r2 = nr2;\r\n                            g2 = ng2;\r\n                            b2 = nb2;\r\n                        }\r\n                        timelines.push(timeline);\r\n                        break;\r\n                    }\r\n                    case SLOT_ALPHA: {\r\n                        let timeline = new AlphaTimeline(frameCount, input.readInt(true), slotIndex);\r\n                        let time = input.readFloat(), a = input.readUnsignedByte() / 255;\r\n                        for (let frame = 0, bezier = 0;; frame++) {\r\n                            timeline.setFrame(frame, time, a);\r\n                            if (frame == frameLast) break;\r\n                            let time2 = input.readFloat();\r\n                            let a2 = input.readUnsignedByte() / 255;\r\n                            switch (input.readByte()) {\r\n                                case CURVE_STEPPED:\r\n                                    timeline.setStepped(frame);\r\n                                    break;\r\n                                case CURVE_BEZIER:\r\n                                    setBezier(input, timeline, bezier++, frame, 0, time, time2, a, a2, 1);\r\n                            }\r\n                            time = time2;\r\n                            a = a2;\r\n                        }\r\n                        timelines.push(timeline);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Bone timelines.\r\n        for (let i = 0, n = input.readInt(true); i < n; i++) {\r\n            let boneIndex = input.readInt(true);\r\n            for (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\r\n                let type = input.readByte(), frameCount = input.readInt(true), bezierCount = input.readInt(true);\r\n                switch (type) {\r\n                    case BONE_ROTATE:\r\n                        timelines.push(readTimeline1(input, new RotateTimeline(frameCount, bezierCount, boneIndex), 1));\r\n                        break;\r\n                    case BONE_TRANSLATE:\r\n                        timelines.push(readTimeline2(input, new TranslateTimeline(frameCount, bezierCount, boneIndex), scale));\r\n                        break;\r\n                    case BONE_TRANSLATEX:\r\n                        timelines.push(readTimeline1(input, new TranslateXTimeline(frameCount, bezierCount, boneIndex), scale));\r\n                        break;\r\n                    case BONE_TRANSLATEY:\r\n                        timelines.push(readTimeline1(input, new TranslateYTimeline(frameCount, bezierCount, boneIndex), scale));\r\n                        break;\r\n                    case BONE_SCALE:\r\n                        timelines.push(readTimeline2(input, new ScaleTimeline(frameCount, bezierCount, boneIndex), 1));\r\n                        break;\r\n                    case BONE_SCALEX:\r\n                        timelines.push(readTimeline1(input, new ScaleXTimeline(frameCount, bezierCount, boneIndex), 1));\r\n                        break;\r\n                    case BONE_SCALEY:\r\n                        timelines.push(readTimeline1(input, new ScaleYTimeline(frameCount, bezierCount, boneIndex), 1));\r\n                        break;\r\n                    case BONE_SHEAR:\r\n                        timelines.push(readTimeline2(input, new ShearTimeline(frameCount, bezierCount, boneIndex), 1));\r\n                        break;\r\n                    case BONE_SHEARX:\r\n                        timelines.push(readTimeline1(input, new ShearXTimeline(frameCount, bezierCount, boneIndex), 1));\r\n                        break;\r\n                    case BONE_SHEARY:\r\n                        timelines.push(readTimeline1(input, new ShearYTimeline(frameCount, bezierCount, boneIndex), 1));\r\n                }\r\n            }\r\n        }\r\n\r\n        // IK constraint timelines.\r\n        for (let i = 0, n = input.readInt(true); i < n; i++) {\r\n            let index = input.readInt(true), frameCount = input.readInt(true), frameLast = frameCount - 1;\r\n            let timeline = new IkConstraintTimeline(frameCount, input.readInt(true), index);\r\n            let time = input.readFloat(), mix = input.readFloat(), softness = input.readFloat() * scale;\r\n            for (let frame = 0, bezier = 0;; frame++) {\r\n                timeline.setFrame(frame, time, mix, softness, input.readByte(), input.readBoolean(), input.readBoolean());\r\n                if (frame == frameLast) break;\r\n                let time2 = input.readFloat(), mix2 = input.readFloat(), softness2 = input.readFloat() * scale;\r\n                switch (input.readByte()) {\r\n                    case CURVE_STEPPED:\r\n                        timeline.setStepped(frame);\r\n                        break;\r\n                    case CURVE_BEZIER:\r\n                        setBezier(input, timeline, bezier++, frame, 0, time, time2, mix, mix2, 1);\r\n                        setBezier(input, timeline, bezier++, frame, 1, time, time2, softness, softness2, scale);\r\n                }\r\n                time = time2;\r\n                mix = mix2;\r\n                softness = softness2;\r\n            }\r\n            timelines.push(timeline);\r\n        }\r\n\r\n        // Transform constraint timelines.\r\n        for (let i = 0, n = input.readInt(true); i < n; i++) {\r\n            let index = input.readInt(true), frameCount = input.readInt(true), frameLast = frameCount - 1;\r\n            let timeline = new TransformConstraintTimeline(frameCount, input.readInt(true), index);\r\n            let time = input.readFloat(), mixRotate = input.readFloat(), mixX = input.readFloat(), mixY = input.readFloat(),\r\n                mixScaleX = input.readFloat(), mixScaleY = input.readFloat(), mixShearY = input.readFloat();\r\n            for (let frame = 0, bezier = 0;; frame++) {\r\n                timeline.setFrame(frame, time, mixRotate, mixX, mixY, mixScaleX, mixScaleY, mixShearY);\r\n                if (frame == frameLast) break;\r\n                let time2 = input.readFloat(), mixRotate2 = input.readFloat(), mixX2 = input.readFloat(), mixY2 = input.readFloat(),\r\n                    mixScaleX2 = input.readFloat(), mixScaleY2 = input.readFloat(), mixShearY2 = input.readFloat();\r\n                switch (input.readByte()) {\r\n                    case CURVE_STEPPED:\r\n                        timeline.setStepped(frame);\r\n                        break;\r\n                    case CURVE_BEZIER:\r\n                        setBezier(input, timeline, bezier++, frame, 0, time, time2, mixRotate, mixRotate2, 1);\r\n                        setBezier(input, timeline, bezier++, frame, 1, time, time2, mixX, mixX2, 1);\r\n                        setBezier(input, timeline, bezier++, frame, 2, time, time2, mixY, mixY2, 1);\r\n                        setBezier(input, timeline, bezier++, frame, 3, time, time2, mixScaleX, mixScaleX2, 1);\r\n                        setBezier(input, timeline, bezier++, frame, 4, time, time2, mixScaleY, mixScaleY2, 1);\r\n                        setBezier(input, timeline, bezier++, frame, 5, time, time2, mixShearY, mixShearY2, 1);\r\n                }\r\n                time = time2;\r\n                mixRotate = mixRotate2;\r\n                mixX = mixX2;\r\n                mixY = mixY2;\r\n                mixScaleX = mixScaleX2;\r\n                mixScaleY = mixScaleY2;\r\n                mixShearY = mixShearY2;\r\n            }\r\n            timelines.push(timeline);\r\n        }\r\n\r\n        // Path constraint timelines.\r\n        for (let i = 0, n = input.readInt(true); i < n; i++) {\r\n            let index = input.readInt(true);\r\n            let data = skeletonData.pathConstraints[index];\r\n            for (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\r\n                switch (input.readByte()) {\r\n                    case PATH_POSITION:\r\n                        timelines\r\n                            .push(readTimeline1(input, new PathConstraintPositionTimeline(input.readInt(true), input.readInt(true), index),\r\n                                data.positionMode == PositionMode.Fixed ? scale : 1));\r\n                        break;\r\n                    case PATH_SPACING:\r\n                        timelines\r\n                            .push(readTimeline1(input, new PathConstraintSpacingTimeline(input.readInt(true), input.readInt(true), index),\r\n                                data.spacingMode == SpacingMode.Length || data.spacingMode == SpacingMode.Fixed ? scale : 1));\r\n                        break;\r\n                    case PATH_MIX:\r\n                        let timeline = new PathConstraintMixTimeline(input.readInt(true), input.readInt(true), index);\r\n                        let time = input.readFloat(), mixRotate = input.readFloat(), mixX = input.readFloat(), mixY = input.readFloat();\r\n                        for (let frame = 0, bezier = 0, frameLast = timeline.getFrameCount() - 1;; frame++) {\r\n                            timeline.setFrame(frame, time, mixRotate, mixX, mixY);\r\n                            if (frame == frameLast) break;\r\n                            let time2 = input.readFloat(), mixRotate2 = input.readFloat(), mixX2 = input.readFloat(),\r\n                                mixY2 = input.readFloat();\r\n                            switch (input.readByte()) {\r\n                                case CURVE_STEPPED:\r\n                                    timeline.setStepped(frame);\r\n                                    break;\r\n                                case CURVE_BEZIER:\r\n                                    setBezier(input, timeline, bezier++, frame, 0, time, time2, mixRotate, mixRotate2, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 1, time, time2, mixX, mixX2, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 2, time, time2, mixY, mixY2, 1);\r\n                            }\r\n                            time = time2;\r\n                            mixRotate = mixRotate2;\r\n                            mixX = mixX2;\r\n                            mixY = mixY2;\r\n                        }\r\n                        timelines.push(timeline);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Deform timelines.\r\n        for (let i = 0, n = input.readInt(true); i < n; i++) {\r\n            let skin = skeletonData.skins[input.readInt(true)];\r\n            for (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\r\n                let slotIndex = input.readInt(true);\r\n                for (let iii = 0, nnn = input.readInt(true); iii < nnn; iii++) {\r\n                    let attachmentName = input.readStringRef();\r\n                    let attachment = skin.getAttachment(slotIndex, attachmentName) as VertexAttachment;\r\n                    let weighted = attachment.bones;\r\n                    let vertices = attachment.vertices;\r\n                    let deformLength = weighted ? vertices.length / 3 * 2 : vertices.length;\r\n\r\n                    let frameCount = input.readInt(true);\r\n                    let frameLast = frameCount - 1;\r\n                    let bezierCount = input.readInt(true);\r\n                    let timeline = new DeformTimeline(frameCount, bezierCount, slotIndex, attachment);\r\n\r\n                    let time = input.readFloat();\r\n                    for (let frame = 0, bezier = 0;; frame++) {\r\n                        let deform;\r\n                        let end = input.readInt(true);\r\n                        if (end == 0)\r\n                            deform = weighted ? Utils.newFloatArray(deformLength) : vertices;\r\n                        else {\r\n                            deform = Utils.newFloatArray(deformLength);\r\n                            let start = input.readInt(true);\r\n                            end += start;\r\n                            if (scale == 1) {\r\n                                for (let v = start; v < end; v++)\r\n                                    deform[v] = input.readFloat();\r\n                            } else {\r\n                                for (let v = start; v < end; v++)\r\n                                    deform[v] = input.readFloat() * scale;\r\n                            }\r\n                            if (!weighted) {\r\n                                for (let v = 0, vn = deform.length; v < vn; v++)\r\n                                    deform[v] += vertices[v];\r\n                            }\r\n                        }\r\n\r\n                        timeline.setFrame(frame, time, deform);\r\n                        if (frame == frameLast) break;\r\n                        let time2 = input.readFloat();\r\n                        switch(input.readByte()) {\r\n                            case CURVE_STEPPED:\r\n                                timeline.setStepped(frame);\r\n                                break;\r\n                            case CURVE_BEZIER:\r\n                                setBezier(input, timeline, bezier++, frame, 0, time, time2, 0, 1, 1);\r\n                        }\r\n                        time = time2;\r\n                    }\r\n                    timelines.push(timeline);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Draw order timeline.\r\n        let drawOrderCount = input.readInt(true);\r\n        if (drawOrderCount > 0) {\r\n            let timeline = new DrawOrderTimeline(drawOrderCount);\r\n            let slotCount = skeletonData.slots.length;\r\n            for (let i = 0; i < drawOrderCount; i++) {\r\n                let time = input.readFloat();\r\n                let offsetCount = input.readInt(true);\r\n                let drawOrder = Utils.newArray(slotCount, 0);\r\n                for (let ii = slotCount - 1; ii >= 0; ii--)\r\n                    drawOrder[ii] = -1;\r\n                let unchanged = Utils.newArray(slotCount - offsetCount, 0);\r\n                let originalIndex = 0, unchangedIndex = 0;\r\n                for (let ii = 0; ii < offsetCount; ii++) {\r\n                    let slotIndex = input.readInt(true);\r\n                    // Collect unchanged items.\r\n                    while (originalIndex != slotIndex)\r\n                        unchanged[unchangedIndex++] = originalIndex++;\r\n                    // Set changed items.\r\n                    drawOrder[originalIndex + input.readInt(true)] = originalIndex++;\r\n                }\r\n                // Collect remaining unchanged items.\r\n                while (originalIndex < slotCount)\r\n                    unchanged[unchangedIndex++] = originalIndex++;\r\n                // Fill in unchanged items.\r\n                for (let ii = slotCount - 1; ii >= 0; ii--)\r\n                    if (drawOrder[ii] == -1) drawOrder[ii] = unchanged[--unchangedIndex];\r\n                timeline.setFrame(i, time, drawOrder);\r\n            }\r\n            timelines.push(timeline);\r\n        }\r\n\r\n        // Event timeline.\r\n        let eventCount = input.readInt(true);\r\n        if (eventCount > 0) {\r\n            let timeline = new EventTimeline(eventCount);\r\n            for (let i = 0; i < eventCount; i++) {\r\n                let time = input.readFloat();\r\n                let eventData = skeletonData.events[input.readInt(true)];\r\n                let event = new Event(time, eventData);\r\n                event.intValue = input.readInt(false);\r\n                event.floatValue = input.readFloat();\r\n                event.stringValue = input.readBoolean() ? input.readString() : eventData.stringValue;\r\n                if (event.data.audioPath) {\r\n                    event.volume = input.readFloat();\r\n                    event.balance = input.readFloat();\r\n                }\r\n                timeline.setFrame(i, event);\r\n            }\r\n            timelines.push(timeline);\r\n        }\r\n\r\n        let duration = 0;\r\n        for (let i = 0, n = timelines.length; i < n; i++)\r\n            duration = Math.max(duration, timelines[i].getDuration());\r\n        return new Animation(name, timelines, duration);\r\n    }\r\n}\r\n\r\nclass LinkedMesh {\r\n    parent: string; skin: string;\r\n    slotIndex: number;\r\n    mesh: MeshAttachment;\r\n    inheritDeform: boolean;\r\n\r\n    constructor (mesh: MeshAttachment, skin: string, slotIndex: number, parent: string, inheritDeform: boolean) {\r\n        this.mesh = mesh;\r\n        this.skin = skin;\r\n        this.slotIndex = slotIndex;\r\n        this.parent = parent;\r\n        this.inheritDeform = inheritDeform;\r\n    }\r\n}\r\n\r\nclass Vertices {\r\n    constructor(public bones: Array<number> = null, public vertices: Array<number> | Float32Array = null) { }\r\n}\r\n\r\nfunction readTimeline1 (input: BinaryInput, timeline: CurveTimeline1, scale: number): CurveTimeline1 {\r\n    let time = input.readFloat(), value = input.readFloat() * scale;\r\n    for (let frame = 0, bezier = 0, frameLast = timeline.getFrameCount() - 1;; frame++) {\r\n        timeline.setFrame(frame, time, value);\r\n        if (frame == frameLast) break;\r\n        let time2 = input.readFloat(), value2 = input.readFloat() * scale;\r\n        switch (input.readByte()) {\r\n            case CURVE_STEPPED:\r\n                timeline.setStepped(frame);\r\n                break;\r\n            case CURVE_BEZIER:\r\n                setBezier(input, timeline, bezier++, frame, 0, time, time2, value, value2, 1);\r\n        }\r\n        time = time2;\r\n        value = value2;\r\n    }\r\n    return timeline;\r\n}\r\n\r\nfunction readTimeline2 (input: BinaryInput, timeline: CurveTimeline2, scale: number): CurveTimeline2 {\r\n    let time = input.readFloat(), value1 = input.readFloat() * scale, value2 = input.readFloat() * scale;\r\n    for (let frame = 0, bezier = 0, frameLast = timeline.getFrameCount() - 1;; frame++) {\r\n        timeline.setFrame(frame, time, value1, value2);\r\n        if (frame == frameLast) break;\r\n        let time2 = input.readFloat(), nvalue1 = input.readFloat() * scale, nvalue2 = input.readFloat() * scale;\r\n        switch (input.readByte()) {\r\n            case CURVE_STEPPED:\r\n                timeline.setStepped(frame);\r\n                break;\r\n            case CURVE_BEZIER:\r\n                setBezier(input, timeline, bezier++, frame, 0, time, time2, value1, nvalue1, scale);\r\n                setBezier(input, timeline, bezier++, frame, 1, time, time2, value2, nvalue2, scale);\r\n        }\r\n        time = time2;\r\n        value1 = nvalue1;\r\n        value2 = nvalue2;\r\n    }\r\n    return timeline;\r\n}\r\n\r\nfunction setBezier (input: BinaryInput, timeline: CurveTimeline, bezier: number, frame: number, value: number,\r\n                    time1: number, time2: number, value1: number, value2: number, scale: number) {\r\n    timeline.setBezier(bezier, frame, value, time1, value1, input.readFloat(), input.readFloat() * scale, input.readFloat(), input.readFloat() * scale, time2, value2);\r\n}\r\n\r\nconst  BONE_ROTATE = 0;\r\nconst  BONE_TRANSLATE = 1;\r\nconst  BONE_TRANSLATEX = 2;\r\nconst  BONE_TRANSLATEY = 3;\r\nconst  BONE_SCALE = 4;\r\nconst  BONE_SCALEX = 5;\r\nconst  BONE_SCALEY = 6;\r\nconst  BONE_SHEAR = 7;\r\nconst  BONE_SHEARX = 8;\r\nconst  BONE_SHEARY = 9;\r\n\r\nconst  SLOT_ATTACHMENT = 0;\r\nconst  SLOT_RGBA = 1;\r\nconst  SLOT_RGB = 2;\r\nconst  SLOT_RGBA2 = 3;\r\nconst  SLOT_RGB2 = 4;\r\nconst  SLOT_ALPHA = 5;\r\n\r\nconst  PATH_POSITION = 0;\r\nconst  PATH_SPACING = 1;\r\nconst  PATH_MIX = 2;\r\n\r\n// @ts-ignore\r\nconst  CURVE_LINEAR = 0;\r\nconst  CURVE_STEPPED = 1;\r\nconst  CURVE_BEZIER = 2;\r\n","import {BoundingBoxAttachment} from \"./attachments\";\r\nimport {Pool, Utils} from \"@pixi-spine/base\";\r\nimport type {Skeleton} from \"./Skeleton\";\r\n\r\n/** Collects each visible {@link BoundingBoxAttachment} and computes the world vertices for its polygon. The polygon vertices are\r\n * provided along with convenience methods for doing hit detection.\r\n * @public\r\n * */\r\nexport class SkeletonBounds {\r\n\r\n    /** The left edge of the axis aligned bounding box. */\r\n    minX = 0;\r\n\r\n    /** The bottom edge of the axis aligned bounding box. */\r\n    minY = 0;\r\n\r\n    /** The right edge of the axis aligned bounding box. */\r\n    maxX = 0;\r\n\r\n    /** The top edge of the axis aligned bounding box. */\r\n    maxY = 0;\r\n\r\n    /** The visible bounding boxes. */\r\n    boundingBoxes = new Array<BoundingBoxAttachment>();\r\n\r\n    /** The world vertices for the bounding box polygons. */\r\n    polygons = new Array<ArrayLike<number>>();\r\n\r\n    private polygonPool = new Pool<ArrayLike<number>>(() => {\r\n        return Utils.newFloatArray(16);\r\n    });\r\n\r\n    /** Clears any previous polygons, finds all visible bounding box attachments, and computes the world vertices for each bounding\r\n     * box's polygon.\r\n     * @param updateAabb If true, the axis aligned bounding box containing all the polygons is computed. If false, the\r\n     *           SkeletonBounds AABB methods will always return true. */\r\n    update (skeleton: Skeleton, updateAabb: boolean) {\r\n        if (skeleton == null) throw new Error(\"skeleton cannot be null.\");\r\n        let boundingBoxes = this.boundingBoxes;\r\n        let polygons = this.polygons;\r\n        let polygonPool = this.polygonPool;\r\n        let slots = skeleton.slots;\r\n        let slotCount = slots.length;\r\n\r\n        boundingBoxes.length = 0;\r\n        polygonPool.freeAll(polygons);\r\n        polygons.length = 0;\r\n\r\n        for (let i = 0; i < slotCount; i++) {\r\n            let slot = slots[i];\r\n            if (!slot.bone.active) continue;\r\n            let attachment = slot.getAttachment();\r\n            if (attachment instanceof BoundingBoxAttachment) {\r\n                let boundingBox = attachment as BoundingBoxAttachment;\r\n                boundingBoxes.push(boundingBox);\r\n\r\n                let polygon = polygonPool.obtain();\r\n                if (polygon.length != boundingBox.worldVerticesLength) {\r\n                    polygon = Utils.newFloatArray(boundingBox.worldVerticesLength);\r\n                }\r\n                polygons.push(polygon);\r\n                boundingBox.computeWorldVertices(slot, 0, boundingBox.worldVerticesLength, polygon, 0, 2);\r\n            }\r\n        }\r\n\r\n        if (updateAabb) {\r\n            this.aabbCompute();\r\n        } else {\r\n            this.minX = Number.POSITIVE_INFINITY;\r\n            this.minY = Number.POSITIVE_INFINITY;\r\n            this.maxX = Number.NEGATIVE_INFINITY;\r\n            this.maxY = Number.NEGATIVE_INFINITY;\r\n        }\r\n    }\r\n\r\n    aabbCompute () {\r\n        let minX = Number.POSITIVE_INFINITY, minY = Number.POSITIVE_INFINITY, maxX = Number.NEGATIVE_INFINITY, maxY = Number.NEGATIVE_INFINITY;\r\n        let polygons = this.polygons;\r\n        for (let i = 0, n = polygons.length; i < n; i++) {\r\n            let polygon = polygons[i];\r\n            let vertices = polygon;\r\n            for (let ii = 0, nn = polygon.length; ii < nn; ii += 2) {\r\n                let x = vertices[ii];\r\n                let y = vertices[ii + 1];\r\n                minX = Math.min(minX, x);\r\n                minY = Math.min(minY, y);\r\n                maxX = Math.max(maxX, x);\r\n                maxY = Math.max(maxY, y);\r\n            }\r\n        }\r\n        this.minX = minX;\r\n        this.minY = minY;\r\n        this.maxX = maxX;\r\n        this.maxY = maxY;\r\n    }\r\n\r\n    /** Returns true if the axis aligned bounding box contains the point. */\r\n    aabbContainsPoint (x: number, y: number) {\r\n        return x >= this.minX && x <= this.maxX && y >= this.minY && y <= this.maxY;\r\n    }\r\n\r\n    /** Returns true if the axis aligned bounding box intersects the line segment. */\r\n    aabbIntersectsSegment (x1: number, y1: number, x2: number, y2: number) {\r\n        let minX = this.minX;\r\n        let minY = this.minY;\r\n        let maxX = this.maxX;\r\n        let maxY = this.maxY;\r\n        if ((x1 <= minX && x2 <= minX) || (y1 <= minY && y2 <= minY) || (x1 >= maxX && x2 >= maxX) || (y1 >= maxY && y2 >= maxY))\r\n            return false;\r\n        let m = (y2 - y1) / (x2 - x1);\r\n        let y = m * (minX - x1) + y1;\r\n        if (y > minY && y < maxY) return true;\r\n        y = m * (maxX - x1) + y1;\r\n        if (y > minY && y < maxY) return true;\r\n        let x = (minY - y1) / m + x1;\r\n        if (x > minX && x < maxX) return true;\r\n        x = (maxY - y1) / m + x1;\r\n        if (x > minX && x < maxX) return true;\r\n        return false;\r\n    }\r\n\r\n    /** Returns true if the axis aligned bounding box intersects the axis aligned bounding box of the specified bounds. */\r\n    aabbIntersectsSkeleton (bounds: SkeletonBounds) {\r\n        return this.minX < bounds.maxX && this.maxX > bounds.minX && this.minY < bounds.maxY && this.maxY > bounds.minY;\r\n    }\r\n\r\n    /** Returns the first bounding box attachment that contains the point, or null. When doing many checks, it is usually more\r\n     * efficient to only call this method if {@link #aabbContainsPoint(float, float)} returns true. */\r\n    containsPoint (x: number, y: number): BoundingBoxAttachment {\r\n        let polygons = this.polygons;\r\n        for (let i = 0, n = polygons.length; i < n; i++)\r\n            if (this.containsPointPolygon(polygons[i], x, y)) return this.boundingBoxes[i];\r\n        return null;\r\n    }\r\n\r\n    /** Returns true if the polygon contains the point. */\r\n    containsPointPolygon (polygon: ArrayLike<number>, x: number, y: number) {\r\n        let vertices = polygon;\r\n        let nn = polygon.length;\r\n\r\n        let prevIndex = nn - 2;\r\n        let inside = false;\r\n        for (let ii = 0; ii < nn; ii += 2) {\r\n            let vertexY = vertices[ii + 1];\r\n            let prevY = vertices[prevIndex + 1];\r\n            if ((vertexY < y && prevY >= y) || (prevY < y && vertexY >= y)) {\r\n                let vertexX = vertices[ii];\r\n                if (vertexX + (y - vertexY) / (prevY - vertexY) * (vertices[prevIndex] - vertexX) < x) inside = !inside;\r\n            }\r\n            prevIndex = ii;\r\n        }\r\n        return inside;\r\n    }\r\n\r\n    /** Returns the first bounding box attachment that contains any part of the line segment, or null. When doing many checks, it\r\n     * is usually more efficient to only call this method if {@link #aabbIntersectsSegment()} returns\r\n     * true. */\r\n    intersectsSegment (x1: number, y1: number, x2: number, y2: number) {\r\n        let polygons = this.polygons;\r\n        for (let i = 0, n = polygons.length; i < n; i++)\r\n            if (this.intersectsSegmentPolygon(polygons[i], x1, y1, x2, y2)) return this.boundingBoxes[i];\r\n        return null;\r\n    }\r\n\r\n    /** Returns true if the polygon contains any part of the line segment. */\r\n    intersectsSegmentPolygon (polygon: ArrayLike<number>, x1: number, y1: number, x2: number, y2: number) {\r\n        let vertices = polygon;\r\n        let nn = polygon.length;\r\n\r\n        let width12 = x1 - x2, height12 = y1 - y2;\r\n        let det1 = x1 * y2 - y1 * x2;\r\n        let x3 = vertices[nn - 2], y3 = vertices[nn - 1];\r\n        for (let ii = 0; ii < nn; ii += 2) {\r\n            let x4 = vertices[ii], y4 = vertices[ii + 1];\r\n            let det2 = x3 * y4 - y3 * x4;\r\n            let width34 = x3 - x4, height34 = y3 - y4;\r\n            let det3 = width12 * height34 - height12 * width34;\r\n            let x = (det1 * width34 - width12 * det2) / det3;\r\n            if (((x >= x3 && x <= x4) || (x >= x4 && x <= x3)) && ((x >= x1 && x <= x2) || (x >= x2 && x <= x1))) {\r\n                let y = (det1 * height34 - height12 * det2) / det3;\r\n                if (((y >= y3 && y <= y4) || (y >= y4 && y <= y3)) && ((y >= y1 && y <= y2) || (y >= y2 && y <= y1))) return true;\r\n            }\r\n            x3 = x4;\r\n            y3 = y4;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /** Returns the polygon for the specified bounding box, or null. */\r\n    getPolygon (boundingBox: BoundingBoxAttachment) {\r\n        if (boundingBox == null) throw new Error(\"boundingBox cannot be null.\");\r\n        let index = this.boundingBoxes.indexOf(boundingBox);\r\n        return index == -1 ? null : this.polygons[index];\r\n    }\r\n\r\n    /** The width of the axis aligned bounding box. */\r\n    getWidth () {\r\n        return this.maxX - this.minX;\r\n    }\r\n\r\n    /** The height of the axis aligned bounding box. */\r\n    getHeight () {\r\n        return this.maxY - this.minY;\r\n    }\r\n}\r\n","import type {Attachment, AttachmentLoader, MeshAttachment, VertexAttachment} from './attachments';\r\nimport {\r\n    AlphaTimeline, Animation,\r\n    AttachmentTimeline, CurveTimeline, CurveTimeline1, CurveTimeline2, DeformTimeline, DrawOrderTimeline, EventTimeline,\r\n    IkConstraintTimeline,\r\n    PathConstraintMixTimeline,\r\n    PathConstraintPositionTimeline,\r\n    PathConstraintSpacingTimeline, RGB2Timeline, RGBA2Timeline, RGBATimeline, RGBTimeline,\r\n    RotateTimeline,\r\n    ScaleTimeline, ScaleXTimeline, ScaleYTimeline,\r\n    ShearTimeline, ShearXTimeline, ShearYTimeline,\r\n    Timeline,\r\n    TransformConstraintTimeline,\r\n    TranslateTimeline, TranslateXTimeline, TranslateYTimeline\r\n} from './Animation';\r\nimport {Event} from './Event';\r\nimport {SkeletonData} from './SkeletonData';\r\nimport {SlotData} from './SlotData';\r\nimport {BoneData, TransformMode} from './BoneData';\r\nimport {IkConstraintData} from './IkConstraintData';\r\nimport {TransformConstraintData} from './TransformConstraintData';\r\nimport {PathConstraintData, PositionMode, RotateMode, SpacingMode} from './PathConstraintData';\r\nimport {Skin} from './Skin';\r\nimport {EventData} from './EventData';\r\nimport {ArrayLike, Color, Utils, settings} from '@pixi-spine/base';\r\nimport {BLEND_MODES} from '@pixi/constants';\r\n\r\n/** Loads skeleton data in the Spine JSON format.\r\n *\r\n * See [Spine JSON format](http://esotericsoftware.com/spine-json-format) and\r\n * [JSON and binary data](http://esotericsoftware.com/spine-loading-skeleton-data#JSON-and-binary-data) in the Spine\r\n * Runtimes Guide.\r\n * @public\r\n * */\r\nexport class SkeletonJson {\r\n    attachmentLoader: AttachmentLoader;\r\n\r\n    /** Scales bone positions, image sizes, and translations as they are loaded. This allows different size images to be used at\r\n     * runtime than were used in Spine.\r\n     *\r\n     * See [Scaling](http://esotericsoftware.com/spine-loading-skeleton-data#Scaling) in the Spine Runtimes Guide. */\r\n    scale = 1;\r\n    private linkedMeshes = new Array<LinkedMesh>();\r\n\r\n    constructor (attachmentLoader: AttachmentLoader) {\r\n        this.attachmentLoader = attachmentLoader;\r\n    }\r\n\r\n    readSkeletonData (json: string | any): SkeletonData {\r\n        let scale = this.scale;\r\n        let skeletonData = new SkeletonData();\r\n        let root = typeof(json) === \"string\" ? JSON.parse(json) : json;\r\n\r\n        // Skeleton\r\n        let skeletonMap = root.skeleton;\r\n        if (skeletonMap) {\r\n            skeletonData.hash = skeletonMap.hash;\r\n            skeletonData.version = skeletonMap.spine;\r\n            if (skeletonData.version.substr(0, 3) !== '4.0') {\r\n                let error = `Spine 4.0 loader cant load version ${skeletonMap.spine}. Please configure your pixi-spine bundle`;\r\n                console.error(error);\r\n            }\r\n            skeletonData.x = skeletonMap.x;\r\n            skeletonData.y = skeletonMap.y;\r\n            skeletonData.width = skeletonMap.width;\r\n            skeletonData.height = skeletonMap.height;\r\n            skeletonData.fps = skeletonMap.fps;\r\n            skeletonData.imagesPath = skeletonMap.images;\r\n        }\r\n\r\n        // Bones\r\n        if (root.bones) {\r\n            for (let i = 0; i < root.bones.length; i++) {\r\n                let boneMap = root.bones[i];\r\n\r\n                let parent: BoneData = null;\r\n                let parentName: string = getValue(boneMap, \"parent\", null);\r\n                if (parentName != null) {\r\n                    parent = skeletonData.findBone(parentName);\r\n                    if (parent == null) throw new Error(\"Parent bone not found: \" + parentName);\r\n                }\r\n                let data = new BoneData(skeletonData.bones.length, boneMap.name, parent);\r\n                data.length = getValue(boneMap, \"length\", 0) * scale;\r\n                data.x = getValue(boneMap, \"x\", 0) * scale;\r\n                data.y = getValue(boneMap, \"y\", 0) * scale;\r\n                data.rotation = getValue(boneMap, \"rotation\", 0);\r\n                data.scaleX = getValue(boneMap, \"scaleX\", 1);\r\n                data.scaleY = getValue(boneMap, \"scaleY\", 1);\r\n                data.shearX = getValue(boneMap, \"shearX\", 0);\r\n                data.shearY = getValue(boneMap, \"shearY\", 0);\r\n                data.transformMode = Utils.enumValue(TransformMode, getValue(boneMap, \"transform\", \"Normal\"));\r\n                data.skinRequired = getValue(boneMap, \"skin\", false);\r\n\r\n                let color = getValue(boneMap, \"color\", null);\r\n                if (color) data.color.setFromString(color);\r\n\r\n                skeletonData.bones.push(data);\r\n            }\r\n        }\r\n\r\n        // Slots.\r\n        if (root.slots) {\r\n            for (let i = 0; i < root.slots.length; i++) {\r\n                let slotMap = root.slots[i];\r\n                let slotName: string = slotMap.name;\r\n                let boneName: string = slotMap.bone;\r\n                let boneData = skeletonData.findBone(boneName);\r\n                if (boneData == null) throw new Error(\"Slot bone not found: \" + boneName);\r\n                let data = new SlotData(skeletonData.slots.length, slotName, boneData);\r\n\r\n                let color: string = getValue(slotMap, \"color\", null);\r\n                if (color) data.color.setFromString(color);\r\n\r\n                let dark: string = getValue(slotMap, \"dark\", null);\r\n                if (dark) data.darkColor = Color.fromString(dark);\r\n\r\n                data.attachmentName = getValue(slotMap, \"attachment\", null);\r\n                data.blendMode = SkeletonJson.blendModeFromString(getValue(slotMap, \"blend\", \"normal\"));\r\n                skeletonData.slots.push(data);\r\n            }\r\n        }\r\n\r\n        // IK constraints\r\n        if (root.ik) {\r\n            for (let i = 0; i < root.ik.length; i++) {\r\n                let constraintMap = root.ik[i];\r\n                let data = new IkConstraintData(constraintMap.name);\r\n                data.order = getValue(constraintMap, \"order\", 0);\r\n                data.skinRequired = getValue(constraintMap, \"skin\", false);\r\n\r\n                for (let ii = 0; ii < constraintMap.bones.length; ii++) {\r\n                    let boneName = constraintMap.bones[ii];\r\n                    let bone = skeletonData.findBone(boneName);\r\n                    if (bone == null) throw new Error(\"IK bone not found: \" + boneName);\r\n                    data.bones.push(bone);\r\n                }\r\n\r\n                data.target = skeletonData.findBone(constraintMap.target);\r\n\r\n                data.mix = getValue(constraintMap, \"mix\", 1);\r\n                data.softness = getValue(constraintMap, \"softness\", 0) * scale;\r\n                data.bendDirection = getValue(constraintMap, \"bendPositive\", true) ? 1 : -1;\r\n                data.compress = getValue(constraintMap, \"compress\", false);\r\n                data.stretch = getValue(constraintMap, \"stretch\", false);\r\n                data.uniform = getValue(constraintMap, \"uniform\", false);\r\n\r\n                skeletonData.ikConstraints.push(data);\r\n            }\r\n        }\r\n\r\n        // Transform constraints.\r\n        if (root.transform) {\r\n            for (let i = 0; i < root.transform.length; i++) {\r\n                let constraintMap = root.transform[i];\r\n                let data = new TransformConstraintData(constraintMap.name);\r\n                data.order = getValue(constraintMap, \"order\", 0);\r\n                data.skinRequired = getValue(constraintMap, \"skin\", false);\r\n\r\n                for (let ii = 0; ii < constraintMap.bones.length; ii++) {\r\n                    let boneName = constraintMap.bones[ii];\r\n                    let bone = skeletonData.findBone(boneName);\r\n                    if (bone == null) throw new Error(\"Transform constraint bone not found: \" + boneName);\r\n                    data.bones.push(bone);\r\n                }\r\n\r\n                let targetName: string = constraintMap.target;\r\n                data.target = skeletonData.findBone(targetName);\r\n                if (data.target == null) throw new Error(\"Transform constraint target bone not found: \" + targetName);\r\n\r\n                data.local = getValue(constraintMap, \"local\", false);\r\n                data.relative = getValue(constraintMap, \"relative\", false);\r\n                data.offsetRotation = getValue(constraintMap, \"rotation\", 0);\r\n                data.offsetX = getValue(constraintMap, \"x\", 0) * scale;\r\n                data.offsetY = getValue(constraintMap, \"y\", 0) * scale;\r\n                data.offsetScaleX = getValue(constraintMap, \"scaleX\", 0);\r\n                data.offsetScaleY = getValue(constraintMap, \"scaleY\", 0);\r\n                data.offsetShearY = getValue(constraintMap, \"shearY\", 0);\r\n\r\n                data.mixRotate = getValue(constraintMap, \"mixRotate\", 1);\r\n                data.mixX = getValue(constraintMap, \"mixX\", 1);\r\n                data.mixY = getValue(constraintMap, \"mixY\", data.mixX);\r\n                data.mixScaleX = getValue(constraintMap, \"mixScaleX\", 1);\r\n                data.mixScaleY = getValue(constraintMap, \"mixScaleY\", data.mixScaleX);\r\n                data.mixShearY = getValue(constraintMap, \"mixShearY\", 1);\r\n\r\n                skeletonData.transformConstraints.push(data);\r\n            }\r\n        }\r\n\r\n        // Path constraints.\r\n        if (root.path) {\r\n            for (let i = 0; i < root.path.length; i++) {\r\n                let constraintMap = root.path[i];\r\n                let data = new PathConstraintData(constraintMap.name);\r\n                data.order = getValue(constraintMap, \"order\", 0);\r\n                data.skinRequired = getValue(constraintMap, \"skin\", false);\r\n\r\n                for (let ii = 0; ii < constraintMap.bones.length; ii++) {\r\n                    let boneName = constraintMap.bones[ii];\r\n                    let bone = skeletonData.findBone(boneName);\r\n                    if (bone == null) throw new Error(\"Transform constraint bone not found: \" + boneName);\r\n                    data.bones.push(bone);\r\n                }\r\n\r\n                let targetName: string = constraintMap.target;\r\n                data.target = skeletonData.findSlot(targetName);\r\n                if (data.target == null) throw new Error(\"Path target slot not found: \" + targetName);\r\n\r\n                data.positionMode = Utils.enumValue(PositionMode, getValue(constraintMap, \"positionMode\", \"Percent\"));\r\n                data.spacingMode = Utils.enumValue(SpacingMode, getValue(constraintMap, \"spacingMode\", \"Length\"));\r\n                data.rotateMode = Utils.enumValue(RotateMode, getValue(constraintMap, \"rotateMode\", \"Tangent\"));\r\n                data.offsetRotation = getValue(constraintMap, \"rotation\", 0);\r\n                data.position = getValue(constraintMap, \"position\", 0);\r\n                if (data.positionMode == PositionMode.Fixed) data.position *= scale;\r\n                data.spacing = getValue(constraintMap, \"spacing\", 0);\r\n                if (data.spacingMode == SpacingMode.Length || data.spacingMode == SpacingMode.Fixed) data.spacing *= scale;\r\n                data.mixRotate = getValue(constraintMap, \"mixRotate\", 1);\r\n                data.mixX = getValue(constraintMap, \"mixX\", 1);\r\n                data.mixY = getValue(constraintMap, \"mixY\", data.mixX);\r\n\r\n                skeletonData.pathConstraints.push(data);\r\n            }\r\n        }\r\n\r\n        // Skins.\r\n        if (root.skins) {\r\n            for (let i = 0; i < root.skins.length; i++) {\r\n                let skinMap = root.skins[i]\r\n                let skin = new Skin(skinMap.name);\r\n\r\n                if (skinMap.bones) {\r\n                    for (let ii = 0; ii < skinMap.bones.length; ii++) {\r\n                        let bone = skeletonData.findBone(skinMap.bones[ii]);\r\n                        if (bone == null) throw new Error(\"Skin bone not found: \" + skinMap.bones[i]);\r\n                        skin.bones.push(bone);\r\n                    }\r\n                }\r\n\r\n                if (skinMap.ik) {\r\n                    for (let ii = 0; ii < skinMap.ik.length; ii++) {\r\n                        let constraint = skeletonData.findIkConstraint(skinMap.ik[ii]);\r\n                        if (constraint == null) throw new Error(\"Skin IK constraint not found: \" + skinMap.ik[i]);\r\n                        skin.constraints.push(constraint);\r\n                    }\r\n                }\r\n\r\n                if (skinMap.transform) {\r\n                    for (let ii = 0; ii < skinMap.transform.length; ii++) {\r\n                        let constraint = skeletonData.findTransformConstraint(skinMap.transform[ii]);\r\n                        if (constraint == null) throw new Error(\"Skin transform constraint not found: \" + skinMap.transform[i]);\r\n                        skin.constraints.push(constraint);\r\n                    }\r\n                }\r\n\r\n                if (skinMap.path) {\r\n                    for (let ii = 0; ii < skinMap.path.length; ii++) {\r\n                        let constraint = skeletonData.findPathConstraint(skinMap.path[ii]);\r\n                        if (constraint == null) throw new Error(\"Skin path constraint not found: \" + skinMap.path[i]);\r\n                        skin.constraints.push(constraint);\r\n                    }\r\n                }\r\n\r\n                for (let slotName in skinMap.attachments) {\r\n                    let slot = skeletonData.findSlot(slotName);\r\n                    if (slot == null) throw new Error(\"Slot not found: \" + slotName);\r\n                    let slotMap = skinMap.attachments[slotName];\r\n                    for (let entryName in slotMap) {\r\n                        let attachment = this.readAttachment(slotMap[entryName], skin, slot.index, entryName, skeletonData);\r\n                        if (attachment) skin.setAttachment(slot.index, entryName, attachment);\r\n                    }\r\n                }\r\n                skeletonData.skins.push(skin);\r\n                if (skin.name == \"default\") skeletonData.defaultSkin = skin;\r\n            }\r\n        }\r\n\r\n        // Linked meshes.\r\n        for (let i = 0, n = this.linkedMeshes.length; i < n; i++) {\r\n            let linkedMesh = this.linkedMeshes[i];\r\n            let skin = !linkedMesh.skin ? skeletonData.defaultSkin : skeletonData.findSkin(linkedMesh.skin);\r\n            let parent = skin.getAttachment(linkedMesh.slotIndex, linkedMesh.parent);\r\n            linkedMesh.mesh.deformAttachment = linkedMesh.inheritDeform ? <VertexAttachment>parent : <VertexAttachment>linkedMesh.mesh;\r\n            linkedMesh.mesh.setParentMesh(<MeshAttachment> parent);\r\n            // linkedMesh.mesh.updateUVs();\r\n        }\r\n        this.linkedMeshes.length = 0;\r\n\r\n        // Events.\r\n        if (root.events) {\r\n            for (let eventName in root.events) {\r\n                let eventMap = root.events[eventName];\r\n                let data = new EventData(eventName);\r\n                data.intValue = getValue(eventMap, \"int\", 0);\r\n                data.floatValue = getValue(eventMap, \"float\", 0);\r\n                data.stringValue = getValue(eventMap, \"string\", \"\");\r\n                data.audioPath = getValue(eventMap, \"audio\", null);\r\n                if (data.audioPath) {\r\n                    data.volume = getValue(eventMap, \"volume\", 1);\r\n                    data.balance = getValue(eventMap, \"balance\", 0);\r\n                }\r\n                skeletonData.events.push(data);\r\n            }\r\n        }\r\n\r\n        // Animations.\r\n        if (root.animations) {\r\n            for (let animationName in root.animations) {\r\n                let animationMap = root.animations[animationName];\r\n                this.readAnimation(animationMap, animationName, skeletonData);\r\n            }\r\n        }\r\n\r\n        return skeletonData;\r\n    }\r\n\r\n    readAttachment (map: any, skin: Skin, slotIndex: number, name: string, skeletonData: SkeletonData): Attachment {\r\n        let scale = this.scale;\r\n        name = getValue(map, \"name\", name);\r\n\r\n        switch (getValue(map, \"type\", \"region\")) {\r\n            case \"region\": {\r\n                let path = getValue(map, \"path\", name);\r\n                let region = this.attachmentLoader.newRegionAttachment(skin, name, path);\r\n                if (!region) return null;\r\n                region.path = path;\r\n                region.x = getValue(map, \"x\", 0) * scale;\r\n                region.y = getValue(map, \"y\", 0) * scale;\r\n                region.scaleX = getValue(map, \"scaleX\", 1);\r\n                region.scaleY = getValue(map, \"scaleY\", 1);\r\n                region.rotation = getValue(map, \"rotation\", 0);\r\n                region.width = map.width * scale;\r\n                region.height = map.height * scale;\r\n\r\n                let color: string = getValue(map, \"color\", null);\r\n                if (color) region.color.setFromString(color);\r\n\r\n                // region.updateOffset();\r\n                return region;\r\n            }\r\n            case \"boundingbox\": {\r\n                let box = this.attachmentLoader.newBoundingBoxAttachment(skin, name);\r\n                if (!box) return null;\r\n                this.readVertices(map, box, map.vertexCount << 1);\r\n                let color: string = getValue(map, \"color\", null);\r\n                if (color) box.color.setFromString(color);\r\n                return box;\r\n            }\r\n            case \"mesh\":\r\n            case \"linkedmesh\": {\r\n                let path = getValue(map, \"path\", name);\r\n                let mesh = this.attachmentLoader.newMeshAttachment(skin, name, path);\r\n                if (!mesh) return null;\r\n                mesh.path = path;\r\n\r\n                let color = getValue(map, \"color\", null);\r\n                if (color) mesh.color.setFromString(color);\r\n\r\n                mesh.width = getValue(map, \"width\", 0) * scale;\r\n                mesh.height = getValue(map, \"height\", 0) * scale;\r\n\r\n                let parent: string = getValue(map, \"parent\", null);\r\n                if (parent) {\r\n                    this.linkedMeshes.push(new LinkedMesh(mesh, <string> getValue(map, \"skin\", null), slotIndex, parent, getValue(map, \"deform\", true)));\r\n                    return mesh;\r\n                }\r\n\r\n                let uvs: Array<number> = map.uvs;\r\n                this.readVertices(map, mesh, uvs.length);\r\n                mesh.triangles = map.triangles;\r\n                mesh.regionUVs = new Float32Array(uvs);\r\n                // mesh.updateUVs();\r\n\r\n                mesh.edges = getValue(map, \"edges\", null);\r\n                mesh.hullLength = getValue(map, \"hull\", 0) * 2;\r\n                return mesh;\r\n            }\r\n            case \"path\": {\r\n                let path = this.attachmentLoader.newPathAttachment(skin, name);\r\n                if (!path) return null;\r\n                path.closed = getValue(map, \"closed\", false);\r\n                path.constantSpeed = getValue(map, \"constantSpeed\", true);\r\n\r\n                let vertexCount = map.vertexCount;\r\n                this.readVertices(map, path, vertexCount << 1);\r\n\r\n                let lengths: Array<number> = Utils.newArray(vertexCount / 3, 0);\r\n                for (let i = 0; i < map.lengths.length; i++)\r\n                    lengths[i] = map.lengths[i] * scale;\r\n                path.lengths = lengths;\r\n\r\n                let color: string = getValue(map, \"color\", null);\r\n                if (color) path.color.setFromString(color);\r\n                return path;\r\n            }\r\n            case \"point\": {\r\n                let point = this.attachmentLoader.newPointAttachment(skin, name);\r\n                if (!point) return null;\r\n                point.x = getValue(map, \"x\", 0) * scale;\r\n                point.y = getValue(map, \"y\", 0) * scale;\r\n                point.rotation = getValue(map, \"rotation\", 0);\r\n\r\n                let color = getValue(map, \"color\", null);\r\n                if (color) point.color.setFromString(color);\r\n                return point;\r\n            }\r\n            case \"clipping\": {\r\n                let clip = this.attachmentLoader.newClippingAttachment(skin, name);\r\n                if (!clip) return null;\r\n\r\n                let end = getValue(map, \"end\", null);\r\n                if (end != null) {\r\n                    let slot = skeletonData.findSlot(end);\r\n                    if (slot == null) throw new Error(\"Clipping end slot not found: \" + end);\r\n                    clip.endSlot = slot;\r\n                }\r\n\r\n                let vertexCount = map.vertexCount;\r\n                this.readVertices(map, clip, vertexCount << 1);\r\n\r\n                let color: string = getValue(map, \"color\", null);\r\n                if (color) clip.color.setFromString(color);\r\n                return clip;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    readVertices (map: any, attachment: VertexAttachment, verticesLength: number) {\r\n        let scale = this.scale;\r\n        attachment.worldVerticesLength = verticesLength;\r\n        let vertices: Array<number> = map.vertices;\r\n        if (verticesLength == vertices.length) {\r\n            let scaledVertices = Utils.toFloatArray(vertices);\r\n            if (scale != 1) {\r\n                for (let i = 0, n = vertices.length; i < n; i++)\r\n                    scaledVertices[i] *= scale;\r\n            }\r\n            attachment.vertices = scaledVertices;\r\n            return;\r\n        }\r\n        let weights = new Array<number>();\r\n        let bones = new Array<number>();\r\n        for (let i = 0, n = vertices.length; i < n;) {\r\n            let boneCount = vertices[i++];\r\n            bones.push(boneCount);\r\n            for (let nn = i + boneCount * 4; i < nn; i += 4) {\r\n                bones.push(vertices[i]);\r\n                weights.push(vertices[i + 1] * scale);\r\n                weights.push(vertices[i + 2] * scale);\r\n                weights.push(vertices[i + 3]);\r\n            }\r\n        }\r\n        attachment.bones = bones;\r\n        attachment.vertices = Utils.toFloatArray(weights);\r\n    }\r\n\r\n    readAnimation (map: any, name: string, skeletonData: SkeletonData) {\r\n        let scale = this.scale;\r\n        let timelines = new Array<Timeline>();\r\n\r\n        // Slot timelines.\r\n        if (map.slots) {\r\n            for (let slotName in map.slots) {\r\n                let slotMap = map.slots[slotName];\r\n                let slotIndex = skeletonData.findSlotIndex(slotName);\r\n                if (slotIndex == -1) throw new Error(\"Slot not found: \" + slotName);\r\n                for (let timelineName in slotMap) {\r\n                    let timelineMap = slotMap[timelineName];\r\n                    if (!timelineMap) continue;\r\n                    if (timelineName == \"attachment\") {\r\n                        let timeline = new AttachmentTimeline(timelineMap.length, slotIndex);\r\n                        for (let frame = 0; frame < timelineMap.length; frame++) {\r\n                            let keyMap = timelineMap[frame];\r\n                            timeline.setFrame(frame, getValue(keyMap, \"time\", 0), keyMap.name);\r\n                        }\r\n                        timelines.push(timeline);\r\n\r\n                    } else if (timelineName == \"rgba\") {\r\n                        let timeline = new RGBATimeline(timelineMap.length, timelineMap.length << 2, slotIndex);\r\n                        let keyMap = timelineMap[0];\r\n                        let time = getValue(keyMap, \"time\", 0);\r\n                        let color = Color.fromString(keyMap.color);\r\n\r\n                        for (let frame = 0, bezier = 0;; frame++) {\r\n                            timeline.setFrame(frame, time, color.r, color.g, color.b, color.a);\r\n                            let nextMap = timelineMap[frame + 1];\r\n                            if (!nextMap)  {\r\n                                timeline.shrink(bezier);\r\n                                break;\r\n                            }\r\n                            let time2 = getValue(nextMap, \"time\", 0);\r\n                            let newColor = Color.fromString(nextMap.color);\r\n                            let curve = keyMap.curve;\r\n                            if (curve) {\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, color.r, newColor.r, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, color.g, newColor.g, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, color.b, newColor.b, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 3, time, time2, color.a, newColor.a, 1);\r\n                            }\r\n                            time = time2;\r\n                            color = newColor;\r\n                            keyMap = nextMap;\r\n                        }\r\n\r\n                        timelines.push(timeline);\r\n\r\n                    } else if (timelineName == \"rgb\") {\r\n                        let timeline = new RGBTimeline(timelineMap.length, timelineMap.length * 3, slotIndex);\r\n                        let keyMap = timelineMap[0];\r\n                        let time = getValue(keyMap, \"time\", 0);\r\n                        let color = Color.fromString(keyMap.color);\r\n\r\n                        for (let frame = 0, bezier = 0;; frame++) {\r\n                            timeline.setFrame(frame, time, color.r, color.g, color.b);\r\n                            let nextMap = timelineMap[frame + 1];\r\n                            if (!nextMap)  {\r\n                                timeline.shrink(bezier);\r\n                                break;\r\n                            }\r\n                            let time2 = getValue(nextMap, \"time\", 0);\r\n                            let newColor = Color.fromString(nextMap.color);\r\n                            let curve = keyMap.curve;\r\n                            if (curve) {\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, color.r, newColor.r, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, color.g, newColor.g, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, color.b, newColor.b, 1);\r\n                            }\r\n                            time = time2;\r\n                            color = newColor;\r\n                            keyMap = nextMap;\r\n                        }\r\n\r\n                        timelines.push(timeline);\r\n\r\n                    } else if (timelineName == \"alpha\") {\r\n                        timelines.push(readTimeline1(timelineMap, new AlphaTimeline(timelineMap.length, timelineMap.length, slotIndex), 0, 1));\r\n                    } else if (timelineName == \"rgba2\") {\r\n                        let timeline = new RGBA2Timeline(timelineMap.length, timelineMap.length * 7, slotIndex);\r\n\r\n                        let keyMap = timelineMap[0];\r\n                        let time = getValue(keyMap, \"time\", 0);\r\n                        let color = Color.fromString(keyMap.light);\r\n                        let color2 = Color.fromString(keyMap.dark);\r\n\r\n                        for (let frame = 0, bezier = 0;; frame++) {\r\n                            timeline.setFrame(frame, time, color.r, color.g, color.b, color.a, color2.r, color2.g, color2.b);\r\n                            let nextMap = timelineMap[frame + 1];\r\n                            if (!nextMap)  {\r\n                                timeline.shrink(bezier);\r\n                                break;\r\n                            }\r\n                            let time2 = getValue(nextMap, \"time\", 0);\r\n                            let newColor = Color.fromString(nextMap.light);\r\n                            let newColor2 = Color.fromString(nextMap.dark);\r\n                            let curve = keyMap.curve;\r\n                            if (curve) {\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, color.r, newColor.r, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, color.g, newColor.g, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, color.b, newColor.b, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 3, time, time2, color.a, newColor.a, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 4, time, time2, color2.r, newColor2.r, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 5, time, time2, color2.g, newColor2.g, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 6, time, time2, color2.b, newColor2.b, 1);\r\n                            }\r\n                            time = time2;\r\n                            color = newColor;\r\n                            color2 = newColor2;\r\n                            keyMap = nextMap;\r\n                        }\r\n\r\n                        timelines.push(timeline);\r\n\r\n                    } else if (timelineName == \"rgb2\") {\r\n                        let timeline = new RGB2Timeline(timelineMap.length, timelineMap.length * 6, slotIndex);\r\n\r\n                        let keyMap = timelineMap[0];\r\n                        let time = getValue(keyMap, \"time\", 0);\r\n                        let color = Color.fromString(keyMap.light);\r\n                        let color2 = Color.fromString(keyMap.dark);\r\n\r\n                        for (let frame = 0, bezier = 0;; frame++) {\r\n                            timeline.setFrame(frame, time, color.r, color.g, color.b, color2.r, color2.g, color2.b);\r\n                            let nextMap = timelineMap[frame + 1];\r\n                            if (!nextMap)  {\r\n                                timeline.shrink(bezier);\r\n                                break;\r\n                            }\r\n                            let time2 = getValue(nextMap, \"time\", 0);\r\n                            let newColor = Color.fromString(nextMap.light);\r\n                            let newColor2 = Color.fromString(nextMap.dark);\r\n                            let curve = keyMap.curve;\r\n                            if (curve) {\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, color.r, newColor.r, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, color.g, newColor.g, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, color.b, newColor.b, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 3, time, time2, color2.r, newColor2.r, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 4, time, time2, color2.g, newColor2.g, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 5, time, time2, color2.b, newColor2.b, 1);\r\n                            }\r\n                            time = time2;\r\n                            color = newColor;\r\n                            color2 = newColor2;\r\n                            keyMap = nextMap;\r\n                        }\r\n\r\n                        timelines.push(timeline);\r\n                    } else\r\n                        throw new Error(\"Invalid timeline type for a slot: \" + timelineName + \" (\" + slotName + \")\");\r\n                }\r\n            }\r\n        }\r\n\r\n        // Bone timelines.\r\n        if (map.bones) {\r\n            for (let boneName in map.bones) {\r\n                let boneMap = map.bones[boneName];\r\n                let boneIndex = skeletonData.findBoneIndex(boneName);\r\n                if (boneIndex == -1) throw new Error(\"Bone not found: \" + boneName);\r\n                for (let timelineName in boneMap) {\r\n                    let timelineMap = boneMap[timelineName];\r\n                    if (timelineMap.length == 0) continue;\r\n\r\n                    if (timelineName === \"rotate\") {\r\n                        timelines.push(readTimeline1(timelineMap, new RotateTimeline(timelineMap.length, timelineMap.length, boneIndex), 0, 1));\r\n                    } else if (timelineName === \"translate\") {\r\n                        let timeline = new TranslateTimeline(timelineMap.length, timelineMap.length << 1, boneIndex);\r\n                        timelines.push(readTimeline2(timelineMap, timeline, \"x\", \"y\", 0, scale));\r\n                    } else if (timelineName === \"translatex\") {\r\n                        let timeline = new TranslateXTimeline(timelineMap.length, timelineMap.length, boneIndex);\r\n                        timelines.push(readTimeline1(timelineMap, timeline, 0, scale));\r\n                    } else if (timelineName === \"translatey\") {\r\n                        let timeline = new TranslateYTimeline(timelineMap.length, timelineMap.length, boneIndex);\r\n                        timelines.push(readTimeline1(timelineMap, timeline, 0, scale));\r\n                    } else if (timelineName === \"scale\") {\r\n                        let timeline = new ScaleTimeline(timelineMap.length, timelineMap.length << 1, boneIndex);\r\n                        timelines.push(readTimeline2(timelineMap, timeline, \"x\", \"y\", 1, 1));\r\n                    } else if (timelineName === \"scalex\") {\r\n                        let timeline = new ScaleXTimeline(timelineMap.length, timelineMap.length, boneIndex);\r\n                        timelines.push(readTimeline1(timelineMap, timeline, 1, 1));\r\n                    } else if (timelineName === \"scaley\") {\r\n                        let timeline = new ScaleYTimeline(timelineMap.length, timelineMap.length, boneIndex);\r\n                        timelines.push(readTimeline1(timelineMap, timeline, 1, 1));\r\n                    } else if (timelineName === \"shear\") {\r\n                        let timeline = new ShearTimeline(timelineMap.length, timelineMap.length << 1, boneIndex);\r\n                        timelines.push(readTimeline2(timelineMap, timeline, \"x\", \"y\", 0, 1));\r\n                    } else if (timelineName === \"shearx\") {\r\n                        let timeline = new ShearXTimeline(timelineMap.length, timelineMap.length, boneIndex);\r\n                        timelines.push(readTimeline1(timelineMap, timeline, 0, 1));\r\n                    } else if (timelineName === \"sheary\") {\r\n                        let timeline = new ShearYTimeline(timelineMap.length, timelineMap.length, boneIndex);\r\n                        timelines.push(readTimeline1(timelineMap, timeline, 0, 1));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // IK constraint timelines.\r\n        if (map.ik) {\r\n            for (let constraintName in map.ik) {\r\n                let constraintMap = map.ik[constraintName];\r\n                let keyMap = constraintMap[0];\r\n                if (!keyMap) continue;\r\n\r\n                let constraint = skeletonData.findIkConstraint(constraintName);\r\n                let constraintIndex = skeletonData.ikConstraints.indexOf(constraint);\r\n                let timeline = new IkConstraintTimeline(constraintMap.length, constraintMap.length << 1, constraintIndex);\r\n\r\n                let time = getValue(keyMap, \"time\", 0);\r\n                let mix = getValue(keyMap, \"mix\", 1);\r\n                let softness = getValue(keyMap, \"softness\", 0) * scale;\r\n\r\n                for (let frame = 0, bezier = 0;; frame++) {\r\n                    timeline.setFrame(frame, time, mix, softness, getValue(keyMap, \"bendPositive\", true) ? 1 : -1, getValue(keyMap, \"compress\", false), getValue(keyMap, \"stretch\", false));\r\n                    let nextMap = constraintMap[frame + 1];\r\n                    if (!nextMap) {\r\n                        timeline.shrink(bezier);\r\n                        break;\r\n                    }\r\n\r\n                    let time2 = getValue(nextMap, \"time\", 0);\r\n                    let mix2 = getValue(nextMap, \"mix\", 1);\r\n                    let softness2 = getValue(nextMap, \"softness\", 0) * scale;\r\n                    let curve = keyMap.curve;\r\n                    if (curve) {\r\n                        bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, mix, mix2, 1);\r\n                        bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, softness, softness2, scale);\r\n                    }\r\n\r\n                    time = time2;\r\n                    mix = mix2;\r\n                    softness = softness2;\r\n                    keyMap = nextMap;\r\n                }\r\n                timelines.push(timeline);\r\n            }\r\n        }\r\n\r\n        // Transform constraint timelines.\r\n        if (map.transform) {\r\n            for (let constraintName in map.transform) {\r\n                let timelineMap = map.transform[constraintName];\r\n                let keyMap = timelineMap[0];\r\n                if (!keyMap) continue;\r\n\r\n                let constraint = skeletonData.findTransformConstraint(constraintName);\r\n                let constraintIndex = skeletonData.transformConstraints.indexOf(constraint);\r\n                let timeline = new TransformConstraintTimeline(timelineMap.length, timelineMap.length << 2, constraintIndex);\r\n\r\n                let time = getValue(keyMap, \"time\", 0);\r\n                let mixRotate = getValue(keyMap, \"mixRotate\", 1);\r\n                let mixX = getValue(keyMap, \"mixX\", 1);\r\n                let mixY = getValue(keyMap, \"mixY\", mixX);\r\n                let mixScaleX = getValue(keyMap, \"mixScaleX\", 1);\r\n                let mixScaleY = getValue(keyMap, \"mixScaleY\", mixScaleX);\r\n                let mixShearY = getValue(keyMap, \"mixShearY\", 1);\r\n\r\n                for (let frame = 0, bezier = 0;; frame++) {\r\n                    timeline.setFrame(frame, time, mixRotate, mixX, mixY, mixScaleX, mixScaleY, mixShearY);\r\n                    let nextMap = timelineMap[frame + 1];\r\n                    if (!nextMap) {\r\n                        timeline.shrink(bezier);\r\n                        break;\r\n                    }\r\n\r\n                    let time2 = getValue(nextMap, \"time\", 0);\r\n                    let mixRotate2 = getValue(nextMap, \"mixRotate\", 1);\r\n                    let mixX2 = getValue(nextMap, \"mixX\", 1);\r\n                    let mixY2 = getValue(nextMap, \"mixY\", mixX2);\r\n                    let mixScaleX2 = getValue(nextMap, \"mixScaleX\", 1);\r\n                    let mixScaleY2 = getValue(nextMap, \"mixScaleY\", mixScaleX2);\r\n                    let mixShearY2 = getValue(nextMap, \"mixShearY\", 1);\r\n                    let curve = keyMap.curve;\r\n                    if (curve) {\r\n                        bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, mixRotate, mixRotate2, 1);\r\n                        bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, mixX, mixX2, 1);\r\n                        bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, mixY, mixY2, 1);\r\n                        bezier = readCurve(curve, timeline, bezier, frame, 3, time, time2, mixScaleX, mixScaleX2, 1);\r\n                        bezier = readCurve(curve, timeline, bezier, frame, 4, time, time2, mixScaleY, mixScaleY2, 1);\r\n                        bezier = readCurve(curve, timeline, bezier, frame, 5, time, time2, mixShearY, mixShearY2, 1);\r\n                    }\r\n\r\n                    time = time2;\r\n                    mixRotate = mixRotate2;\r\n                    mixX = mixX2;\r\n                    mixY = mixY2;\r\n                    mixScaleX = mixScaleX2;\r\n                    mixScaleY = mixScaleY2;\r\n                    mixScaleX = mixScaleX2;\r\n                    keyMap = nextMap;\r\n                }\r\n                timelines.push(timeline);\r\n            }\r\n        }\r\n\r\n        // Path constraint timelines.\r\n        if (map.path) {\r\n            for (let constraintName in map.path) {\r\n                let constraintMap = map.path[constraintName];\r\n                let constraintIndex = skeletonData.findPathConstraintIndex(constraintName);\r\n                if (constraintIndex == -1) throw new Error(\"Path constraint not found: \" + constraintName);\r\n                let constraint = skeletonData.pathConstraints[constraintIndex];\r\n                for (let timelineName in constraintMap) {\r\n                    let timelineMap = constraintMap[timelineName];\r\n                    let keyMap = timelineMap[0];\r\n                    if (!keyMap) continue;\r\n\r\n                    if (timelineName === \"position\") {\r\n                        let timeline = new PathConstraintPositionTimeline(timelineMap.length, timelineMap.length, constraintIndex);\r\n                        timelines.push(readTimeline1(timelineMap, timeline, 0, constraint.positionMode == PositionMode.Fixed ? scale : 1));\r\n                    } else if (timelineName === \"spacing\") {\r\n                        let timeline = new PathConstraintSpacingTimeline(timelineMap.length, timelineMap.length, constraintIndex);\r\n                        timelines.push(readTimeline1(timelineMap, timeline, 0, constraint.spacingMode == SpacingMode.Length || constraint.spacingMode == SpacingMode.Fixed ? scale : 1));\r\n                    } else if (timelineName === \"mix\") {\r\n                        let timeline = new PathConstraintMixTimeline(timelineMap.size, timelineMap.size * 3, constraintIndex);\r\n                        let time = getValue(keyMap, \"time\", 0);\r\n                        let mixRotate = getValue(keyMap, \"mixRotate\", 1);\r\n                        let mixX = getValue(keyMap, \"mixX\", 1);\r\n                        let mixY = getValue(keyMap, \"mixY\", mixX);\r\n                        for (let frame = 0, bezier = 0;; frame++) {\r\n                            timeline.setFrame(frame, time, mixRotate, mixX, mixY);\r\n                            let nextMap = timelineMap[frame + 1];\r\n                            if (!nextMap) {\r\n                                timeline.shrink(bezier);\r\n                                break;\r\n                            }\r\n                            let time2 = getValue(nextMap, \"time\", 0);\r\n                            let mixRotate2 = getValue(nextMap, \"mixRotate\", 1);\r\n                            let mixX2 = getValue(nextMap, \"mixX\", 1);\r\n                            let mixY2 = getValue(nextMap, \"mixY\", mixX2);\r\n                            let curve = keyMap.curve;\r\n                            if (curve) {\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, mixRotate, mixRotate2, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, mixX, mixX2, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, mixY, mixY2, 1);\r\n                            }\r\n                            time = time2;\r\n                            mixRotate = mixRotate2;\r\n                            mixX = mixX2;\r\n                            mixY = mixY2;\r\n                            keyMap = nextMap;\r\n                        }\r\n                        timelines.push(timeline);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Deform timelines.\r\n        if (map.deform) {\r\n            for (let deformName in map.deform) {\r\n                let deformMap = map.deform[deformName];\r\n                let skin = skeletonData.findSkin(deformName);\r\n                if (skin == null) {\r\n                   if (settings.FAIL_ON_NON_EXISTING_SKIN) {\r\n                       throw new Error(\"Skin not found: \" + deformName);\r\n                   } else {\r\n                       continue;\r\n                   }\r\n                }\r\n                for (let slotName in deformMap) {\r\n                    let slotMap = deformMap[slotName];\r\n                    let slotIndex = skeletonData.findSlotIndex(slotName);\r\n                    if (slotIndex == -1) throw new Error(\"Slot not found: \" + slotMap.name);\r\n                    for (let timelineName in slotMap) {\r\n                        let timelineMap = slotMap[timelineName];\r\n                        let keyMap = timelineMap[0];\r\n                        if (!keyMap) continue;\r\n\r\n                        let attachment = <VertexAttachment>skin.getAttachment(slotIndex, timelineName);\r\n                        if (attachment == null) throw new Error(\"Deform attachment not found: \" + timelineMap.name);\r\n                        let weighted = attachment.bones != null;\r\n                        let vertices = attachment.vertices;\r\n                        let deformLength = weighted ? vertices.length / 3 * 2 : vertices.length;\r\n\r\n                        let timeline = new DeformTimeline(timelineMap.length, timelineMap.length, slotIndex, attachment);\r\n                        let time = getValue(keyMap, \"time\", 0);\r\n                        for (let frame = 0, bezier = 0;; frame++) {\r\n                            let deform: ArrayLike<number>;\r\n                            let verticesValue: Array<Number> = getValue(keyMap, \"vertices\", null);\r\n                            if (!verticesValue)\r\n                                deform = weighted ? Utils.newFloatArray(deformLength) : vertices;\r\n                            else {\r\n                                deform = Utils.newFloatArray(deformLength);\r\n                                let start = <number>getValue(keyMap, \"offset\", 0);\r\n                                Utils.arrayCopy(verticesValue, 0, deform, start, verticesValue.length);\r\n                                if (scale != 1) {\r\n                                    for (let i = start, n = i + verticesValue.length; i < n; i++)\r\n                                        deform[i] *= scale;\r\n                                }\r\n                                if (!weighted) {\r\n                                    for (let i = 0; i < deformLength; i++)\r\n                                        deform[i] += vertices[i];\r\n                                }\r\n                            }\r\n\r\n                            timeline.setFrame(frame, time, deform);\r\n                            let nextMap = timelineMap[frame + 1];\r\n                            if (!nextMap) {\r\n                                timeline.shrink(bezier);\r\n                                break;\r\n                            }\r\n                            let time2 = getValue(nextMap, \"time\", 0);\r\n                            let curve = keyMap.curve;\r\n                            if (curve) bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, 0, 1, 1);\r\n                            time = time2;\r\n                            keyMap = nextMap;\r\n                        }\r\n                        timelines.push(timeline);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Draw order timelines.\r\n        if (map.drawOrder) {\r\n            let timeline = new DrawOrderTimeline(map.drawOrder.length);\r\n            let slotCount = skeletonData.slots.length;\r\n            let frame = 0;\r\n            for (let i = 0; i < map.drawOrder.length; i++, frame++) {\r\n                let drawOrderMap = map.drawOrder[i];\r\n                let drawOrder: Array<number> = null;\r\n                let offsets = getValue(drawOrderMap, \"offsets\", null);\r\n                if (offsets) {\r\n                    drawOrder = Utils.newArray<number>(slotCount, -1);\r\n                    let unchanged = Utils.newArray<number>(slotCount - offsets.length, 0);\r\n                    let originalIndex = 0, unchangedIndex = 0;\r\n                    for (let ii = 0; ii < offsets.length; ii++) {\r\n                        let offsetMap = offsets[ii];\r\n                        let slotIndex = skeletonData.findSlotIndex(offsetMap.slot);\r\n                        // Collect unchanged items.\r\n                        while (originalIndex != slotIndex)\r\n                            unchanged[unchangedIndex++] = originalIndex++;\r\n                        // Set changed items.\r\n                        drawOrder[originalIndex + offsetMap.offset] = originalIndex++;\r\n                    }\r\n                    // Collect remaining unchanged items.\r\n                    while (originalIndex < slotCount)\r\n                        unchanged[unchangedIndex++] = originalIndex++;\r\n                    // Fill in unchanged items.\r\n                    for (let ii = slotCount - 1; ii >= 0; ii--)\r\n                        if (drawOrder[ii] == -1) drawOrder[ii] = unchanged[--unchangedIndex];\r\n                }\r\n                timeline.setFrame(frame, getValue(drawOrderMap, \"time\", 0), drawOrder);\r\n            }\r\n            timelines.push(timeline);\r\n        }\r\n\r\n        // Event timelines.\r\n        if (map.events) {\r\n            let timeline = new EventTimeline(map.events.length);\r\n            let frame = 0;\r\n            for (let i = 0; i < map.events.length; i++, frame++) {\r\n                let eventMap = map.events[i];\r\n                let eventData = skeletonData.findEvent(eventMap.name);\r\n                let event = new Event(Utils.toSinglePrecision(getValue(eventMap, \"time\", 0)), eventData);\r\n                event.intValue = getValue(eventMap, \"int\", eventData.intValue);\r\n                event.floatValue = getValue(eventMap, \"float\", eventData.floatValue);\r\n                event.stringValue = getValue(eventMap, \"string\", eventData.stringValue);\r\n                if (event.data.audioPath) {\r\n                    event.volume = getValue(eventMap, \"volume\", 1);\r\n                    event.balance = getValue(eventMap, \"balance\", 0);\r\n                }\r\n                timeline.setFrame(frame, event);\r\n            }\r\n            timelines.push(timeline);\r\n        }\r\n\r\n        let duration = 0;\r\n        for (let i = 0, n = timelines.length; i < n; i++)\r\n            duration = Math.max(duration, timelines[i].getDuration());\r\n        if (isNaN(duration)) {\r\n            throw new Error(\"Error while parsing animation, duration is NaN\");\r\n        }\r\n\r\n        skeletonData.animations.push(new Animation(name, timelines, duration));\r\n    }\r\n    static blendModeFromString (str: string) {\r\n        str = str.toLowerCase();\r\n        if (str == \"normal\") return BLEND_MODES.NORMAL;\r\n        if (str == \"additive\") return BLEND_MODES.ADD;\r\n        if (str == \"multiply\") return BLEND_MODES.MULTIPLY;\r\n        if (str == \"screen\") return BLEND_MODES.SCREEN;\r\n        throw new Error(`Unknown blend mode: ${str}`);\r\n    }\r\n}\r\n\r\nclass LinkedMesh {\r\n    parent: string; skin: string;\r\n    slotIndex: number;\r\n    mesh: MeshAttachment;\r\n    inheritDeform: boolean;\r\n\r\n    constructor (mesh: MeshAttachment, skin: string, slotIndex: number, parent: string, inheritDeform: boolean) {\r\n        this.mesh = mesh;\r\n        this.skin = skin;\r\n        this.slotIndex = slotIndex;\r\n        this.parent = parent;\r\n        this.inheritDeform = inheritDeform;\r\n    }\r\n}\r\n\r\nfunction readTimeline1 (keys: any[], timeline: CurveTimeline1, defaultValue: number, scale: number) {\r\n    let keyMap = keys[0];\r\n    let time = getValue(keyMap, \"time\", 0);\r\n    let value = getValue(keyMap, \"value\", defaultValue) * scale;\r\n    let bezier = 0;\r\n    for (let frame = 0;; frame++) {\r\n        timeline.setFrame(frame, time, value);\r\n        let nextMap = keys[frame + 1];\r\n        if (!nextMap) {\r\n            timeline.shrink(bezier);\r\n            return timeline;\r\n        }\r\n        let time2 = getValue(nextMap, \"time\", 0);\r\n        let value2 = getValue(nextMap, \"value\", defaultValue) * scale;\r\n        if (keyMap.curve) bezier = readCurve(keyMap.curve, timeline, bezier, frame, 0, time, time2, value, value2, scale);\r\n        time = time2;\r\n        value = value2;\r\n        keyMap = nextMap;\r\n    }\r\n}\r\n\r\nfunction readTimeline2 (keys: any[], timeline: CurveTimeline2, name1: string, name2: string, defaultValue: number, scale: number) {\r\n    let keyMap = keys[0];\r\n    let time = getValue(keyMap, \"time\", 0);\r\n    let value1 = getValue(keyMap, name1, defaultValue) * scale;\r\n    let value2 = getValue(keyMap, name2, defaultValue) * scale;\r\n    let bezier = 0;\r\n    for (let frame = 0;; frame++) {\r\n        timeline.setFrame(frame, time, value1, value2);\r\n        let nextMap = keys[frame + 1];\r\n        if (!nextMap) {\r\n            timeline.shrink(bezier);\r\n            return timeline;\r\n        }\r\n        let time2 = getValue(nextMap, \"time\", 0);\r\n        let nvalue1 = getValue(nextMap, name1, defaultValue) * scale;\r\n        let nvalue2 = getValue(nextMap, name2, defaultValue) * scale;\r\n        let curve = keyMap.curve;\r\n        if (curve) {\r\n            bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, value1, nvalue1, scale);\r\n            bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, value2, nvalue2, scale);\r\n        }\r\n        time = time2;\r\n        value1 = nvalue1;\r\n        value2 = nvalue2;\r\n        keyMap = nextMap;\r\n    }\r\n}\r\n\r\nfunction readCurve (curve: any, timeline: CurveTimeline, bezier: number, frame: number, value: number, time1: number, time2: number,\r\n                    value1: number, value2: number, scale: number) {\r\n    if (curve == \"stepped\") {\r\n        timeline.setStepped(frame);\r\n        return bezier;\r\n    }\r\n    let i = value << 2;\r\n    let cx1 = curve[i];\r\n    let cy1 = curve[i + 1] * scale;\r\n    let cx2 = curve[i + 2];\r\n    let cy2 = curve[i + 3] * scale;\r\n    timeline.setBezier(bezier, frame, value, time1, value1, cx1, cy1, cx2, cy2, time2, value2);\r\n    return bezier + 1;\r\n}\r\n\r\nfunction getValue (map: any, property: string, defaultValue: any) {\r\n    return map[property] !== undefined ? map[property] : defaultValue;\r\n}\r\n","/** The interface for items updated by {@link Skeleton#updateWorldTransform()}.\r\n * @public\r\n * */\r\nexport interface Updatable {\r\n    update(): void;\r\n\r\n    /** Returns false when this item has not been updated because a skin is required and the {@link Skeleton#skin active skin}\r\n     * does not contain this item.\r\n     * @see Skin#getBones()\r\n     * @see Skin#getConstraints() */\r\n    isActive(): boolean;\r\n}\r\n","import type {Skeleton} from \"./Skeleton\";\r\nimport type {Color, Vector2} from \"@pixi-spine/base\";\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface VertexEffect {\r\n    begin(skeleton: Skeleton): void;\r\n    transform(position: Vector2, uv: Vector2, light: Color, dark: Color): void;\r\n    end(): void;\r\n}\r\n","import {SpineBase} from '@pixi-spine/base';\r\nimport {Skeleton} from \"./core/Skeleton\";\r\nimport {SkeletonData} from \"./core/SkeletonData\";\r\nimport {AnimationState} from \"./core/AnimationState\";\r\nimport {AnimationStateData} from \"./core/AnimationStateData\";\r\n\r\n/**\r\n * @public\r\n */\r\nexport class Spine extends SpineBase<Skeleton, SkeletonData, AnimationState, AnimationStateData> {\r\n    createSkeleton(spineData: SkeletonData) {\r\n        this.skeleton = new Skeleton(spineData);\r\n        this.skeleton.updateWorldTransform();\r\n        this.stateData = new AnimationStateData(spineData);\r\n        this.state = new AnimationState(this.stateData);\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;IAKA;IACA;IACA;IACA;;IAEA;IACA;AACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;;IAEA;AACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;;ICtIA;IACA;IACA;;ICPA;IACA;IACA;;IAEA;IACA;AACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IChBA;IACA;IACA;;IAEA;IACA;AACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;ICxBA;IACA;IACA;;IAEA;AACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IClGA;IACA;IACA;;IAEA;AACA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;ICjCA;IACA;IACA;;IAEA;AACA;IACA;AACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;ICtxBA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;;IClnluCA;IACA;IACA;;IAEA;IACA;AACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IC3CA;IACA;IACA;;IAEA;AACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;;ICvzWA;IACA;IACA;;IAEA;IACA;;ICHA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;;ICvBA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;;ICVA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IC7QA;IACA;IACA;IACA;IACA;;IAEA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;;IClrcA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;AACA;IACA;AACA;IACA;AACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;ICvznrMA;IACA;IACA;;AAEA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;ICvCA;IACA;IACA;IACA;IACA;;AAEA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;;ICxgjngCA;IACA;IACA;;ICCA;IACA;IACA;;ICCA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}