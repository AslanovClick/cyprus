{"version":3,"file":"loader-uni.js","sources":["../src/versions.ts","../src/SpineLoader.ts","../src/Spine.ts"],"sourcesContent":["/**\r\n * @public\r\n */\r\nexport enum SPINE_VERSION {\r\n    UNKNOWN = 0,\r\n    VER37 = 37,\r\n    VER38 = 38,\r\n    VER40 = 40,\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport function detectSpineVersion(version: string): SPINE_VERSION {\r\n    const ver3 = version.substr(0, 3);\r\n    const verNum = Math.floor(+ver3 * 10 + 1e-3);\r\n\r\n    if (ver3 === '3.7') {\r\n        return SPINE_VERSION.VER37;\r\n    }\r\n    if (ver3 === '3.8') {\r\n        return SPINE_VERSION.VER38;\r\n    }\r\n    if (ver3 === '4.0') {\r\n        return SPINE_VERSION.VER40;\r\n    }\r\n    // try parse old versions with 3.7\r\n    if (verNum < SPINE_VERSION.VER37) {\r\n        return SPINE_VERSION.VER37;\r\n    }\r\n    return SPINE_VERSION.UNKNOWN;\r\n}\r\n","import {AbstractSpineParser} from '@pixi-spine/loader-base';\r\nimport {BinaryInput, ISkeletonData, ISkeletonParser, TextureAtlas} from \"@pixi-spine/base\";\r\nimport {ILoaderResource, Loader} from \"@pixi/loaders\";\r\nimport * as spine38 from \"@pixi-spine/runtime-3.8\";\r\nimport * as spine37 from \"@pixi-spine/runtime-3.7\";\r\nimport * as spine40 from \"@pixi-spine/runtime-4.0\";\r\nimport {detectSpineVersion, SPINE_VERSION} from \"./versions\";\r\n\r\nclass UniBinaryParser implements ISkeletonParser {\r\n    scale = 1;\r\n\r\n    readSkeletonData(atlas: TextureAtlas, dataToParse: Uint8Array): ISkeletonData {\r\n        let input = new BinaryInput(dataToParse);\r\n        input.readString();\r\n        let version = input.readString();\r\n        let ver = detectSpineVersion(version);\r\n        let parser: any = null;\r\n\r\n        if (ver === SPINE_VERSION.VER38) {\r\n            parser = new spine38.SkeletonBinary(new spine38.AtlasAttachmentLoader(atlas));\r\n        }\r\n\r\n        input = new BinaryInput(dataToParse);\r\n        input.readInt32();\r\n        input.readInt32();\r\n        version = input.readString();\r\n        ver = detectSpineVersion(version);\r\n        if (ver === SPINE_VERSION.VER40) {\r\n            parser = new spine40.SkeletonBinary(new spine40.AtlasAttachmentLoader(atlas));\r\n        }\r\n        if (!parser) {\r\n            let error = `Unsupported version of spine model ${version}, please update pixi-spine`;\r\n            console.error(error);\r\n        }\r\n\r\n        parser.scale = this.scale;\r\n        return parser.readSkeletonData(dataToParse);\r\n    }\r\n}\r\n\r\nclass UniJsonParser implements ISkeletonParser {\r\n    scale = 1;\r\n\r\n    readSkeletonData(atlas: TextureAtlas, dataToParse: any): ISkeletonData {\r\n        const version = dataToParse.skeleton.spine;\r\n        const ver = detectSpineVersion(version);\r\n        let parser: any = null;\r\n\r\n        if (ver === SPINE_VERSION.VER37) {\r\n            parser = new spine37.SkeletonJson(new spine37.AtlasAttachmentLoader(atlas));\r\n        }\r\n        if (ver === SPINE_VERSION.VER38) {\r\n            parser = new spine38.SkeletonJson(new spine38.AtlasAttachmentLoader(atlas));\r\n        }\r\n        if (ver === SPINE_VERSION.VER40) {\r\n            parser = new spine40.SkeletonJson(new spine40.AtlasAttachmentLoader(atlas));\r\n        }\r\n        if (!parser) {\r\n            let error = `Unsupported version of spine model ${version}, please update pixi-spine`;\r\n            console.error(error);\r\n        }\r\n\r\n        parser.scale = this.scale;\r\n        return parser.readSkeletonData(dataToParse);\r\n    }\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport class SpineParser extends AbstractSpineParser {\r\n    createBinaryParser(): ISkeletonParser {\r\n        return new UniBinaryParser();\r\n    }\r\n\r\n    createJsonParser(): ISkeletonParser {\r\n        return new UniJsonParser();\r\n    }\r\n\r\n    parseData(resource: ILoaderResource, parser: ISkeletonParser, atlas: TextureAtlas, dataToParse: any): void {\r\n        const parserCast = parser as (UniBinaryParser | UniJsonParser);\r\n        resource.spineData = parserCast.readSkeletonData(atlas, dataToParse);\r\n        resource.spineAtlas = atlas;\r\n    }\r\n\r\n    static use = new SpineParser().genMiddleware().use;\r\n\r\n    static registerLoaderPlugin() {\r\n        Loader.registerPlugin(SpineParser);\r\n    }\r\n}\r\n","import {IAnimationState, IAnimationStateData, ISkeleton, ISkeletonData, SpineBase} from \"@pixi-spine/base\";\r\nimport * as spine38 from \"@pixi-spine/runtime-3.8\";\r\nimport * as spine37 from \"@pixi-spine/runtime-3.7\";\r\nimport * as spine40 from \"@pixi-spine/runtime-4.0\";\r\nimport {detectSpineVersion, SPINE_VERSION} from \"./versions\";\r\n\r\n/**\r\n * @public\r\n */\r\nexport class Spine extends SpineBase<ISkeleton,\r\n    ISkeletonData,\r\n    IAnimationState,\r\n    IAnimationStateData> {\r\n\r\n    createSkeleton(spineData: ISkeletonData) {\r\n        const ver = detectSpineVersion(spineData.version);\r\n        let spine: any = null;\r\n\r\n        if (ver === SPINE_VERSION.VER37) {\r\n            spine = spine37;\r\n        }\r\n        if (ver === SPINE_VERSION.VER38) {\r\n            spine = spine38;\r\n        }\r\n        if (ver === SPINE_VERSION.VER40) {\r\n            spine = spine40;\r\n        }\r\n        if (!spine) {\r\n            let error = `Cant detect version of spine model ${spineData.version}`;\r\n            console.error(error);\r\n        }\r\n        this.skeleton = new spine.Skeleton(spineData);\r\n        this.skeleton.updateWorldTransform();\r\n        this.stateData = new spine.AnimationStateData(spineData);\r\n        this.state = new spine.AnimationState(this.stateData);\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpFA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;"}